diff -rbc titroff/README /distribution/dwb/text/troff.d/README
*** titroff/README	Fri Jul 16 22:27:13 1982
--- /distribution/dwb/text/troff.d/README	Fri Sep  9 18:44:29 1983
***************
*** 1,5
  
! The troff in this directory (known as a.out)
  is a troff that produces machine-independent output.
  It requires a file of descriptive information about
  the particular typesetter you have in mind, and produces

--- 1,5 -----
  
! The troff in this directory
  is a troff that produces machine-independent output.
  It requires a file of descriptive information about
  the particular typesetter you have in mind, and produces
***************
*** 6,13
  output parameterized for that device.
  
  Thus:
! 	a.out -T202 ...
! produces output for the mergenthaler linotron 202.
  (This is the default.)
  
  To make this work, one needs to create a set of

--- 6,13 -----
  output parameterized for that device.
  
  Thus:
! 	troff -Taps ...
! produces output for the Autologic APS-5.
  (This is the default.)
  
  To make this work, one needs to create a set of
***************
*** 15,23
  	/usr/lib/font/devxxx
  where "xxx" is your device name.
  Currently supported devices are
! 	202	mergenthaler 202 using our software
! 	aps	autologic aps5
! 	cat	gsi cat (not really working at present)
  
  The file "DESC" contains information about the
  device itself and the character set.  The file dev202/DESC

--- 15,21 -----
  	/usr/lib/font/devxxx
  where "xxx" is your device name.
  Currently supported devices are
! 	aps	Autologic APS-5
  
  The file "DESC" contains information about the
  device itself and the character set.  The file devaps/DESC
***************
*** 20,26
  	cat	gsi cat (not really working at present)
  
  The file "DESC" contains information about the
! device itself and the character set.  The file dev202/DESC
  is a good example; follow the format closely.
  
  In addition, each font needs a description of its

--- 18,24 -----
  	aps	Autologic APS-5
  
  The file "DESC" contains information about the
! device itself and the character set.  The file devaps/DESC
  is a good example; follow the format closely.
  
  In addition, each font needs a description of its
***************
*** 25,31
  
  In addition, each font needs a description of its
  characters, width and device-driving codes;
! see dev202/R and S for typical examples.
  
  The program "makedev" will convert these text
  descriptions into a binary form that the a.out can

--- 23,29 -----
  
  In addition, each font needs a description of its
  characters, width and device-driving codes;
! see devaps/R and S for typical examples.
  
  The program "makedev" will convert these text
  descriptions into a binary form that the troff can
***************
*** 28,34
  see dev202/R and S for typical examples.
  
  The program "makedev" will convert these text
! descriptions into a binary form that the a.out can
  slurp up in a single gulp during initialization;
  these wind up in dev202/DESC.out (which includes
  default font info) and XX.out for info about font XX.

--- 26,32 -----
  see devaps/R and S for typical examples.
  
  The program "makedev" will convert these text
! descriptions into a binary form that the troff can
  slurp up in a single gulp during initialization;
  these wind up in devaps/DESC.out (which includes
  default font info) and XX.out for info about font XX.
***************
*** 30,36
  The program "makedev" will convert these text
  descriptions into a binary form that the a.out can
  slurp up in a single gulp during initialization;
! these wind up in dev202/DESC.out (which includes
  default font info) and XX.out for info about font XX.
  
  The second half of the job is to write a post-processor

--- 28,34 -----
  The program "makedev" will convert these text
  descriptions into a binary form that the troff can
  slurp up in a single gulp during initialization;
! these wind up in devaps/DESC.out (which includes
  default font info) and XX.out for info about font XX.
  
  The second half of the job is to write a post-processor
***************
*** 34,40
  default font info) and XX.out for info about font XX.
  
  The second half of the job is to write a post-processor
! that converts the more or less machine-independent a.out
  output into specific codes for your favorite typesetter.
  d202.c is the driver for the 202;
  it will serve as a useful prototype.  In particular,

--- 32,38 -----
  default font info) and XX.out for info about font XX.
  
  The second half of the job is to write a post-processor
! that converts the more or less machine-independent troff
  output into specific codes for your favorite typesetter.
  daps.c is the driver for the APS-5;
  it will serve as a useful prototype.  In particular,
***************
*** 36,42
  The second half of the job is to write a post-processor
  that converts the more or less machine-independent a.out
  output into specific codes for your favorite typesetter.
! d202.c is the driver for the 202;
  it will serve as a useful prototype.  In particular,
  it contains a precise description of the output language.
  Other postprocessors are

--- 34,40 -----
  The second half of the job is to write a post-processor
  that converts the more or less machine-independent troff
  output into specific codes for your favorite typesetter.
! daps.c is the driver for the APS-5;
  it will serve as a useful prototype.  In particular,
  it contains a precise description of the output language.
  Other postprocessors are
***************
*** 40,47
  it will serve as a useful prototype.  In particular,
  it contains a precise description of the output language.
  Other postprocessors are
- 	daps	aps5
- 	dcat	graphic systems CAT (not really up to date)
  	tc	tektronix 4014
  	hc	hp2621 (mainly for crude graphics)
  	ta	prints ascii on ordinary terminals (crudely)

--- 38,43 -----
  it will serve as a useful prototype.  In particular,
  it contains a precise description of the output language.
  Other postprocessors are
  	tc	tektronix 4014
  	hc	hp2621 (mainly for crude graphics)
  	ta	prints ascii on ordinary terminals (crudely)
***************
*** 45,52
  	tc	tektronix 4014
  	hc	hp2621 (mainly for crude graphics)
  	ta	prints ascii on ordinary terminals (crudely)
- 	dcan	driver for Imagen/Canon laser printer
- 	d8400	untested driver for compugraphics 8400
  
  The 202 driver writes onto /dev/202 in the same way that
  old troff writes on /dev/cat; to get its output on the std output,

--- 41,46 -----
  	tc	tektronix 4014
  	hc	hp2621 (mainly for crude graphics)
  	ta	prints ascii on ordinary terminals (crudely)
  
  The aps driver writes onto /dev/aps in the same way that
  old troff writes on /dev/cat; to get its output on the std output,
***************
*** 48,54
  	dcan	driver for Imagen/Canon laser printer
  	d8400	untested driver for compugraphics 8400
  
! The 202 driver writes onto /dev/202 in the same way that
  old troff writes on /dev/cat; to get its output on the std output,
  use, e.g., d202 -t ... >file.
  

--- 42,48 -----
  	hc	hp2621 (mainly for crude graphics)
  	ta	prints ascii on ordinary terminals (crudely)
  
! The aps driver writes onto /dev/aps in the same way that
  old troff writes on /dev/cat; to get its output on the std output,
  use, e.g., daps -t ... >file.
  
***************
*** 50,56
  
  The 202 driver writes onto /dev/202 in the same way that
  old troff writes on /dev/cat; to get its output on the std output,
! use, e.g., d202 -t ... >file.
  
  One can always simply run
  	a.out

--- 44,50 -----
  
  The aps driver writes onto /dev/aps in the same way that
  old troff writes on /dev/cat; to get its output on the std output,
! use, e.g., daps -t ... >file.
  
  One can always simply run
  	troff
***************
*** 53,59
  use, e.g., d202 -t ... >file.
  
  One can always simply run
! 	a.out
  and look at the output; it is guaranteed to be ascii text
  and thus safe to edit, grep, etc.
  (Since it is ascii, it is also guaranteed to be quite voluminous.)

--- 47,53 -----
  use, e.g., daps -t ... >file.
  
  One can always simply run
! 	troff
  and look at the output; it is guaranteed to be ascii text
  and thus safe to edit, grep, etc.
  (Since it is ascii, it is also guaranteed to be quite voluminous.)
***************
*** 57,86
  and look at the output; it is guaranteed to be ascii text
  and thus safe to edit, grep, etc.
  (Since it is ascii, it is also guaranteed to be quite voluminous.)
! On our system, /usr/bin/troff is actually a shell program
! that detects -Txxx arguments;  the current default is 202.
! 
! Putting output codes into the font description files
! seems like the right thing to do but I'm not happy yet.
! Accordingly, the formats of any or all of the files
! described here are subject to drastic change; hang loose.
! 
! To clear up one potential misapprehension, the code in this
! directory has not been retrofitted to make an nroff. 
! That would require major surgery, primarily on n6.c and n10.c.
! 
! As it says in the Unix warranty:
! 	"There is no warranty of merchantability nor any warranty
! 	of fitness for a particular purpose nor any other warranty,
! 	either express or implied, as to the accuracy of the
! 	enclosed materials or as to their suitability for any
! 	particular purpose.  Accordingly, Bell Telephone
! 	Laboratories assumes no responsibility for their use by the
! 	recipient.   Further, Bell Laboratories assumes no obligation
! 	to furnish any assistance of any kind whatsoever, or to
! 	furnish any additional information or documentation."
! 
! Nevertheless, I will try to answer questions in cases of
! dire necessity.  Suggestions and other comments would be appreciated.
! 
! Brian W. Kernighan

--- 51,54 -----
  and look at the output; it is guaranteed to be ascii text
  and thus safe to edit, grep, etc.
  (Since it is ascii, it is also guaranteed to be quite voluminous.)
! SCCS @(#)README	1.3
diff -rbc titroff/d.h /distribution/dwb/text/troff.d/d.h
*** titroff/d.h	Sun Feb 21 15:07:44 1982
--- /distribution/dwb/text/troff.d/d.h	Fri Sep  9 18:44:31 1983
***************
*** 1,2
  struct d {filep op; int dnl,dimac,ditrap,ditf,alss,blss,nls,mkline,
  		maxl,hnl,curd;} d[NDI], *dip;

--- 1,3 -----
+ /*      @(#)d.h	1.1     */
  struct d {filep op; int dnl,dimac,ditrap,ditf,alss,blss,nls,mkline,
  		maxl,hnl,curd;} d[NDI], *dip;
diff -rbc titroff/dev.h /distribution/dwb/text/troff.d/dev.h
*** titroff/dev.h	Mon Sep 15 22:29:14 1986
--- /distribution/dwb/text/troff.d/dev.h	Fri Sep  9 18:44:35 1983
***************
*** 1,3
  /*
  	dev.h: characteristics of a typesetter
  */

--- 1,4 -----
+ /*      @(#)dev.h	1.1     */
  /*
  	dev.h: characteristics of a typesetter
  */
***************
*** 18,26
  	short	lchname;	/* length of chname table */
  	short	spare1;		/* in case of expansion */
  	short	spare2;
- #ifdef DESCHASNAME
- 	char dname[10];		/* name of troff device (eg. APS, cat) */
- #endif DESCHASNAME
  };
  
  struct font {		/* characteristics of a font */

--- 19,24 -----
  	short	lchname;	/* length of chname table */
  	short	spare1;		/* in case of expansion */
  	short	spare2;
  };
  
  struct font {		/* characteristics of a font */
diff -rbc titroff/draw.c /distribution/dwb/text/troff.d/draw.c
*** titroff/draw.c	Thu Mar 15 14:35:46 1984
--- /distribution/dwb/text/troff.d/draw.c	Fri Sep  9 18:44:42 1983
***************
*** 1,3
  #include	<stdio.h>
  #include	<math.h>
  #define	PI	3.141592654

--- 1,4 -----
+ /*      @(#)draw.c	1.1     */
  #include	<stdio.h>
  #include	<math.h>
  #define	PI	3.141592654
diff -rbc titroff/ext.h /distribution/dwb/text/troff.d/ext.h
*** titroff/ext.h	Tue Nov 11 15:17:15 1986
--- /distribution/dwb/text/troff.d/ext.h	Fri Sep  9 18:44:47 1983
***************
*** 1,3
  extern	char	**argp;
  extern	char	*chname;
  extern	char	*eibuf;

--- 1,4 -----
+ /*      @(#)ext.h	1.1     */
  extern	char	**argp;
  extern	char	*chname;
  extern	char	*eibuf;
***************
*** 10,15
  extern	char	*unlkp;
  extern	char	*xbufp;
  extern	char	*xeibuf;
  extern	char	codetab[];
  extern	char	devname[];
  extern	char	fontfile[];

--- 11,17 -----
  extern	char	*unlkp;
  extern	char	*xbufp;
  extern	char	*xeibuf;
+ extern	char	cfname[NSO][NS];
  extern	char	codetab[];
  extern	char	devname[];
  extern	char	fontfile[];
***************
*** 230,245
  extern	tchar	oline[];
  extern	tchar	rchar;
  extern	tchar	word[];
- #ifdef LOCALWARN
- #ifdef WARNLEVELREG
- /* warning level is taken from v.h instead -- v.wl --- req */
- #else !WARNLEVELREG
- extern	int	warninglevel;
- #endif WARNLEVELREG
- #endif LOCALWARN
- #ifdef REPORTERRS
- extern int	reporterrs;	/* < 0 means no warnings given */
- #endif REPORTERRS
- #ifdef TCHARTOS
- extern char *tchartos();	/* gives a string representation of a tchar */
- #endif TCHARTOS

--- 232,234 -----
  extern	tchar	oline[];
  extern	tchar	rchar;
  extern	tchar	word[];
Only in titroff: local.c
Only in titroff: local.h
diff -rbc titroff/makedev.c /distribution/dwb/text/troff.d/makedev.c
*** titroff/makedev.c	Mon Nov 10 21:09:29 1986
--- /distribution/dwb/text/troff.d/makedev.c	Fri Sep  9 18:45:10 1983
***************
*** 1,3
  /*
    makedev:
  	read text info about a particular device

--- 1,4 -----
+ /*      @(#)makedev.c	1.2     */
  /*
    makedev:
  	read text info about a particular device
***************
*** 17,25
  		creates files F.out.
  
  	DESC.out contains:
- #ifdef DESCHASNAME
- 	dev structure with fundamental sizes & typesetter name
- #else !DESCHASNAME
  	dev structure with fundamental sizes
  #endif DESCHASNAME
  	list of sizes (nsizes+1) terminated by 0, as short's

--- 18,23 -----
  		creates files F.out.
  
  	DESC.out contains:
  	dev structure with fundamental sizes
  	list of sizes (nsizes+1) terminated by 0, as short's
  	indices of char names (nchtab * sizeof(short))
***************
*** 21,27
  	dev structure with fundamental sizes & typesetter name
  #else !DESCHASNAME
  	dev structure with fundamental sizes
- #endif DESCHASNAME
  	list of sizes (nsizes+1) terminated by 0, as short's
  	indices of char names (nchtab * sizeof(short))
  	char names as hy\0em\0... (lchname)

--- 19,24 -----
  
  	DESC.out contains:
  	dev structure with fundamental sizes
  	list of sizes (nsizes+1) terminated by 0, as short's
  	indices of char names (nchtab * sizeof(short))
  	char names as hy\0em\0... (lchname)
***************
*** 66,79
  char	kern[FSIZE];	/* ascender+descender info */
  char	code[FSIZE];	/* actual device codes for a physical font */
  
! #ifndef NFONT
! #ifdef MOREPREFONTS
! #define	NFONT	40	/* max number of default fonts */
! /* would like to get this from tdef.h, but then have problems with stdio.. */
! #else !MOREPREFONTS
! #define	NFONT	10	/* max number of default fonts */
! #endif MOREPREFONTS
! #endif !NFONT
  char	fname[NFONT][10];	/* temp space to hold default font names */
  
  int	fflag	= 0;	/* on if font table to be written */

--- 63,69 -----
  char	kern[FSIZE];	/* ascender+descender info */
  char	code[FSIZE];	/* actual device codes for a physical font */
  
! #define	NFONT	60	/* max number of default fonts */
  char	fname[NFONT][10];	/* temp space to hold default font names */
  
  int	fflag	= 0;	/* on if font table to be written */
***************
*** 86,93
  	FILE *fin;
  	char cmd[100], *p;
  	int i, totfont, v;
- #ifdef DESCHASNAME
- 	char devname[10];
  
  	dev.dname[0] = dev.dname[1] = '\0';	/* paranoia */
  #endif DESCHASNAME

--- 76,81 -----
  	FILE *fin;
  	char cmd[100], *p;
  	int i, totfont, v;
  
  	if ((fin = fopen("DESC", "r")) == NULL) {
  		fprintf(stderr, "makedev: can't open %s\n", argv[1]);
***************
*** 89,97
  #ifdef DESCHASNAME
  	char devname[10];
  
- 	dev.dname[0] = dev.dname[1] = '\0';	/* paranoia */
- #endif DESCHASNAME
- 
  	if ((fin = fopen("DESC", "r")) == NULL) {
  		fprintf(stderr, "makedev: can't open %s\n", argv[1]);
  		exit(1);

--- 77,82 -----
  	char cmd[100], *p;
  	int i, totfont, v;
  
  	if ((fin = fopen("DESC", "r")) == NULL) {
  		fprintf(stderr, "makedev: can't open %s\n", argv[1]);
  		exit(1);
***************
*** 98,111
  	}
  	while (fscanf(fin, "%s", cmd) != EOF) {
  		if (cmd[0] == '#')	/* comment */
- #ifdef DESCHASNAME
- 		{
- 			if (strcmp(cmd, "##name") == 0) {
- 				fscanf(fin, "%10s", dev.dname);
- 				dev.dname[9] = '\0';
- 				fprintf(stderr, "Makedev: DESC for %s\n",
- 								dev.dname);
- 			} else {
  				skipline(fin);
  			}
  		}

--- 83,88 -----
  	}
  	while (fscanf(fin, "%s", cmd) != EOF) {
  		if (cmd[0] == '#')	/* comment */
  			skipline(fin);
  		else if (strcmp(cmd, "res") == 0) {
  			fscanf(fin, "%hd", &dev.res);
***************
*** 107,117
  								dev.dname);
  			} else {
  				skipline(fin);
- 			}
- 		}
- #else !DESCHASNAME
- 			skipline(fin);
- #endif DESCHASNAME
  		else if (strcmp(cmd, "res") == 0) {
  			fscanf(fin, "%hd", &dev.res);
  		} else if (strcmp(cmd, "hor") == 0) {

--- 84,89 -----
  	while (fscanf(fin, "%s", cmd) != EOF) {
  		if (cmd[0] == '#')	/* comment */
  			skipline(fin);
  		else if (strcmp(cmd, "res") == 0) {
  			fscanf(fin, "%hd", &dev.res);
  		} else if (strcmp(cmd, "hor") == 0) {
***************
*** 153,164
  			fprintf(stderr, "makedev: unknown command %s\n", cmd);
  	}
  	if (argc > 0 && strcmp(argv[1], "DESC") == 0) {
- #ifdef DESCHASNAME
- 		if (dev.dname[0] == '\0') {
- 			fprintf(stderr, "makedev: no \"##name xxx\" entry in DESC\n");
- 			exit(1);
- 		}
- #endif DESCHASNAME
  		fdout = creat(fout, 0666);
  		if (fdout < 0) {
  			fprintf(stderr, "makedev: can't open %s\n", fout);

--- 125,130 -----
  			fprintf(stderr, "makedev: unknown command %s\n", cmd);
  	}
  	if (argc > 0 && strcmp(argv[1], "DESC") == 0) {
  		fdout = creat(fout, 0666);
  		if (fdout < 0) {
  			fprintf(stderr, "makedev: can't open %s\n", fout);
***************
*** 249,260
  				/* so leave previous values intact
  				*/
  				if (strlen(ch) == 1)	/* it's ascii */
- 				{
- #ifdef CHECKDESCFILES
- 					if (fitab[i]) {
- 						fprintf(stderr, "makedev: warning: duplicate entries for \"%s\"\n", ch);
- 					}
- #endif CHECKDESCFILES
  					fitab[ch[0] - 32] = nw;	/* fitab origin omits non-graphics */
  				}
  				else {		/* it has a funny name */

--- 215,220 -----
  				/* so leave previous values intact
  				*/
  				if (strlen(ch) == 1)	/* it's ascii */
  					fitab[ch[0] - 32] = nw;	/* fitab origin omits non-graphics */
  				else {		/* it has a funny name */
  					for (i = 0; i < dev.nchtab; i++)
***************
*** 256,262
  					}
  #endif CHECKDESCFILES
  					fitab[ch[0] - 32] = nw;	/* fitab origin omits non-graphics */
- 				}
  				else {		/* it has a funny name */
  					for (i = 0; i < dev.nchtab; i++)
  						if (strcmp(&chname[chtab[i]], ch) == 0) {

--- 216,221 -----
  				*/
  				if (strlen(ch) == 1)	/* it's ascii */
  					fitab[ch[0] - 32] = nw;	/* fitab origin omits non-graphics */
  				else {		/* it has a funny name */
  					for (i = 0; i < dev.nchtab; i++)
  						if (strcmp(&chname[chtab[i]], ch) == 0) {
***************
*** 260,270
  				else {		/* it has a funny name */
  					for (i = 0; i < dev.nchtab; i++)
  						if (strcmp(&chname[chtab[i]], ch) == 0) {
- #ifdef CHECKDESCFILES
- 							if (fitab[i]) {
- 								fprintf(stderr, "makedev: warning: duplicate entries for \"%s\"\n", ch);
- 							}
- #endif CHECKDESCFILES
  							fitab[i + 128-32] = nw;	/* starts after the ascii */
  							break;
  						}

--- 219,224 -----
  				else {		/* it has a funny name */
  					for (i = 0; i < dev.nchtab; i++)
  						if (strcmp(&chname[chtab[i]], ch) == 0) {
  							fitab[i + 128-32] = nw;	/* starts after the ascii */
  							break;
  						}
Only in titroff: makefile
diff -rbc titroff/n1.c /distribution/dwb/text/troff.d/n1.c
*** titroff/n1.c	Sat Nov 15 19:08:13 1986
--- /distribution/dwb/text/troff.d/n1.c	Tue Oct 25 17:24:09 1983
***************
*** 1,3
  #include <ctype.h>
  #include <sys/types.h>
  #include <sys/stat.h>

--- 1,5 -----
+ char xxxn1v[] = "@(#)n1.c	1.5";
+ 
  #include <ctype.h>
  #include <sys/types.h>
  #include <sys/stat.h>
***************
*** 2,10
  #include <sys/types.h>
  #include <sys/stat.h>
  #include "tdef.h"
- #ifdef BSD42
- #include <sys/time.h>
- #endif BSD42
  extern
  #include "d.h"
  extern

--- 4,9 -----
  #include <sys/types.h>
  #include <sys/stat.h>
  #include "tdef.h"
  extern
  #include "d.h"
  extern
***************
*** 28,39
  
  char	*sprintf();
  tchar	inchar[LNSIZE], *pinchar = inchar;	/* XXX */
- #ifdef COMMENT
- /* ioff, ipl[] and offl[] are also used in local.c, where they're decalred
-  * as extern.
-  * - req
-  */
- #endif COMMENT
  filep ipl[NSO];
  long	offl[NSO];
  long	ioff;

--- 27,32 -----
  
  char	*sprintf();
  tchar	inchar[LNSIZE], *pinchar = inchar;	/* XXX */
  filep ipl[NSO];
  long	offl[NSO];
  long	ioff;
***************
*** 38,50
  long	offl[NSO];
  long	ioff;
  char	*ttyp;
! #ifdef USEFONTPATH
! extern char *fontpath;	/* from t6.c */
! #endif USEFONTPATH
! 
! #ifdef COMMENT
! /* control table... rq is request name */
! #endif COMMENT
  extern struct contab {
  	int	rq;
  	union {

--- 31,38 -----
  long	offl[NSO];
  long	ioff;
  char	*ttyp;
! char	cfname[NSO][NS] = "<standard input>";	/*file name stack*/
! int	cfline[NSO];		/*input line count stack*/
  extern struct contab {
  	int	rq;
  	union {
***************
*** 52,59
  		unsigned	mx;
  	} x;
  } contab[NM];
- #ifdef REPORTERRS
- extern char *progname;
  
  #endif REPORTERRS
  

--- 40,45 -----
  		unsigned	mx;
  	} x;
  } contab[NM];
  
  main(argc, argv)
  int	argc;
***************
*** 55,62
  #ifdef REPORTERRS
  extern char *progname;
  
- #endif REPORTERRS
- 
  main(argc, argv)
  int	argc;
  char	**argv;

--- 41,46 -----
  	} x;
  } contab[NM];
  
  main(argc, argv)
  int	argc;
  char	**argv;
***************
*** 78,91
  	signal(SIGTERM, kcatch);
  	oargc = argc;
  	oargv = argv;
- #ifdef REPORTERRS
- 	/* save progname for local.c:errmsg() error reporting */
- 	for (p = argv[0]; *p; p++)
- 		;
- 	while (p > *argv && *p != '/')
- 		p--;
- 	progname = (p && *p == '/') ? ++p : argv[0];
- #endif REPORTERRS
  	init0();
  options:
  #ifdef ENVIRONMENT

--- 62,67 -----
  	signal(SIGTERM, kcatch);
  	oargc = argc;
  	oargv = argv;
  	init0();
  options:
  	while (--argc > 0 && (++argv)[0][0] == '-')
***************
*** 88,107
  #endif REPORTERRS
  	init0();
  options:
- #ifdef ENVIRONMENT
- 	/* no point making nroff look at the ditroff DESC files... */
- #ifndef NROFF
-       {	extern char *getenv();
- 	char *p = getenv("TYPESETTER");
- 
- 	if (p != (char *) 0) {
- 		strcpy(devname, p);
- 		dotT++;
- 	}
-       }
- #endif NROFF
- #endif ENVIRONMENT
- 
  	while (--argc > 0 && (++argv)[0][0] == '-')
  		switch (argv[0][1]) {
  

--- 64,69 -----
  	oargv = argv;
  	init0();
  options:
  	while (--argc > 0 && (++argv)[0][0] == '-')
  		switch (argv[0][1]) {
  
***************
*** 105,125
  	while (--argc > 0 && (++argv)[0][0] == '-')
  		switch (argv[0][1]) {
  
- #ifdef LOCALWARN
- #ifndef WARN_ALL
- #include "local.h"
- #endif WARN_ALL
- 		case 'W':
- 			/* print out warnings -- see local.h, local.c
- 			 * --- REQ 16/9/86
- 			 */
- #ifdef WARNLEVELREG
- 			v.wl = WARN_ALL;
- #else !WARNLEVELREG
- 			warninglevel = WARN_ALL;
- #endif WARNLEVELREG
- 			continue;
- #endif LOCALWARN
  		case 'F':	/* switch font tables from default */
  			if (argv[0][2] != '\0') {
  				strcpy(termtab, &argv[0][2]);

--- 67,72 -----
  	while (--argc > 0 && (++argv)[0][0] == '-')
  		switch (argv[0][1]) {
  
  		case 'F':	/* switch font tables from default */
  			if (argv[0][2] != '\0') {
  				strcpy(termtab, &argv[0][2]);
***************
*** 124,132
  			if (argv[0][2] != '\0') {
  				strcpy(termtab, &argv[0][2]);
  				strcpy(fontfile, &argv[0][2]);
- #ifdef USEFONTPATH
- 				fontpath = &argv[0][2];
- #endif USEFONTPATH
  			} else {
  				argv++; argc--;
  #ifdef NOOPTARGFIX

--- 71,76 -----
  			if (argv[0][2] != '\0') {
  				strcpy(termtab, &argv[0][2]);
  				strcpy(fontfile, &argv[0][2]);
  			} else {
  				argv++; argc--;
  				strcpy(termtab, argv[0]);
***************
*** 129,151
  #endif USEFONTPATH
  			} else {
  				argv++; argc--;
- #ifdef NOOPTARGFIX
- #ifdef REPORTERRS
- 				if (argc <= 0) {
- 					errmsg(done, 02,
- 					"-F option must be followed by a %s",
- #ifdef FONTFAMILIES
- 							"font path"
- #else !FONTFAMILIES
- 							"directory name"
- #endif FONTFAMILIES
- 									);
- #else !REPORTERRS
- 					fprintf(stderr, "troff: -F needs an argument");
- 					edone(02);
- #endif REPORTERRS
- #endif NOOPTARGFIX
- 				}
  				strcpy(termtab, argv[0]);
  				strcpy(fontfile, argv[0]);
  #ifdef USEFONTPATH

--- 73,78 -----
  				strcpy(fontfile, &argv[0][2]);
  			} else {
  				argv++; argc--;
  				strcpy(termtab, argv[0]);
  				strcpy(fontfile, argv[0]);
  			}
***************
*** 148,156
  				}
  				strcpy(termtab, argv[0]);
  				strcpy(fontfile, argv[0]);
- #ifdef USEFONTPATH
- 				fontpath = argv[0];
- #endif USEFONTPATH
  			}
  			continue;
  #ifdef COMMENT

--- 75,80 -----
  				argv++; argc--;
  				strcpy(termtab, argv[0]);
  				strcpy(fontfile, argv[0]);
  			}
  			continue;
  		case 0:
***************
*** 153,161
  #endif USEFONTPATH
  			}
  			continue;
- #ifdef COMMENT
- 		/* - : read stdin */
- #endif COMMENT
  		case 0:
  			goto start;
  #ifdef COMMENT

--- 77,82 -----
  				strcpy(fontfile, argv[0]);
  			}
  			continue;
  		case 0:
  			goto start;
  		case 'i':
***************
*** 158,166
  #endif COMMENT
  		case 0:
  			goto start;
- #ifdef COMMENT
- 		/* -i : read stdin after all i/p files have been exhausted */
- #endif COMMENT
  		case 'i':
  			stdi++;
  			continue;

--- 79,84 -----
  			continue;
  		case 0:
  			goto start;
  		case 'i':
  			stdi++;
  			continue;
***************
*** 164,172
  		case 'i':
  			stdi++;
  			continue;
- #ifdef COMMENT
- 		/* -q : simultaneous i/o mode of .rd */
- #endif COMMENT
  		case 'q':
  			quiet++;
  			if (gtty(0, &ttys) >= 0)

--- 82,87 -----
  		case 'i':
  			stdi++;
  			continue;
  		case 'q':
  			quiet++;
  			if (gtty(0, &ttys) >= 0)
***************
*** 172,180
  			if (gtty(0, &ttys) >= 0)
  				ttysave = ttys.sg_flags;
  			continue;
- #ifdef COMMENT
- 		/* -nM : 1st page to be numbered M */
- #endif COMMENT
  		case 'n':
  			npn = ctoi(&argv[0][2]);
  			continue;

--- 87,92 -----
  			if (gtty(0, &ttys) >= 0)
  				ttysave = ttys.sg_flags;
  			continue;
  		case 'n':
  			npn = ctoi(&argv[0][2]);
  			continue;
***************
*** 182,192
  			bdtab[3] = ctoi(&argv[0][2]);
  			if (bdtab[3] < 0 || bdtab[3] > 50)
  				bdtab[3] = 0;
- #ifdef REPORTERRS
- 			if (bdtab[3] == 0) {
- 				errmsg(EWARN, "-u option must be followed by a number in the range 0 - 50; using 0");
- 			}
- #endif REPORTERRS
  			continue;
  #ifdef COMMENT
  		/* -s -- stop every n pages */

--- 94,99 -----
  			bdtab[3] = ctoi(&argv[0][2]);
  			if (bdtab[3] < 0 || bdtab[3] > 50)
  				bdtab[3] = 0;
  			continue;
  		case 's':
  			if (!(stop = ctoi(&argv[0][2])))
***************
*** 188,196
  			}
  #endif REPORTERRS
  			continue;
- #ifdef COMMENT
- 		/* -s -- stop every n pages */
- #endif COMMENT
  		case 's':
  			if (!(stop = ctoi(&argv[0][2])))
  				stop++;

--- 95,100 -----
  			if (bdtab[3] < 0 || bdtab[3] > 50)
  				bdtab[3] = 0;
  			continue;
  		case 's':
  			if (!(stop = ctoi(&argv[0][2])))
  				stop++;
***************
*** 195,203
  			if (!(stop = ctoi(&argv[0][2])))
  				stop++;
  			continue;
- #ifdef COMMENT
- 		/* -rA=n --- set register A to n */
- #endif COMMENT
  		case 'r':
  			eibuf = sprintf(ibuf+strlen(ibuf), ".nr %c %s\n",
  				argv[0][2], &argv[0][3]);

--- 99,104 -----
  			if (!(stop = ctoi(&argv[0][2])))
  				stop++;
  			continue;
  		case 'r':
  			eibuf = sprintf(ibuf+strlen(ibuf), ".nr %c %s\n",
  				argv[0][2], &argv[0][3]);
***************
*** 202,210
  			eibuf = sprintf(ibuf+strlen(ibuf), ".nr %c %s\n",
  				argv[0][2], &argv[0][3]);
  			continue;
! #ifdef COMMENT
! 		/* -mxxx -- read macro package /usr/lib/tmac/tmac.xxx */ 
! #endif COMMENT
  		case 'm':
  			p = &nextf[nfi];
  			q = &argv[0][2];

--- 103,109 -----
  			eibuf = sprintf(ibuf+strlen(ibuf), ".nr %c %s\n",
  				argv[0][2], &argv[0][3]);
  			continue;
! 		case 'c':
  		case 'm':
  			p = &nextf[nfi];
  			q = &argv[0][2];
***************
*** 212,220
  				;
  			mflg++;
  			continue;
- #ifdef COMMENT
- 		/* -opagelist */
- #endif COMMENT
  		case 'o':
  			getpn(&argv[0][2]);
  			continue;

--- 111,116 -----
  				;
  			mflg++;
  			continue;
  		case 'o':
  			getpn(&argv[0][2]);
  			continue;
***************
*** 234,244
  			continue;
  #endif
  #ifndef NROFF
- #ifdef COMMENT
- 		/* -Txxx -- read the DESC.out for typesetter xxx from
- 		 * /usr/lib/troff/descs/devxxx
- 		 */
- #endif COMMENT
  		case 'T':
  			strcpy(devname, &argv[0][2]);
  			dotT++;

--- 130,135 -----
  			continue;
  #endif
  #ifndef NROFF
  		case 'T':
  			strncpy(devname, &argv[0][2], 11);
  			devname[11] = 0;	/*directory name is char[14]*/
***************
*** 240,246
  		 */
  #endif COMMENT
  		case 'T':
! 			strcpy(devname, &argv[0][2]);
  			dotT++;
  			continue;
  #ifdef COMMENT

--- 131,138 -----
  #endif
  #ifndef NROFF
  		case 'T':
! 			strncpy(devname, &argv[0][2], 11);
! 			devname[11] = 0;	/*directory name is char[14]*/
  			dotT++;
  			continue;
  		case 'z':
***************
*** 243,251
  			strcpy(devname, &argv[0][2]);
  			dotT++;
  			continue;
- #ifdef COMMENT
- 		/* -z --- efficiently suppress output */
- #endif COMMENT
  		case 'z':
  			no_out++;
  #ifdef COMMENT

--- 135,140 -----
  			devname[11] = 0;	/*directory name is char[14]*/
  			dotT++;
  			continue;
  		case 'z':
  			no_out++;
  		case 'a':
***************
*** 248,258
  #endif COMMENT
  		case 'z':
  			no_out++;
- #ifdef COMMENT
- 		/* -a -- provide ascii approximation to o/p.  Doesn't seem
- 		 * to work too well
- 		 */
- #endif COMMENT
  		case 'a':
  			ascii = 1;
  			nofeed++;

--- 137,142 -----
  			continue;
  		case 'z':
  			no_out++;
  		case 'a':
  			ascii = 1;
  			nofeed++;
***************
*** 258,266
  			nofeed++;
  		case 't':
  			ptid = 1;
- #ifdef COMMENT
- 		/* -f --- suppress final page-throw? */
- #endif COMMENT
  			continue;
  		case 'f':
  			nofeed++;

--- 142,147 -----
  			nofeed++;
  		case 't':
  			ptid = 1;
  			continue;
  		case 'f':
  			nofeed++;
***************
*** 270,284
  			fprintf(stderr, "troff: unknown option %s\n", argv[0]);
  			done(02);
  		}
- #ifndef NROFF
- #ifdef USEFONTPATH
- 	/*
- 	if (fontpath && devname && *devname) {
- 		sprintf(fontpath, FONTPATH, devname);
- 	}
- 	*/
- #endif USEFONTPATH
- #endif NROFF
  
  start:
  	init1(oargv[0][0]);

--- 151,156 -----
  			fprintf(stderr, "troff: unknown option %s\n", argv[0]);
  			done(02);
  		}
  
  start:
  	init1(oargv[0][0]);
***************
*** 298,306
  	if (pendt)
  		goto lt;
  	if ((j = cbits(i)) == XPAR) {
- #ifdef COMMENT
- 		/* transparent mode line... */
- #endif COMMENT
  		copyf++;
  		tflg++;
  		while (cbits(i) != '\n')

--- 170,175 -----
  	if (pendt)
  		goto lt;
  	if ((j = cbits(i)) == XPAR) {
  		copyf++;
  		tflg++;
  		while (cbits(i) != '\n')
***************
*** 310,318
  		goto loop;
  	}
  	if (j == cc || j == c2) {
- #ifdef COMMENT
- 		/* macro request... */
- #endif COMMENT
  		if (j == c2)
  			nb++;
  #ifdef COMMENT

--- 179,184 -----
  		goto loop;
  	}
  	if (j == cc || j == c2) {
  		if (j == c2)
  			nb++;
  		copyf++;
***************
*** 315,323
  #endif COMMENT
  		if (j == c2)
  			nb++;
- #ifdef COMMENT
- 			/* suppress line-break */
- #endif COMMENT
  		copyf++;
  #ifdef COMMENT
  		/* read macro args in copy mode */

--- 181,186 -----
  	if (j == cc || j == c2) {
  		if (j == c2)
  			nb++;
  		copyf++;
  		while ((j = cbits(i = getch())) == ' ' || j == '\t')
  			;
***************
*** 319,329
  			/* suppress line-break */
  #endif COMMENT
  		copyf++;
- #ifdef COMMENT
- 		/* read macro args in copy mode */
- 
- 		/* skip blanks between . and macro-name */
- #endif COMMENT
  		while ((j = cbits(i = getch())) == ' ' || j == '\t')
  			;
  		ch = i;

--- 182,187 -----
  		if (j == c2)
  			nb++;
  		copyf++;
  		while ((j = cbits(i = getch())) == ' ' || j == '\t')
  			;
  		ch = i;
***************
*** 352,363
  }
  
  
- #ifdef COMMENT
- /* init0 is called once, before any args are parsed (except that progname is
-  * defined)
-  * - req
-  */
- #endif COMMENT
  init0()
  {
  	eibuf = ibufp = ibuf;

--- 210,215 -----
  }
  
  
  init0()
  {
  	eibuf = ibufp = ibuf;
***************
*** 363,371
  	eibuf = ibufp = ibuf;
  	ibuf[0] = 0;
  	v.nl = -1;
- #ifdef WARNLEVELREG
- 	v.wl = WARN_ONCE;
- #endif WARNLEVELREG
  }
  
  

--- 215,220 -----
  	eibuf = ibufp = ibuf;
  	ibuf[0] = 0;
  	v.nl = -1;
  }
  
  
***************
*** 369,379
  }
  
  
- #ifdef COMMENT
- /* init1 is called once after the arguments have been parsed and before
-  * main processing - req
-  */
- #endif COMMENT
  init1(a)
  char	a;
  {

--- 218,223 -----
  }
  
  
  init1(a)
  char	a;
  {
***************
*** 382,388
  	register i;
  
  	p = mktemp("/usr/tmp/trtmpXXXXX");
- #ifdef USEDOTFORTMPIFA
  	if (a == 'a')
  		p = &p[9];
  #endif USEDOTFORTMPIFA

--- 226,231 -----
  	register i;
  
  	p = mktemp("/usr/tmp/trtmpXXXXX");
  	if (a == 'a')
  		p = &p[9];
  	if ((close(creat(p, 0600))) < 0) {
***************
*** 385,399
  #ifdef USEDOTFORTMPIFA
  	if (a == 'a')
  		p = &p[9];
- #endif USEDOTFORTMPIFA
- #ifdef COMMENT
- 	/* i.e., if troff's name begins with "a", use the current directory
- 	 * for tmp files.  The 9 refers to the string passed to mktemp.
- 	 * Presumable this is for testing, when titroff is complied as
- 	 * a.out
- 	 * REQ
- 	 */
- #endif COMMENT
  	if ((close(creat(p, 0600))) < 0) {
  #ifdef REPORTERRS
  		extern void exit();	/* ! */

--- 228,233 -----
  	p = mktemp("/usr/tmp/trtmpXXXXX");
  	if (a == 'a')
  		p = &p[9];
  	if ((close(creat(p, 0600))) < 0) {
  		fprintf(stderr, "troff: cannot create temp file.\n");
  		exit(-1);
***************
*** 395,405
  	 */
  #endif COMMENT
  	if ((close(creat(p, 0600))) < 0) {
- #ifdef REPORTERRS
- 		extern void exit();	/* ! */
- 
- 		errmsg(exit, -1, "cannot create temp file \"%s\"", p);
- #else !REPORTERRS
  		fprintf(stderr, "troff: cannot create temp file.\n");
  		exit(-1);
  #endif REPORTERRS

--- 229,234 -----
  	if (a == 'a')
  		p = &p[9];
  	if ((close(creat(p, 0600))) < 0) {
  		fprintf(stderr, "troff: cannot create temp file.\n");
  		exit(-1);
  	}
***************
*** 402,408
  #else !REPORTERRS
  		fprintf(stderr, "troff: cannot create temp file.\n");
  		exit(-1);
- #endif REPORTERRS
  	}
  	ibf = open(p, 2);
  	unlkp = p;

--- 231,236 -----
  	if ((close(creat(p, 0600))) < 0) {
  		fprintf(stderr, "troff: cannot create temp file.\n");
  		exit(-1);
  	}
  	ibf = open(p, 2);
  	unlkp = p;
***************
*** 412,422
  }
  
  
- #ifdef COMMENT
- /* init2 is called once, after init1, and after saving arg[cv] in oarg[cv]
-  * - req
-  */
- #endif COMMENT
  init2()
  {
  	register i, j;

--- 240,245 -----
  }
  
  
  init2()
  {
  	register i, j;
***************
*** 468,477
  	long	tt;
  	register i;
  	static int ms[] = { 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };
- #ifdef BSD42
- 	struct timeval t;
- 	struct timezone tz;
- #endif BSD42
  
  #ifdef BSD42
  	gettimeofday(&t, &tz);

--- 291,296 -----
  	long	tt;
  	register i;
  	static int ms[] = { 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };
  
  	time(&tt);
  	tt -= 3600 * ZONE;	/* 5hrs for EST */
***************
*** 473,483
  	struct timezone tz;
  #endif BSD42
  
- #ifdef BSD42
- 	gettimeofday(&t, &tz);
- 	t.tv_sec -+ 60 * tz.tz_minuteswest;	/* 0 for GMT, 5h for EST */
- 	v.dy = (t.tv_sec/86400L) + 1;		/* day of the year */
- #else !BSD42
  	time(&tt);
  	tt -= 3600 * ZONE;	/* 5hrs for EST */
  	v.dy = (tt / 86400L) + 1;

--- 292,297 -----
  	register i;
  	static int ms[] = { 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };
  
  	time(&tt);
  	tt -= 3600 * ZONE;	/* 5hrs for EST */
  	v.dy = (tt / 86400L) + 1;
***************
*** 481,487
  	time(&tt);
  	tt -= 3600 * ZONE;	/* 5hrs for EST */
  	v.dy = (tt / 86400L) + 1;
- #endif BSD42
  	v.dw = (v.dy + 3) % 7 + 1;
  	for (v.yr = 70; ; v.yr++) {
  		if ((v.yr) % 4)

--- 295,300 -----
  	time(&tt);
  	tt -= 3600 * ZONE;	/* 5hrs for EST */
  	v.dy = (tt / 86400L) + 1;
  	v.dw = (v.dy + 3) % 7 + 1;
  	for (v.yr = 70; ; v.yr++) {
  		if ((v.yr) % 4)
***************
*** 694,702
  register int	a, b;
  {
  	register int	j;
- #ifdef BUILTINCONTROLFIX
- 	int i = 0;
- #endif BUILTINCONTROLFIX
  
  	if (a == 0 || (j = findmn(a)) == -1)
  #ifdef REPORTERRS

--- 507,512 -----
  register int	a, b;
  {
  	register int	j;
  
  	if (a == 0 || (j = findmn(a)) == -1)
  		return(0);
***************
*** 699,712
  #endif BUILTINCONTROLFIX
  
  	if (a == 0 || (j = findmn(a)) == -1)
- #ifdef REPORTERRS
- 	{
- 		extern char *realname();  /* defined in local.c */
- 
- 		if (a && a != PAIR(RIGHT, 0)) {
- 			errmsg(EWARN, "Call to unknown macro (%s) ignored",
- 								realname(a));
- 		}
  		return(0);
  	}
  #else !REPORTERRS

--- 509,514 -----
  	register int	j;
  
  	if (a == 0 || (j = findmn(a)) == -1)
  		return(0);
  	if (contab[j].rq & MMASK) {
  		nxf->nargs = 0;
***************
*** 708,717
  								realname(a));
  		}
  		return(0);
- 	}
- #else !REPORTERRS
- 		return(0);
- #endif REPORTERRS
  	if (contab[j].rq & MMASK) {
  		nxf->nargs = 0;
  #ifdef BUILTINCONTROLFIX

--- 510,515 -----
  
  	if (a == 0 || (j = findmn(a)) == -1)
  		return(0);
  	if (contab[j].rq & MMASK) {
  		nxf->nargs = 0;
  		if (b)
***************
*** 714,722
  #endif REPORTERRS
  	if (contab[j].rq & MMASK) {
  		nxf->nargs = 0;
- #ifdef BUILTINCONTROLFIX
- 		if (b > 0)
- #else !BUILTINCONTROLFIX
  		if (b)
  #endif BUILTINCONTROLFIX
  			collect();

--- 512,517 -----
  		return(0);
  	if (contab[j].rq & MMASK) {
  		nxf->nargs = 0;
  		if (b)
  			collect();
  		flushi();
***************
*** 718,724
  		if (b > 0)
  #else !BUILTINCONTROLFIX
  		if (b)
- #endif BUILTINCONTROLFIX
  			collect();
  		flushi();
  		return(pushi((filep)contab[j].x.mx));

--- 513,518 -----
  	if (contab[j].rq & MMASK) {
  		nxf->nargs = 0;
  		if (b)
  			collect();
  		flushi();
  		return(pushi((filep)contab[j].x.mx));
***************
*** 723,740
  		flushi();
  		return(pushi((filep)contab[j].x.mx));
  	} else if (b)
- #ifdef BUILTINCONTROLFIX
- 	{
- 		if (b < 0) {
- 			/* don't want built-in macro to read input */
- 			/* this is from callsp() in n7.c */
- 			if (flss)
- 				i = flss; 
- 			else 
- 				i = lss;
- 			flss = 0;
- 			return((*contab[j].x.f)(i));
- 		} else {
  			return((*contab[j].x.f)(0));
  		}
  	}

--- 517,522 -----
  		flushi();
  		return(pushi((filep)contab[j].x.mx));
  	} else if (b)
  		return((*contab[j].x.f)(0));
  	else
  		return(0);
***************
*** 736,746
  			return((*contab[j].x.f)(i));
  		} else {
  			return((*contab[j].x.f)(0));
- 		}
- 	}
- #else !BUILTINCONTROLFIX
- 		return((*contab[j].x.f)(0));
- #endif BUILTINCONTROLFIX
  	else
  		return(0);
  }

--- 518,523 -----
  		return(pushi((filep)contab[j].x.mx));
  	} else if (b)
  		return((*contab[j].x.f)(0));
  	else
  		return(0);
  }
***************
*** 763,771
  	register int	k;
  	tchar i, j;
  	tchar setht(), setslant();
- #ifdef REPORTERRS
- 	static int leftcount = 0;	/* how many more \{ than \} in input */
- #endif REPORTERRS
  
  	level++;
  g0:

--- 540,545 -----
  	register int	k;
  	tchar i, j;
  	tchar setht(), setslant();
  
  	level++;
  g0:
***************
*** 825,837
  	switch (k) {
  
  	case '\n':	/* concealed newline */
- #ifdef LINENUMFIX
- 		/* current input line in this file */
- 		if (ip == 0) {
- 			/* reading from file rather than macro */
- 			v.cd++;
- 		}
- #endif LINENUMFIX
  		goto g0;
  	case 'n':	/* number register */
  		setn();

--- 599,604 -----
  	switch (k) {
  
  	case '\n':	/* concealed newline */
  		goto g0;
  	case 'n':	/* number register */
  		setn();
***************
*** 844,852
  		goto g0;
  	case '{':	/* LEFT */
  		i = LEFT;
- #ifdef REPORTERRS
- 		leftcount++;
- #endif REPORTERRS
  		goto gx;
  	case '}':	/* RIGHT */
  		i = RIGHT;

--- 611,616 -----
  		goto g0;
  	case '{':	/* LEFT */
  		i = LEFT;
  		goto gx;
  	case '}':	/* RIGHT */
  		i = RIGHT;
***************
*** 850,861
  		goto gx;
  	case '}':	/* RIGHT */
  		i = RIGHT;
- #ifdef REPORTERRS
- 		if (--leftcount < 0) {
- 			errmsg(EWARN, "\\} without a matching \\{");
- 			leftcount = 0;
- 		}
- #endif REPORTERRS
  		goto gx;
  	case '"':	/* comment */
  		while (cbits(i = getch0()) != '\n')

--- 614,619 -----
  		goto gx;
  	case '}':	/* RIGHT */
  		i = RIGHT;
  		goto gx;
  	case '"':	/* comment */
  		while (cbits(i = getch0()) != '\n')
***************
*** 934,947
  		case 'S':	/* slant */
  			i = setslant();
  			break;
- #ifdef ANYBASESTR
- 		case 'R':	/* \R'drawing function'string' --
- 				 * use 'drawing function' as baseline for text
- 				 * - req
- 				 */
- 			i = setbasestr();
- 			break;
- #endif ANYBASESTR
  		case 'f':	/* font indicator */
  			setfont(0);
  			goto g0;

--- 692,697 -----
  		case 'S':	/* slant */
  			i = setslant();
  			break;
  		case 'f':	/* font indicator */
  			setfont(0);
  			goto g0;
***************
*** 978,988
  			if ((k = findr(getsn())) != -1) {
  				vlist[k] = v.hp = sumhp();
  			}
- #ifdef REPORTERRS
- 			else {
- 				errmsg(EWARN, "\\k must be follwed by a valid number register name");
- 			}
- #endif REPORTERRS
  			goto g0;
  		case '0':	/* number space */
  			i = makem(width('0' | chbits));

--- 728,733 -----
  			if ((k = findr(getsn())) != -1) {
  				vlist[k] = v.hp = sumhp();
  			}
  			goto g0;
  		case '0':	/* number space */
  			i = makem(width('0' | chbits));
***************
*** 998,1006
  			break;
  		default:
  			i = j;
- #ifdef REPORTERRS
- 			errmsg(EWARN, "Unknown inline escape \"\\%s\"", tchartos(j));
- #endif REPORTERRS
  		}
  	else {
  		ch0 = j;

--- 743,748 -----
  			break;
  		default:
  			i = j;
  		}
  	else {
  		ch0 = j;
***************
*** 1056,1078
  		return(rchar);
  	}
  
- #ifdef COMMENT
- 	/* this is where input push-back is done for number registers,
- 	 * strings, macros & diversions.
- 	 * For a number register, \n(xx is expanded into cbuf[], and cp is
- 	 * set equal to cbuf.
- 	 *
- 	 * for macro arguments and strings, ap is used (Arg Pointer ?);
- 	 *
- 	 * for macros and diversions, ip is set.
- 	 *
- 	 * For single-char push-back, ch is set (all over the place!) --
- 	 * this is used at the start of getch()
- 	 *
- 	 * -- req
- 	 *
- 	 */
- #endif COMMENT
  again:
  	if (cp) {
  		if ((i = *cp++) == 0) {

--- 798,803 -----
  		return(rchar);
  	}
  
  again:
  	if (cp) {
  		if ((i = *cp++) == 0) {
***************
*** 1158,1163
  n1:
  	if ((p[0] == '-') && (p[1] == 0)) {
  		ifile = 0;
  	} else if ((ifile = open(p, 0)) < 0) {
  		fprintf(stderr, "troff: cannot open %s\n", p);
  		nfo -= mflg;

--- 883,889 -----
  n1:
  	if ((p[0] == '-') && (p[1] == 0)) {
  		ifile = 0;
+ 		strcpy(cfname[ifi],"<standard input>");
  	} else if ((ifile = open(p, 0)) < 0) {
  		fprintf(stderr, "troff: cannot open %s\n", p);
  		nfo -= mflg;
***************
*** 1162,1168
  		fprintf(stderr, "troff: cannot open %s\n", p);
  		nfo -= mflg;
  		done(02);
! 	}
  	nfo++;
  	v.cd = 0;
  	ioff = 0;

--- 888,895 -----
  		fprintf(stderr, "troff: cannot open %s\n", p);
  		nfo -= mflg;
  		done(02);
! 	} else
! 		strcpy(cfname[ifi],p);
  	nfo++;
  	v.cd = 0;
  	ioff = 0;
***************
*** 1166,1191
  	nfo++;
  	v.cd = 0;
  	ioff = 0;
- #ifdef REPORTERRS
- 	{
- 		extern char *ifilename;
- 
- 		/* set the filename so that local.c:errmsg() can use it */
- 
- 		ifilename = p;
- 		if (! strcmp(p, "-")) {
- 			ifilename = "stdin";
- 		}
- 		/* potential bug if the storage for nextf that p points to
- 		 * doesn't persist.  But as far as I can see it does.  Don't
- 		 * really want to invent a fixed-sized buffer.  If I get time,
- 		 * though, there will be a troff string that will contain
- 		 * the filename, and then storage won't be a problem.
- 		 * --- req, 6/10/86
- 		 */
- 		 /* BUG2: no easy way to change progname on a .so */
- 	}
- #endif REPORTERRS
  	return(0);
  n2:
  	if ((nfo -= mflg) && !stdi)

--- 893,898 -----
  	nfo++;
  	v.cd = 0;
  	ioff = 0;
  	return(0);
  n2:
  	if ((nfo -= mflg) && !stdi)
***************
*** 1192,1197
  		done(0);
  	nfo++;
  	v.cd = ifile = stdi = mflg = 0;
  	ioff = 0;
  	return(0);
  }

--- 899,905 -----
  		done(0);
  	nfo++;
  	v.cd = ifile = stdi = mflg = 0;
+ 	strcpy(cfname[ifi],"<standard input>");
  	ioff = 0;
  	return(0);
  }
***************
*** 1204,1209
  	extern char	*ttyname();
  
  	ioff = offl[--ifi];
  	ip = ipl[ifi];
  	if ((ifile = ifl[ifi]) == 0) {
  		p = xbuf;

--- 912,918 -----
  	extern char	*ttyname();
  
  	ioff = offl[--ifi];
+ 	v.cd = cfline[ifi];		/*restore line counter*/
  	ip = ipl[ifi];
  	if ((ifile = ifl[ifi]) == 0) {
  		p = xbuf;
***************
*** 1302,1318
  
  	lgf++;
  	nextf[0] = 0;
- #ifdef FONTFAMILIES
- 	if (skip() || !getname()) {
- #ifdef REPORTERRS
- 		errmsg(EWARN, "Call to .so with no arguments ignored");
- #else !REPORTERRS
- 		fprintf(stderr, "troff: Call to .so with no args ignored");
- #endif REPORTERRS
- 		return 0;
- 	}
- 	dosofile(".so");
- #else !FONTFAMILIES
  	if (skip() || !getname() || ((i = open(nextf, 0)) < 0) || (ifi >= NSO)) {
  #ifdef REPORTERRS
  		errmsg(done, 02, ".so: can't open file %s", nextf);

--- 1011,1016 -----
  
  	lgf++;
  	nextf[0] = 0;
  	if (skip() || !getname() || ((i = open(nextf, 0)) < 0) || (ifi >= NSO)) {
  		fprintf(stderr, "troff: can't open file %s\n", nextf);
  		done(02);
***************
*** 1314,1322
  	dosofile(".so");
  #else !FONTFAMILIES
  	if (skip() || !getname() || ((i = open(nextf, 0)) < 0) || (ifi >= NSO)) {
- #ifdef REPORTERRS
- 		errmsg(done, 02, ".so: can't open file %s", nextf);
- #else !REPORTERRS
  		fprintf(stderr, "troff: can't open file %s\n", nextf);
  		done(02);
  #endif REPORTERRS

--- 1012,1017 -----
  	lgf++;
  	nextf[0] = 0;
  	if (skip() || !getname() || ((i = open(nextf, 0)) < 0) || (ifi >= NSO)) {
  		fprintf(stderr, "troff: can't open file %s\n", nextf);
  		done(02);
  	}
***************
*** 1319,1325
  #else !REPORTERRS
  		fprintf(stderr, "troff: can't open file %s\n", nextf);
  		done(02);
- #endif REPORTERRS
  	}
  	flushi();
  	ifl[ifi] = ifile;

--- 1014,1019 -----
  	if (skip() || !getname() || ((i = open(nextf, 0)) < 0) || (ifi >= NSO)) {
  		fprintf(stderr, "troff: can't open file %s\n", nextf);
  		done(02);
  	}
  	strcpy(cfname[ifi+1], nextf);
  	cfline[ifi] = v.cd;		/*hold line counter*/
***************
*** 1321,1326
  		done(02);
  #endif REPORTERRS
  	}
  	flushi();
  	ifl[ifi] = ifile;
  	ifile = i;

--- 1015,1023 -----
  		fprintf(stderr, "troff: can't open file %s\n", nextf);
  		done(02);
  	}
+ 	strcpy(cfname[ifi+1], nextf);
+ 	cfline[ifi] = v.cd;		/*hold line counter*/
+ 	v.cd = 0;
  	flushi();
  	ifl[ifi] = ifile;
  	ifile = i;
***************
*** 1338,1344
  		while (p < eibuf)
  			*q++ = *p++;
  	}
- #endif FONTFAMILIES
  }
  
  

--- 1035,1040 -----
  		while (p < eibuf)
  			*q++ = *p++;
  	}
  }
  
  
***************
*** 1393,1401
  	register int n, neg;
  
  	if (*a == 0)
- #ifdef REPORTERRS
- 	{
- 		errmsg(EWARN, "-o: usage is -oLIST; no LIST of pagenumbers found");
  		return;
  	}
  #else !REPORTERRS

--- 1089,1094 -----
  	register int n, neg;
  
  	if (*a == 0)
  		return;
  	neg = 0;
  	for ( ; *a; a++)
***************
*** 1397,1406
  	{
  		errmsg(EWARN, "-o: usage is -oLIST; no LIST of pagenumbers found");
  		return;
- 	}
- #else !REPORTERRS
- 		return;
- #endif REPORTERRS
  	neg = 0;
  	for ( ; *a; a++)
  		switch (*a) {

--- 1090,1095 -----
  
  	if (*a == 0)
  		return;
  	neg = 0;
  	for ( ; *a; a++)
  		switch (*a) {
***************
*** 1422,1430
  			*pnp++ = neg ? -n : n;
  			neg = 0;
  			if (pnp >= &pnlist[NPN-2]) {
- #ifdef REPORTERRS
- 				errmsg(done2, -3, "too many pagenumbers (maximum is %d)", NPN);
- #else !REPORTERRS
  				fprintf(stderr, "troff: too many page numbers\n");
  				done3(-3);
  #endif REPORTERRS

--- 1111,1116 -----
  			*pnp++ = neg ? -n : n;
  			neg = 0;
  			if (pnp >= &pnlist[NPN-2]) {
  				fprintf(stderr, "troff: too many page numbers\n");
  				done3(-3);
  			}
***************
*** 1427,1433
  #else !REPORTERRS
  				fprintf(stderr, "troff: too many page numbers\n");
  				done3(-3);
- #endif REPORTERRS
  			}
  		}
  	if (neg)

--- 1113,1118 -----
  			if (pnp >= &pnlist[NPN-2]) {
  				fprintf(stderr, "troff: too many page numbers\n");
  				done3(-3);
  			}
  		}
  	if (neg)
Only in titroff: n10.c
diff -rbc titroff/n2.c /distribution/dwb/text/troff.d/n2.c
*** titroff/n2.c	Mon Nov 10 23:05:39 1986
--- /distribution/dwb/text/troff.d/n2.c	Fri Sep  9 18:45:21 1983
***************
*** 1,3
  #include "tdef.h"
  #include <sgtty.h>
  extern

--- 1,4 -----
+ /*	@(#)n2.c	1.2	*/
  #include "tdef.h"
  #include <sgtty.h>
  extern
***************
*** 92,98
  			oput(' ');
  			return;
  		}
! 		if (j < 0177) {
  			oput(j);
  			return;
  		}

--- 93,99 -----
  			oput(' ');
  			return;
  		}
! 		if (j < 0177 && j != WORDSP) {
  			oput(j);
  			return;
  		}
***************
*** 164,186
  			}
  #endif
  		}
- #ifdef TOOLATEFIX
- 		/* integer overflow seems unlikely, but could be 
- 		 * a little unfortunate in the *very* rare case that a
- 		 * .po happened at exactly the wrong time...
- 		 * Doing the stty twice would be bad, too, though
- 		 * While we're about it, let's check the write, too.
- 		 * though I don't know what to do if it fails!
- 		 */
- 		toolate = write(ptid, obuf, obufp - obuf);
- 		if (toolate != obufp - obuf) {
- #ifdef REPORTERRS
- 			errmsg(EWARN, "Write failed, errno = %d", errno);
- #endif REPORTERRS
- 			/* do something, I suppose.  Like ignore it */
- 		}
- 		toolate = 1;
- #else !TOOLATEFIX
  		toolate += write(ptid, obuf, obufp - obuf);
  #endif TOOLATEFIX
  	}

--- 165,170 -----
  			}
  #endif
  		}
  		toolate += write(ptid, obuf, obufp - obuf);
  	}
  	obufp = obuf;
***************
*** 182,188
  		toolate = 1;
  #else !TOOLATEFIX
  		toolate += write(ptid, obuf, obufp - obuf);
- #endif TOOLATEFIX
  	}
  	obufp = obuf;
  }

--- 166,171 -----
  #endif
  		}
  		toolate += write(ptid, obuf, obufp - obuf);
  	}
  	obufp = obuf;
  }
***************
*** 188,196
  }
  
  
- #ifdef LINTSTUFF
- void
- #endif LINTSTUFF
  done(x) 
  int	x;
  {

--- 171,176 -----
  }
  
  
  done(x) 
  int	x;
  {
***************
*** 205,216
  		if (control(i, 0))
  			longjmp(sjbuf, 1);
  	}
- #ifdef REPORTERRS
- 	if (dilev) {
- 		errmsg(EWARN, "End of File unexpected whilst diverting to %s",
- 				realname(dip->curd));
- 	}
- #endif REPORTERRS
  	if (!nfo)
  		done3(0);
  	mflg = 0;

--- 185,190 -----
  		if (control(i, 0))
  			longjmp(sjbuf, 1);
  	}
  	if (!nfo)
  		done3(0);
  	mflg = 0;
***************
*** 234,242
  }
  
  
- #ifdef LINTSTUFF
- void
- #endif LINTSTUFF
  done1(x) 
  int	x; 
  {

--- 208,213 -----
  }
  
  
  done1(x) 
  int	x; 
  {
***************
*** 258,266
  }
  
  
- #ifdef LINTSTUFF
- void
- #endif LINTSTUFF
  done2(x) 
  int	x; 
  {

--- 229,234 -----
  }
  
  
  done2(x) 
  int	x; 
  {
***************
*** 273,287
  	done3(x);
  }
  
- #ifdef COMMENT
- /* done3() seems to be the thing to call on a fatal error, as it does the
-  * least afterwords.
-  * -- req
-  */
- #endif COMMENT
- #ifdef LINTSTUFF
- void
- #endif LINTSTUFF
  done3(x) 
  int	x;
  {

--- 241,246 -----
  	done3(x);
  }
  
  done3(x) 
  int	x;
  {
***************
*** 302,310
  }
  
  
- #ifdef LINTSTUFF
- void
- #endif LINTSTUFF
  edone(x) 
  int	x;
  {

--- 261,266 -----
  }
  
  
  edone(x) 
  int	x;
  {
***************
*** 322,330
  	int	id[2];
  
  	if (toolate || skip() || !getname() || pipe(id) == -1 || (i = fork()) == -1) {
- #ifdef REPORTERRS
- 		errmsg(EWARN, ".pi: too late for pipe; not created");
- #else !REPORTERRS
  		fprintf(stderr, "Pipe not created.\n");
  #endif REPORTERRS
  		return;

--- 278,283 -----
  	int	id[2];
  
  	if (toolate || skip() || !getname() || pipe(id) == -1 || (i = fork()) == -1) {
  		fprintf(stderr, "Pipe not created.\n");
  		return;
  	}
***************
*** 326,332
  		errmsg(EWARN, ".pi: too late for pipe; not created");
  #else !REPORTERRS
  		fprintf(stderr, "Pipe not created.\n");
- #endif REPORTERRS
  		return;
  	}
  	ptid = id[1];

--- 279,284 -----
  
  	if (toolate || skip() || !getname() || pipe(id) == -1 || (i = fork()) == -1) {
  		fprintf(stderr, "Pipe not created.\n");
  		return;
  	}
  	ptid = id[1];
***************
*** 340,348
  	dup(id[0]);
  	close(id[1]);
  	execl(nextf, nextf, 0);
- #ifdef REPORTERRS
- 	errmsg(exit, -4, ".pi: cannot exec %s (errno = %d)", nextf, errno);
- #else !REPORTERRS
  	fprintf(stderr, "Cannot exec %s\n", nextf);
  	exit(-4);
  #endif REPORTERRS

--- 292,297 -----
  	dup(id[0]);
  	close(id[1]);
  	execl(nextf, nextf, 0);
  	fprintf(stderr, "Cannot exec %s\n", nextf);
  	exit(-4);
  }
***************
*** 345,349
  #else !REPORTERRS
  	fprintf(stderr, "Cannot exec %s\n", nextf);
  	exit(-4);
- #endif REPORTERRS
  }

--- 294,297 -----
  	execl(nextf, nextf, 0);
  	fprintf(stderr, "Cannot exec %s\n", nextf);
  	exit(-4);
  }
diff -rbc titroff/n3.c /distribution/dwb/text/troff.d/n3.c
*** titroff/n3.c	Tue Nov 11 18:51:29 1986
--- /distribution/dwb/text/troff.d/n3.c	Fri Sep  9 18:45:30 1983
***************
*** 1,3
  #include "tdef.h"
  extern
  #include "d.h"

--- 1,4 -----
+ /*      @(#)n3.c	1.1     */
  #include "tdef.h"
  extern
  #include "d.h"
***************
*** 49,61
  }
  
  
- #ifdef COMMENT
- /* .rn aa bb
-  * call aa bb
-  * Question: is it an error if aa doesn't exist?  I guess so, so we print
-  * a warning if -DREPORTERRS is set
-  */
- #endif COMMENT
  casern()
  {
  	register i, j;

--- 50,55 -----
  }
  
  
  casern()
  {
  	register i, j;
***************
*** 63,72
  	lgf++;
  	skip();
  	if ((i = getrq()) == 0 || (oldmn = findmn(i)) < 0)
- #ifdef REPORTERRS
- 	{
- 		if (i == 0) {
- 			errmsg(EWARN, ".rn called without arguments");
  			return;
  		} else {
  			errmsg(EWARN, ".rn: no macro called %s to rename",

--- 57,62 -----
  	lgf++;
  	skip();
  	if ((i = getrq()) == 0 || (oldmn = findmn(i)) < 0)
  		return;
  	skip();
  	clrmn(findmn(j = getrq()));
***************
*** 68,81
  		if (i == 0) {
  			errmsg(EWARN, ".rn called without arguments");
  			return;
- 		} else {
- 			errmsg(EWARN, ".rn: no macro called %s to rename",
- 					realname(i));
- 		}
- 	}
- #else !REPORTERRS
- 		return;
- #endif REPORTERRS
  	skip();
  	clrmn(findmn(j = getrq()));
  	if (j)

--- 58,63 -----
  	skip();
  	if ((i = getrq()) == 0 || (oldmn = findmn(i)) < 0)
  		return;
  	skip();
  	clrmn(findmn(j = getrq()));
  	if (j)
***************
*** 80,90
  	clrmn(findmn(j = getrq()));
  	if (j)
  		contab[oldmn].rq = (contab[oldmn].rq & MMASK) | j;
- #ifdef REPORTERRS
- 	else {
- 		errmsg(EWARN, ".rn %s: two arguments are needed", realname(i));
- 	}
- #endif REPORTERRS
  }
  
  

--- 62,67 -----
  	clrmn(findmn(j = getrq()));
  	if (j)
  		contab[oldmn].rq = (contab[oldmn].rq & MMASK) | j;
  }
  
  
***************
*** 88,100
  }
  
  
- #ifdef COMMENT
- /* should probably be an error to .rm a non-existant macro, but this happens
-  * too often for it to be helpful.
-  * Think of .rm as rm -rf
-  * -- req
-  */
- #endif COMMENT
  caserm()
  {
  	lgf++;

--- 65,70 -----
  }
  
  
  caserm()
  {
  	lgf++;
***************
*** 137,147
  	lgf++;
  	skip();
  	if ((i = getrq()) == 0)
- #ifdef REPORTERRS
- 	{
- 		errmsg(EWARN, "%s called with no argument",
- 			ds ? (app ? ".as" : ".ds") :
- 			     (app ? ".am" : ".de")  );
  		goto de1;
  	}
  #else !REPORTERRS

--- 107,112 -----
  	lgf++;
  	skip();
  	if ((i = getrq()) == 0)
  		goto de1;
  	if ((offset = finds(i)) == 0)
  		goto de1;
***************
*** 143,152
  			ds ? (app ? ".as" : ".ds") :
  			     (app ? ".am" : ".de")  );
  		goto de1;
- 	}
- #else !REPORTERRS
- 		goto de1;
- #endif REPORTERRS
  	if ((offset = finds(i)) == 0)
  		goto de1;
  #ifdef COMMENT

--- 108,113 -----
  	skip();
  	if ((i = getrq()) == 0)
  		goto de1;
  	if ((offset = finds(i)) == 0)
  		goto de1;
  	if (ds)
***************
*** 149,159
  #endif REPORTERRS
  	if ((offset = finds(i)) == 0)
  		goto de1;
- #ifdef COMMENT
- 		/* finds() returns 0 on an error, so no need to report it here
- 		 * -- req
- 		 */
- #endif COMMENT
  	if (ds)
  		copys();
  	else 

--- 110,115 -----
  		goto de1;
  	if ((offset = finds(i)) == 0)
  		goto de1;
  	if (ds)
  		copys();
  	else 
***************
*** 200,210
  	if (i >= 0) {
  		if (contab[i].rq & MMASK)
  			ffree((filep)contab[i].x.mx);
- #ifdef PROTECTBUILTINS
- 		else
- 			errmsg(EWARN, "Builtin request %s removed",
- 					realname(contab[i].rq & ~MMASK));
- #endif PROTECTBUILTINS
  		contab[i].rq = 0;
  		contab[i].x.mx = 0;
  	}

--- 156,161 -----
  	if (i >= 0) {
  		if (contab[i].rq & MMASK)
  			ffree((filep)contab[i].x.mx);
  		contab[i].rq = 0;
  		contab[i].x.mx = 0;
  	}
***************
*** 233,242
  			ip = incoff(ip);
  		nextb = ip;
  		ip = savip;
- #ifdef PROTECTBUILTINS
- 	} else if (app && oldmn >= 0) {
- 		errmsg(EWARN, "Built-in request %s redefined", realname(mn));
- #endif PROTECTBUILTINS
  	} else {
  		for (i = 0; i < NM; i++) {
  			if (contab[i].rq == 0)

--- 184,189 -----
  			ip = incoff(ip);
  		nextb = ip;
  		ip = savip;
  	} else {
  		for (i = 0; i < NM; i++) {
  			if (contab[i].rq == 0)
***************
*** 246,257
  			app = 0;
  			if (macerr++ > 1)
  				done2(02);
- #ifdef REPORTERRS
- 			errmsg(edone,04, "too many (%d) string/macro names", NM);
- 			/* edone() may return, so the return is needed.
- 			 * -- req
- 			 */
- #else !REPORTERRS
  			fprintf(stderr, "troff: Too many (%d) string/macro names.\n", NM);
  			edone(04);
  #endif REPORTERRS

--- 193,198 -----
  			app = 0;
  			if (macerr++ > 1)
  				done2(02);
  			fprintf(stderr, "troff: Too many (%d) string/macro names.\n", NM);
  			edone(04);
  			return(offset = 0);
***************
*** 254,260
  #else !REPORTERRS
  			fprintf(stderr, "troff: Too many (%d) string/macro names.\n", NM);
  			edone(04);
- #endif REPORTERRS
  			return(offset = 0);
  		}
  		contab[i].x.mx = (unsigned) nextb;

--- 195,200 -----
  				done2(02);
  			fprintf(stderr, "troff: Too many (%d) string/macro names.\n", NM);
  			edone(04);
  			return(offset = 0);
  		}
  		contab[i].x.mx = (unsigned) nextb;
***************
*** 282,314
  }
  
  
- #ifdef COMMENT
- /* copyb() simulates a finite state machine that recognises
-  *	<start-of-line> .jk
-  * where j and k are the 1 or 2 letters of the macro name that getrq() finds.
-  *
-  * start---><state==1>--"."--><state==2>--"j"--<state==3>--"k"-->ACCEPT
-  * "\n" puts us back to <state==1>
-  * anything else puts us back to start (which is equivalent)
-  *
-  * The idea is to copy stuff into a macro (i.e. into the tmp file) until
-  * ACCEPT, when we return.  This is used by .de, .am and .ig.  .ig should
-  * really not use this, as auto-incremented number registers will be
-  * affected.  Or there could be another flag to getch().  Ugh.
-  *
-  * It would be nice if we could provide a warning if EOF was found, as a
-  * very common cause of no output is to have unmatched .de xx and .., but
-  * this is difficult.  We can warn about "open" diversions in done(), I
-  * suppose.  The problem is that getach() calls nextfile() on EOF, which
-  * in turn calls done() if there aren't any more; but done() doesn't know
-  * that we're still in coyb, and deducing it from the state of the global
-  * variables is too much effort.  The reason I'm content to leave it at that
-  * point is that even if done() *did* know about copyb, it wouldn't be able
-  * to relate that to the user-level .de or .am or whatever very easily.
-  *
-  * -- req
-  */
- #endif COMMENT
  copyb()
  {
  	register i, j, k;

--- 222,227 -----
  }
  
  
  copyb()
  {
  	register i, j, k;
***************
*** 375,384
  
  	copyf++;
  	if (skip())
- #ifdef REPORTERRS
- 	{
- 		/* would be nice if we knew the string name! */
- 		errmsg(EWARN, ".ds: usage is .ds xx \"string; no string here!");
  		goto c0;
  	}
  #else !REPORTERRS

--- 288,293 -----
  
  	copyf++;
  	if (skip())
  		goto c0;
  	if (cbits(i = getch()) != '"')
  		wbf(i);
***************
*** 380,389
  		/* would be nice if we knew the string name! */
  		errmsg(EWARN, ".ds: usage is .ds xx \"string; no string here!");
  		goto c0;
- 	}
- #else !REPORTERRS
- 		goto c0;
- #endif REPORTERRS
  	if (cbits(i = getch()) != '"')
  		wbf(i);
  	while (cbits(i = getch()) != '\n')

--- 289,294 -----
  	copyf++;
  	if (skip())
  		goto c0;
  	if (cbits(i = getch()) != '"')
  		wbf(i);
  	while (cbits(i = getch()) != '\n')
***************
*** 435,443
  }
  
  
- #ifdef COMMENT
- /* wbf() --- Write Buffer File (or Block File)		-- req  */
- #endif COMMENT
  wbf(i)
  tchar i;
  {

--- 340,345 -----
  }
  
  
  wbf(i)
  tchar i;
  {
***************
*** 469,477
  }
  
  
- #ifdef COMMENT
- /* wbfl() --- Write BLock to File -- req  */
- #endif COMMENT
  wbfl()
  {
  	if (woff == 0)

--- 371,376 -----
  }
  
  
  wbfl()
  {
  	if (woff == 0)
***************
*** 486,494
  }
  
  
- #ifdef COMMENT
- /* rbf() -- read block from file -- req */
- #endif COMMENT
  tchar rbf()
  {
  	tchar i;

--- 385,390 -----
  }
  
  
  tchar rbf()
  {
  	tchar i;
***************
*** 520,528
  		p = ip;
  		if (!((j = ++p) & (BLK - 1))) {
  			if ((i = blist[blisti(--p)]) == -1) {
- #ifdef REPORTERRS
- 				errmsg(done2,-5, "Internal error in rbf()");
- #else !REPORTERRS
  				fprintf(stderr, "troff: Bad storage allocation.\n");
  				done2(-5);
  #endif REPORTERRS

--- 416,421 -----
  		p = ip;
  		if (!((j = ++p) & (BLK - 1))) {
  			if ((i = blist[blisti(--p)]) == -1) {
  				fprintf(stderr, "troff: Bad storage allocation.\n");
  				done2(-5);
  			}
***************
*** 525,531
  #else !REPORTERRS
  				fprintf(stderr, "troff: Bad storage allocation.\n");
  				done2(-5);
- #endif REPORTERRS
  			}
  			j = ((filep)i);
  		}

--- 418,423 -----
  			if ((i = blist[blisti(--p)]) == -1) {
  				fprintf(stderr, "troff: Bad storage allocation.\n");
  				done2(-5);
  			}
  			j = ((filep)i);
  		}
***************
*** 540,550
  {
  	register filep i;
  
- #ifdef COMMENT
- 	/* BLK is a power of 2, so p & ~(BLK - 1) is (on a 2's compl. m/c)
- 	 * the bits higher than BLK
- 	 * -- req */
- #endif COMMENT
  	if ((i = p & ~(BLK - 1)) != roff) {
  		roff = i;
  #ifndef INCORE

--- 432,437 -----
  {
  	register filep i;
  
  	if ((i = p & ~(BLK - 1)) != roff) {
  		roff = i;
  #ifndef INCORE
***************
*** 567,575
  
  	if (!((j = ++p) & (BLK - 1))) {
  		if ((i = blist[blisti(--p)]) == -1) {
- #ifdef REPORTERRS
- 			errmsg(done2, -5, "Internal storage error in incoff()");
- #else !REPORTERRS
  			fprintf(stderr, "troff: Bad storage allocation.\n");
  			done2(-5);
  #endif REPORTERRS

--- 454,459 -----
  
  	if (!((j = ++p) & (BLK - 1))) {
  		if ((i = blist[blisti(--p)]) == -1) {
  			fprintf(stderr, "troff: Bad storage allocation.\n");
  			done2(-5);
  		}
***************
*** 572,578
  #else !REPORTERRS
  			fprintf(stderr, "troff: Bad storage allocation.\n");
  			done2(-5);
- #endif REPORTERRS
  		}
  		j = (filep) i;
  	}

--- 456,461 -----
  		if ((i = blist[blisti(--p)]) == -1) {
  			fprintf(stderr, "troff: Bad storage allocation.\n");
  			done2(-5);
  		}
  		j = (filep) i;
  	}
***************
*** 639,644
  int	x;
  {
  	register char	*i;
  	char	*sbrk();
  
  #ifdef ALIGNFIXES

--- 522,528 -----
  int	x;
  {
  	register char	*i;
+ 	register j;
  	char	*sbrk();
  
  	if (j = x % sizeof(int))	/*allocate only whole words for 3B*/
***************
*** 641,671
  	register char	*i;
  	char	*sbrk();
  
! #ifdef ALIGNFIXES
! 	/* have to align x to a suitable boundary for storing an int.
! 	 * Or a tchar?  Or a struct?  We'll use the larger of int and tchar
! 	 * to be on the safe side...  Really ought to go through and check
! 	 * every use, but...
! 	 * - req
! 	 */
! 	unsigned int xsize = sizeof(int);
! 
! 	if (xsize < sizeof(tchar))
! 		xsize = sizeof(tchar);
! 	if (x % (int) xsize)
! 		x += (int) (xsize - 1);
! #else !ALIGNFIXES
! 	if (x % 2 == 1) 
! 		x++;
! #endif ALIGNFIXES
! #ifdef COMMENT
! 	/* } for brace-match tool */
! 
! 	/* note that MAXPTR is (char *) -1, so it's really an error
! 	 * rather than a cvalue to check against.
! 	 * - req
! 	 */
! #endif COMMENT
  	if ((i = sbrk(x)) == MAXPTR) {
  #ifdef REPORTERRS
  		errmsg(edone, 0100, "Out of memory at %d (recursive macro problem?)", i);

--- 525,532 -----
  	register j;
  	char	*sbrk();
  
! 	if (j = x % sizeof(int))	/*allocate only whole words for 3B*/
! 		x += sizeof(int) - j;
  	if ((i = sbrk(x)) == MAXPTR) {
  		fprintf(stderr, "troff: Core limit reached.\n");
  		edone(0100);
***************
*** 667,676
  	 */
  #endif COMMENT
  	if ((i = sbrk(x)) == MAXPTR) {
- #ifdef REPORTERRS
- 		errmsg(edone, 0100, "Out of memory at %d (recursive macro problem?)", i);
- 		edone(0100);
- #else !REPORTERRS
  		fprintf(stderr, "troff: Core limit reached.\n");
  		edone(0100);
  #endif REPORTERRS

--- 528,533 -----
  	if (j = x % sizeof(int))	/*allocate only whole words for 3B*/
  		x += sizeof(int) - j;
  	if ((i = sbrk(x)) == MAXPTR) {
  		fprintf(stderr, "troff: Core limit reached.\n");
  		edone(0100);
  	} else {
***************
*** 673,679
  #else !REPORTERRS
  		fprintf(stderr, "troff: Core limit reached.\n");
  		edone(0100);
- #endif REPORTERRS
  	} else {
  		enda = i + x;
  	}

--- 530,535 -----
  	if ((i = sbrk(x)) == MAXPTR) {
  		fprintf(stderr, "troff: Core limit reached.\n");
  		edone(0100);
  	} else {
  		if ((unsigned)i % sizeof(int)){	/*check alignment for 3B*/
  			fprintf(stderr, "troff: alignment problem.\n");
***************
*** 675,680
  		edone(0100);
  #endif REPORTERRS
  	} else {
  		enda = i + x;
  	}
  	return(i);

--- 531,540 -----
  		fprintf(stderr, "troff: Core limit reached.\n");
  		edone(0100);
  	} else {
+ 		if ((unsigned)i % sizeof(int)){	/*check alignment for 3B*/
+ 			fprintf(stderr, "troff: alignment problem.\n");
+ 			edone(0100);
+ 		}
  		enda = i + x;
  	}
  	return(i);
***************
*** 681,689
  }
  
  
- #ifdef COMMENT
- /* Long name stuff would go here, of course */
- #endif COMMENT
  getsn()
  {
  	register i;

--- 541,546 -----
  }
  
  
  getsn()
  {
  	register i;
***************
*** 701,718
  {
  	register i;
  
- #ifdef COMMENT
- 	/* lgf++ --- don't expand ligatures in strings.  Bug: if input that
- 	 * would normally be turned into a ligature overlapps a string
- 	 * (eg:
- 	 * .ds a "i
- 	 * f\*a  ), the ligature isn't expanded.  I don't know why.
- 	 *
- 	 * Is it an error to say \*x if x doesn't exist?  I guess so,
- 	 * but this would make lots of errors with -ms.  I'll think about it.
- 	 * -- req
- 	 */
- #endif COMMENT
  	lgf++;
  	if (((i = getsn()) == 0) ||  ((i = findmn(i)) == -1) ||  !(contab[i].rq & MMASK)) {
  		lgf--;

--- 558,563 -----
  {
  	register i;
  
  	lgf++;
  	if (((i = getsn()) == 0) ||  ((i = findmn(i)) == -1) ||  !(contab[i].rq & MMASK)) {
  		lgf--;
***************
*** 716,724
  	lgf++;
  	if (((i = getsn()) == 0) ||  ((i = findmn(i)) == -1) ||  !(contab[i].rq & MMASK)) {
  		lgf--;
- #ifdef COMMENT
- 		/* an error message should prbably go here --- req */
- #endif COMMENT
  		return(0);
  	} else {
  		SPACETEST(nxf, sizeof(struct s));

--- 561,566 -----
  	lgf++;
  	if (((i = getsn()) == 0) ||  ((i = findmn(i)) == -1) ||  !(contab[i].rq & MMASK)) {
  		lgf--;
  		return(0);
  	} else {
  		SPACETEST(nxf, sizeof(struct s));
***************
*** 731,739
  
  
  
- #ifdef COMMENT
- /* collect macro arguments */
- #endif COMMENT
  collect()
  {
  	register j;

--- 573,578 -----
  
  
  
  collect()
  {
  	register j;
***************
*** 809,819
  				fprintf(stderr, "strp=0x%x, lim = 0x%x\n",
  					strp, lim);
  #endif 0
- #ifdef REPORTERRS
- 				copyf--;
- 				errmsg(edone, 04,
- 			"Macro arguments use more than %d characters", CPERMAC);
- #else !REPORTERRS
  				fprintf(stderr,
  					"troff: Macro argument too long.\n");
  				copyf--;

--- 648,653 -----
  				fprintf(stderr, "strp=0x%x, lim = 0x%x\n",
  					strp, lim);
  #endif 0
  				fprintf(stderr,
  					"troff: Macro argument too long.\n");
  				copyf--;
***************
*** 818,824
  					"troff: Macro argument too long.\n");
  				copyf--;
  				edone(004);
- #endif REPORTERRS
  			}
  			SPACETEST(strp, 3 * sizeof(tchar));
  		}

--- 652,657 -----
  					"troff: Macro argument too long.\n");
  				copyf--;
  				edone(004);
  			}
  			SPACETEST(strp, 3 * sizeof(tchar));
  		}
***************
*** 824,836
  		}
  		*strp++ = 0;
  	}
- #ifdef COMMENT
- 	/* should report if > APERMAC args... */
- 	/* Also, the cast to (tchar **) may be wrong;  4.2bsd troff has int **
- 	 * instead, but uses nxf rather than savnxf.  Who cares?
- 	 * - req
- 	 */
- #endif COMMENT
  	nxf = savnxf;
  	nxf->nargs = argpp - (tchar **)(savnxf + 1);
  	argtop = strp;

--- 657,662 -----
  		}
  		*strp++ = 0;
  	}
  	nxf = savnxf;
  	nxf->nargs = argpp - (tchar **)(savnxf + 1);
  	argtop = strp;
***************
*** 866,874
  
  	lgf++;
  	if (skip() || ((i = getrq()) == 0)) {
- #ifdef COMMENT
- 		/* .di */
- #endif COMMENT
  		if (dip != d)
  			wbt((tchar)0);
  		if (dilev > 0) {

--- 692,697 -----
  
  	lgf++;
  	if (skip() || ((i = getrq()) == 0)) {
  		if (dip != d)
  			wbt((tchar)0);
  		if (dilev > 0) {
***************
*** 877,887
  			dip = &d[--dilev];
  			offset = dip->op;
  		}
- #ifdef REPORTERRS
- 		else {
- 			errmsg(EWARN, ".di without arguments outside a diversion");
- 		}
- #endif REPORTERRS
  		goto rtn;
  	}
  	if (++dilev == NDI) {

--- 700,705 -----
  			dip = &d[--dilev];
  			offset = dip->op;
  		}
  		goto rtn;
  	}
  	if (++dilev == NDI) {
***************
*** 886,895
  	}
  	if (++dilev == NDI) {
  		--dilev;
- #ifdef REPORTERRS
- 		errmsg(edone,02,"Diversions nested deeper than %d levels", NDI);
- 		edone(02);
- #else !REPORTERRS
  		fprintf(stderr, "troff: Diversions nested too deep.\n");
  		edone(02);
  #endif REPORTERRS

--- 704,709 -----
  	}
  	if (++dilev == NDI) {
  		--dilev;
  		fprintf(stderr, "troff: Diversions nested too deep.\n");
  		edone(02);
  	}
***************
*** 892,898
  #else !REPORTERRS
  		fprintf(stderr, "troff: Diversions nested too deep.\n");
  		edone(02);
- #endif REPORTERRS
  	}
  	if (dip != d)
  		wbt((tchar)0);

--- 706,711 -----
  		--dilev;
  		fprintf(stderr, "troff: Diversions nested too deep.\n");
  		edone(02);
  	}
  	if (dip != d)
  		wbt((tchar)0);
***************
*** 917,925
  	skip();
  	dip->ditrap = vnumb((int *)0);
  	if (nonumb)
- #ifdef REPORTERRS
- 	{
- 		errmsg(EWARN, ".dt must have a numeric first argument");
  		return;
  	}
  #else !REPORTERRS

--- 730,735 -----
  	skip();
  	dip->ditrap = vnumb((int *)0);
  	if (nonumb)
  		return;
  	skip();
  	dip->dimac = getrq();
***************
*** 921,930
  	{
  		errmsg(EWARN, ".dt must have a numeric first argument");
  		return;
- 	}
- #else !REPORTERRS
- 		return;
- #endif REPORTERRS
  	skip();
  #ifdef REPORTERRS
  	if ((dip->dimac = getrq()) == 0) {

--- 731,736 -----
  	dip->ditrap = vnumb((int *)0);
  	if (nonumb)
  		return;
  	skip();
  	dip->dimac = getrq();
  }
***************
*** 926,936
  		return;
  #endif REPORTERRS
  	skip();
- #ifdef REPORTERRS
- 	if ((dip->dimac = getrq()) == 0) {
- 		errmsg(EWARN, ".dt needs to have a macro-name as a third argument");
- 	}
- #else !REPORTERRS
  	dip->dimac = getrq();
  #endif REPORTERRS
  }

--- 732,737 -----
  	if (nonumb)
  		return;
  	skip();
  	dip->dimac = getrq();
  }
  
***************
*** 932,938
  	}
  #else !REPORTERRS
  	dip->dimac = getrq();
- #endif REPORTERRS
  }
  
  

--- 733,738 -----
  		return;
  	skip();
  	dip->dimac = getrq();
  }
  
  
***************
*** 951,959
  	if ((offset = begin = alloc()) == 0)
  		return;
  	if (ismot(delim = getch())) {
- #ifdef REPORTERRS
- 		errmsg(EWARN, ".tl: first delimiter unsuitable; using \"'\"");
- #endif REPORTERRS
  		ch = delim;
  		delim = '\'';
  	} else 

--- 751,756 -----
  	if ((offset = begin = alloc()) == 0)
  		return;
  	if (ismot(delim = getch())) {
  		ch = delim;
  		delim = '\'';
  	} else 
***************
*** 959,974
  	} else 
  		delim = cbits(delim);
  	if (!nlflg)
- #ifdef REPORTERRS
- 	{
- #endif REPORTERRS
- #ifdef COMMENT
- 		/* would like to detect .tl with no trailing delim here.
- 		 * Maybe .tl 'left'
- 		 * should be an error, too (no 'center'right')
- 		 * - req
- 		 */
- #endif COMMENT
  		while (cbits(i = getch()) != '\n') {
  			if (cbits(i) == cbits(delim))
  				i = IMP;

--- 756,761 -----
  	} else 
  		delim = cbits(delim);
  	if (!nlflg)
  		while (cbits(i = getch()) != '\n') {
  			if (cbits(i) == cbits(delim))
  				i = IMP;
***************
*** 974,984
  				i = IMP;
  			wbf(i);
  		}
- #ifdef REPORTERRS
- 	} else {
- 		errmsg(EWARN, ".tl with no arguments ignored");
- 	}
- #endif REPORTERRS
  	wbf((tchar)IMP);
  	wbf((tchar)IMP);
  	wbt((tchar)0);

--- 761,766 -----
  				i = IMP;
  			wbf(i);
  		}
  	wbf((tchar)IMP);
  	wbf((tchar)IMP);
  	wbt((tchar)0);
***************
*** 1011,1020
  }
  
  
- #ifdef COMMENT
- /* if no argument to .pc, set to IMP (i.e. turn the mechanism off
-  * -- req */
- #endif COMMENT
  casepc()
  {
  	pagech = chget(IMP);

--- 793,798 -----
  }
  
  
  casepc()
  {
  	pagech = chget(IMP);
diff -rbc titroff/n4.c /distribution/dwb/text/troff.d/n4.c
*** titroff/n4.c	Wed Nov 19 21:24:19 1986
--- /distribution/dwb/text/troff.d/n4.c	Fri Sep  9 18:45:36 1983
***************
*** 1,3
  #include	<ctype.h>
  #include "tdef.h"
  extern

--- 1,4 -----
+ /*      @(#)n4.c	1.1     */
  #include	<ctype.h>
  #include "tdef.h"
  extern
***************
*** 18,28
  #include <sgtty.h>
  #include "ext.h"
  
- #ifndef NROFF
- #ifdef PAPERSIZEREG
- extern int paperwidth, paperlength;
- #endif PAPERSIZEREG
- #endif !NROFF
  int	regcnt = NNAMES;
  int	falsef	= 0;	/* on if inside false branch of if */
  

--- 19,24 -----
  #include <sgtty.h>
  #include "ext.h"
  
  int	regcnt = NNAMES;
  int	falsef	= 0;	/* on if inside false branch of if */
  
***************
*** 139,164
  		case 'b':
  			i = bdtab[font];
  			break;
! #ifndef NROFF
! #ifdef PAPERSIZEREG
! 		case 'W':	/* .W -- paperwidth */
! 			i = paperwidth;
! #ifdef LOCALWARN
! 			lwarn(".W number register non-standard\n");
! #endif LOCALWARN
! 			break;
! 		case 'M':	/* .M -- paperlength */
! 			i = paperlength;
! #ifdef LOCALWARN
! 			lwarn(".M number register non-standard\n");
! #endif LOCALWARN
! 			break;
! #endif PAPERSIZEREG
! #endif !NROFF
! #ifdef BLANKSMACRO
! 		case 'B':	/* .B number of leading blanks on this line */
! 			{
! 				extern int nrspaces; /* from local.c */
  
  				i = nrspaces;
  #ifdef LOCALWARN

--- 135,144 -----
  		case 'b': 
  			i = bdtab[font];
  			break;
! 		case 'F':
! 			for (i=0; cbuf[i] = cfname[ifi][i]; i++) ;
! 			cp = cbuf;
! 			return;
  
  		default:
  			goto s0;
***************
*** 160,192
  			{
  				extern int nrspaces; /* from local.c */
  
- 				i = nrspaces;
- #ifdef LOCALWARN
- 				lwarn(".B number register non-standard\n");
- #endif LOCALWARN
- 				break;
- 			}
- 
- 		case 'N':	/* nlflag */
- 			{
- 				extern int nrlines;
- 
- 				i = nrlines;
- #ifdef LOCALWARN
- 				lwarn(".B number register non-standard\n");
- #endif LOCALWARN
- 				break;
- 			}
- #endif BLANKSMACRO
- 
- #ifdef EVREG
- 		case 'e':	/* .e -- environment number */
- 			i = ev;
- #ifdef LOCALWARN
- 			lwarn(".e number register non-standard\n");
- #endif LOCALWARN
- 			break;
- #endif EVREG
  		default:
  #ifdef REPORTERRS
  			errmsg(EWARN, "\\n: No such read-only number register as .%c",

--- 140,145 -----
  			cp = cbuf;
  			return;
  
  		default:
  			goto s0;
  		}
***************
*** 188,197
  			break;
  #endif EVREG
  		default:
- #ifdef REPORTERRS
- 			errmsg(EWARN, "\\n: No such read-only number register as .%c",
- 								i >> BYTE);
- #endif REPORTERRS
  			goto s0;
  		}
  	else {

--- 141,146 -----
  			return;
  
  		default:
  			goto s0;
  		}
  	else {
***************
*** 196,207
  		}
  	else {
  s0:
- #ifdef COMMENT
- 		/* no such number register could be an error, but it
- 		 * happens too often to be worth moaning at.
- 		 * -- req
- 		 */
- #endif COMMENT
  		if ((j = findr(i)) == -1)
  			i = 0;
  		else {

--- 145,150 -----
  		}
  	else {
  s0:
  		if ((j = findr(i)) == -1)
  			i = 0;
  		else {
***************
*** 249,257
  		}
  	}
  	if (p == &r[NN]) {
- #ifdef REPORTERRS
- 		errmsg(done2, 04, "more than %d number registers", NN);
- #else !REPORTERRS
  		fprintf(stderr, "troff: too many number registers (%d).\n", NN);
  		done2(04);
  #endif REPORTERRS

--- 192,197 -----
  		}
  	}
  	if (p == &r[NN]) {
  		fprintf(stderr, "troff: too many number registers (%d).\n", NN);
  		done2(04); 
  	}
***************
*** 254,260
  #else !REPORTERRS
  		fprintf(stderr, "troff: too many number registers (%d).\n", NN);
  		done2(04);
- #endif REPORTERRS
  	}
  	return(p - r);
  }

--- 194,199 -----
  	if (p == &r[NN]) {
  		fprintf(stderr, "troff: too many number registers (%d).\n", NN);
  		done2(04); 
  	}
  	return(p - r);
  }
***************
*** 389,397
  }
  
  
- #ifdef REPORTERRS
- static int bracklevel = 0;	/* depth of ( ... ) in expressions */
- #endif REPORTERRS
  long	atoi0()
  {
  	register c, k, cnt;

--- 328,333 -----
  }
  
  
  long	atoi0()
  {
  	register c, k, cnt;
***************
*** 412,425
  		ch = ii;
  		if (cnt)
  			break;
- #ifdef COMMENT
- 		/* else fall through... */
- 
- 		/* Could warn here about trailing garbage, but things like
- 		 * .ta 3iR or \l'3iX' would go horribly wrong then!
- 		 * - req
- 		 */
- #endif COMMENT
  	case '+':
  		i = ckph();
  #ifdef REPORTERRS

--- 348,353 -----
  		ch = ii;
  		if (cnt)
  			break;
  	case '+':
  		i = ckph();
  		if (nonumb)
***************
*** 422,448
  #endif COMMENT
  	case '+':
  		i = ckph();
- #ifdef REPORTERRS
- 		if (nonumb) {
- 			if (cnt) {
- 				if (cbits(ch) == '\n') {
- 					errmsg(EWARN, "newline unexpected after +");
- 				} else {
- 					errmsg(EWARN, "Unexpected \"%s\" found after +", tchartos(ch));
- 				}
- 			} else if (cbits(ch) != '\n') {
- 				/* caseif() turns off this message! */
- 				if (reporterrs & LERR_BADEXPSTART) {
- 					if (!(ismot(ch) && !isvmot(ch)) &&
- 						cbits(ch) != RIGHT &&
- 						cbits(ch) != ' ') {
- 							errmsg(EWARN, "\"%s\" can't start an expression", tchartos(ch));
- 					}
- 				}
- 			}
- 			break;
- 		} 
- #else !REPORTERRS
  		if (nonumb)
  			break;
  #endif REPORTERRS

--- 350,355 -----
  			break;
  	case '+':
  		i = ckph();
  		if (nonumb)
  			break;
  		acc += i;
***************
*** 445,451
  #else !REPORTERRS
  		if (nonumb)
  			break;
- #endif REPORTERRS
  		acc += i;
  		goto a0;
  	case '-':

--- 352,357 -----
  		i = ckph();
  		if (nonumb)
  			break;
  		acc += i;
  		goto a0;
  	case '-':
***************
*** 451,459
  	case '-':
  		i = ckph();
  		if (nonumb)
- #ifdef REPORTERRS
- 		{
- 			errmsg(EWARN, "found \"%s\" after \"-\" in expression!", tchartos(ch));
  			break;
  		}
  #else !REPORTERRS

--- 357,362 -----
  	case '-':
  		i = ckph();
  		if (nonumb)
  			break;
  		acc -= i;
  		goto a0;
***************
*** 455,464
  		{
  			errmsg(EWARN, "found \"%s\" after \"-\" in expression!", tchartos(ch));
  			break;
- 		}
- #else !REPORTERRS
- 			break;
- #endif REPORTERRS
  		acc -= i;
  		goto a0;
  	case '*':

--- 358,363 -----
  		i = ckph();
  		if (nonumb)
  			break;
  		acc -= i;
  		goto a0;
  	case '*':
***************
*** 464,472
  	case '*':
  		i = ckph();
  		if (nonumb)
- #ifdef REPORTERRS
- 		{
- 			errmsg(EWARN, "found \"%s\" after * in expression!", tchartos(ch));
  			break;
  		}
  #else !REPORTERRS

--- 363,368 -----
  	case '*':
  		i = ckph();
  		if (nonumb)
  			break;
  		acc *= i;
  		goto a0;
***************
*** 468,477
  		{
  			errmsg(EWARN, "found \"%s\" after * in expression!", tchartos(ch));
  			break;
- 		}
- #else !REPORTERRS
- 			break;
- #endif REPORTERRS
  		acc *= i;
  		goto a0;
  	case '/':

--- 364,369 -----
  		i = ckph();
  		if (nonumb)
  			break;
  		acc *= i;
  		goto a0;
  	case '/':
***************
*** 477,485
  	case '/':
  		i = ckph();
  		if (nonumb)
- #ifdef REPORTERRS
- 		{
- 			errmsg(EWARN, "found \"%s\" after / in expression!", tchartos(ch));
  			break;
  		}
  #else !REPORTERRS

--- 369,374 -----
  	case '/':
  		i = ckph();
  		if (nonumb)
  			break;
  		if (i == 0) {
  			flusho();
***************
*** 481,490
  		{
  			errmsg(EWARN, "found \"%s\" after / in expression!", tchartos(ch));
  			break;
- 		}
- #else !REPORTERRS
- 			break;
- #endif REPORTERRS
  		if (i == 0) {
  			flusho();
  #ifdef REPORTERRS

--- 370,375 -----
  		i = ckph();
  		if (nonumb)
  			break;
  		if (i == 0) {
  			flusho();
  			fprintf(stderr, "troff: divide by zero.\n");
***************
*** 487,495
  #endif REPORTERRS
  		if (i == 0) {
  			flusho();
- #ifdef REPORTERRS
- 			errmsg(EWARN, "divide by zero in expression (result is 0)");
- #else !REPORTERRS
  			fprintf(stderr, "troff: divide by zero.\n");
  #endif REPORTERRS
  			acc = 0;

--- 372,377 -----
  			break;
  		if (i == 0) {
  			flusho();
  			fprintf(stderr, "troff: divide by zero.\n");
  			acc = 0;
  		} else 
***************
*** 491,497
  			errmsg(EWARN, "divide by zero in expression (result is 0)");
  #else !REPORTERRS
  			fprintf(stderr, "troff: divide by zero.\n");
- #endif REPORTERRS
  			acc = 0;
  		} else
  			acc /= i;

--- 373,378 -----
  		if (i == 0) {
  			flusho();
  			fprintf(stderr, "troff: divide by zero.\n");
  			acc = 0;
  		} else 
  			acc /= i;
***************
*** 499,507
  	case '%':
  		i = ckph();
  		if (nonumb)
- #ifdef REPORTERRS
- 		{
- 			errmsg(EWARN, "found \"%s\" after % (mod) in expression!", tchartos(ch));
  			break;
  		}
  #else !REPORTERRS

--- 380,385 -----
  	case '%':
  		i = ckph();
  		if (nonumb)
  			break;
  		acc %= i;
  		goto a0;
***************
*** 503,512
  		{
  			errmsg(EWARN, "found \"%s\" after % (mod) in expression!", tchartos(ch));
  			break;
- 		}
- #else !REPORTERRS
- 			break;
- #endif REPORTERRS
  		acc %= i;
  		goto a0;
  	case '&':	/*and*/

--- 381,386 -----
  		i = ckph();
  		if (nonumb)
  			break;
  		acc %= i;
  		goto a0;
  	case '&':	/*and*/
***************
*** 512,520
  	case '&':	/*and*/
  		i = ckph();
  		if (nonumb)
- #ifdef REPORTERRS
- 		{
- 			errmsg(EWARN, "found \"%s\" after & in expression!", tchartos(ch));
  			break;
  		}
  #else !REPORTERRS

--- 386,391 -----
  	case '&':	/*and*/
  		i = ckph();
  		if (nonumb)
  			break;
  		if ((acc > 0) && (i > 0))
  			acc = 1; 
***************
*** 516,525
  		{
  			errmsg(EWARN, "found \"%s\" after & in expression!", tchartos(ch));
  			break;
- 		}
- #else !REPORTERRS
- 			break;
- #endif REPORTERRS
  		if ((acc > 0) && (i > 0))
  			acc = 1;
  		else

--- 387,392 -----
  		i = ckph();
  		if (nonumb)
  			break;
  		if ((acc > 0) && (i > 0))
  			acc = 1; 
  		else 
***************
*** 528,536
  	case ':':	/*or*/
  		i = ckph();
  		if (nonumb)
- #ifdef REPORTERRS
- 		{
- 			errmsg(EWARN, "found \"%s\" after : (logical or) in expression!", tchartos(ch));
  			break;
  		}
  #else !REPORTERRS

--- 395,400 -----
  	case ':':	/*or*/
  		i = ckph();
  		if (nonumb)
  			break;
  		if ((acc > 0) || (i > 0))
  			acc = 1; 
***************
*** 532,541
  		{
  			errmsg(EWARN, "found \"%s\" after : (logical or) in expression!", tchartos(ch));
  			break;
- 		}
- #else !REPORTERRS
- 			break;
- #endif REPORTERRS
  		if ((acc > 0) || (i > 0))
  			acc = 1;
  		else

--- 396,401 -----
  		i = ckph();
  		if (nonumb)
  			break;
  		if ((acc > 0) || (i > 0))
  			acc = 1; 
  		else 
***************
*** 547,555
  		i = ckph();
  		if (nonumb) {
  			acc = 0;
- #ifdef REPORTERRS
- 			errmsg(EWARN, "found \"%s\" after = in expression!", tchartos(ch));
- #endif REPORTERRS
  			break;
  		}
  		if (i == acc)

--- 407,412 -----
  		i = ckph();
  		if (nonumb) {
  			acc = 0; 
  			break;
  		}
  		if (i == acc)
***************
*** 566,574
  		i = ckph();
  		if (nonumb) {
  			acc = 0;
- #ifdef REPORTERRS
- 			errmsg(EWARN, "found \"%s\" after > in expression!", tchartos(ch));
- #endif REPORTERRS
  			break;
  		}
  		if (acc > (i - k))

--- 423,428 -----
  		i = ckph();
  		if (nonumb) {
  			acc = 0; 
  			break;
  		}
  		if (acc > (i - k))
***************
*** 585,593
  		i = ckph();
  		if (nonumb) {
  			acc = 0;
- #ifdef REPORTERRS
- 			errmsg(EWARN, "found \"%s\" after < in expression!", tchartos(ch));
- #endif REPORTERRS
  			break;
  		}
  		if (acc < (i + k))

--- 439,444 -----
  		i = ckph();
  		if (nonumb) {
  			acc = 0; 
  			break;
  		}
  		if (acc < (i + k))
***************
*** 596,608
  			acc = 0;
  		goto a0;
  	case ')':
- #ifdef REPORTERRS
- 		if (bracklevel) {
- 			bracklevel--;
- 		} else {
- 			errmsg(EWARN, "too many ) in expression!");
- 		}
- #endif REPORTERRS
  		break;
  	case '(':
  #ifdef REPORTERRS

--- 447,452 -----
  			acc = 0;
  		goto a0;
  	case ')': 
  		break;
  	case '(':
  		acc = atoi0();
***************
*** 605,613
  #endif REPORTERRS
  		break;
  	case '(':
- #ifdef REPORTERRS
- 		bracklevel++;
- #endif REPORTERRS
  		acc = atoi0();
  		goto a0;
  	}

--- 449,454 -----
  	case ')': 
  		break;
  	case '(':
  		acc = atoi0();
  		goto a0;
  	}
***************
*** 623,631
  	extern long	atoi1();
  
  	if (cbits(i = getch()) == '(')
- #ifdef REPORTERRS
- 	{
- 		bracklevel++;
  		j = atoi0();
  	}
  #else !REPORTERRS

--- 464,469 -----
  	extern long	atoi1();
  
  	if (cbits(i = getch()) == '(')
  		j = atoi0();
  	else {
  		ch = i;
***************
*** 627,636
  	{
  		bracklevel++;
  		j = atoi0();
- 	}
- #else !REPORTERRS
- 		j = atoi0();
- #endif REPORTERRS
  	else {
  		ch = i;
  		j = atoi1();

--- 465,470 -----
  
  	if (cbits(i = getch()) == '(')
  		j = atoi0();
  	else {
  		ch = i;
  		j = atoi1();
***************
*** 770,778
  casenr()
  {
  	register i, j;
- #ifdef REPORTERRS
- 	tchar name;
- #endif REPORTERRS
  
  	lgf++;
  #ifdef REPORTERRS

--- 604,609 -----
  casenr()
  {
  	register i, j;
  
  	lgf++;
  	skip();
***************
*** 775,799
  #endif REPORTERRS
  
  	lgf++;
- #ifdef REPORTERRS
- 	if (skip()) {
- 		errmsg(EWARN, ".nr request with no arguments ignored");
- 		goto rtn;
- 	}
- 	if ((i = findr(name = getrq())) == -1)
- 		goto rtn;
- 		/* findr() allocates a new register & warns if there are none,
- 		 * so no need to give an error here too.
- 		 *
- 		 * We save the name of the register for error messages
- 		 *
- 		 * -- req
- 		 */
- 	if (skip()) {
- 		errmsg(EWARN, ".nr %s: missing expression!", realname(name));
- 		goto rtn;
- 	}
- #else !REPORTERRS
  	skip();
  	if ((i = findr(getrq())) == -1)
  		goto rtn;

--- 606,611 -----
  	register i, j;
  
  	lgf++;
  	skip();
  	if ((i = findr(getrq())) == -1)
  		goto rtn;
***************
*** 798,807
  	if ((i = findr(getrq())) == -1)
  		goto rtn;
  	skip();
- #endif REPORTERRS
- #ifdef COMMENT
- 		/* should warn about read-only number registers here? */
- #endif COMMENT
  	j = inumb(&vlist[i]);
  #ifdef REPORTERRS
  	if (nonumb) {

--- 610,615 -----
  	if ((i = findr(getrq())) == -1)
  		goto rtn;
  	skip();
  	j = inumb(&vlist[i]);
  	if (nonumb)
  		goto rtn;
***************
*** 803,824
  		/* should warn about read-only number registers here? */
  #endif COMMENT
  	j = inumb(&vlist[i]);
- #ifdef REPORTERRS
- 	if (nonumb) {
- 		/* ch can be set to 0 & then have font & size info ORed in,
- 		 * so you can have NULLs in different fonts!!  This is why we
- 		 * test cbits(ch) rather than ch itself.  -- req
- 		 */
- 		if (cbits(ch) && cbits(ch) != '\n') {
- 			errmsg(EWARN,
- ".nr %s: extra characters ignored from \"%s\"", realname(name), tchartos(ch));
- 		} else {
- 			errmsg(EWARN, ".nr %s %d ignored (error in expression?)",
- 								realname(name), j);
- 		}
- 		goto rtn;
- 	}
- #else !REPORTERRS
  	if (nonumb)
  		goto rtn;
  #endif REPORTERRS

--- 611,616 -----
  		goto rtn;
  	skip();
  	j = inumb(&vlist[i]);
  	if (nonumb)
  		goto rtn;
  	vlist[i] = j;
***************
*** 821,827
  #else !REPORTERRS
  	if (nonumb)
  		goto rtn;
- #endif REPORTERRS
  	vlist[i] = j;
  #ifdef REPORTERRS
  	if (!skip()) {

--- 613,618 -----
  	j = inumb(&vlist[i]);
  	if (nonumb)
  		goto rtn;
  	vlist[i] = j;
  	skip();
  	j = atoi();
***************
*** 823,853
  		goto rtn;
  #endif REPORTERRS
  	vlist[i] = j;
- #ifdef REPORTERRS
- 	if (!skip()) {
- 		/* 3rd argument to .nr is auto-increment value (which may
- 		 * be -ve, of course)
- 		 */
- 		int savrpterrs = reporterrs;
- 		int n = j;
- 
- 		/* as arg is optional...  Otherwise a trailing TAB */
- 		/* produces error messages! */
- 		/* this might confuse people who use the reporterrs number
- 		 * register as an increment, I suppose!
- 		 */
- 		reporterrs &= (~LERR_BADEXPSTART);
- 
- 		j = atoi();
- 
- 		reporterrs = savrpterrs;
- 
- 		if (nonumb && cbits(ch) == '\n') {
- 				errmsg(EWARN,
- 					".nr %s %d: non-numeric increment ignored", realname(name), n);
- 		}
- 	}
- #else !REPORTERRS
  	skip();
  	j = atoi();
  #endif REPORTERRS

--- 614,619 -----
  	if (nonumb)
  		goto rtn;
  	vlist[i] = j;
  	skip();
  	j = atoi();
  	if (nonumb)
***************
*** 850,856
  #else !REPORTERRS
  	skip();
  	j = atoi();
! #endif REPORTERRS
  	inc[i] = j;
  rtn:
  	return;

--- 616,623 -----
  	vlist[i] = j;
  	skip();
  	j = atoi();
! 	if (nonumb)
! 		goto rtn;
  	inc[i] = j;
  rtn:
  	return;
***************
*** 863,880
  	tchar j;
  
  	lgf++;
- #ifdef REPORTERRS
- 	if (skip()) {
- 		errmsg(EWARN, ".af: called without arguments");
- 		return;
- 	} else if (!(i = getrq())) {
- 		errmsg(EWARN, ".af: need a register name as 2nd argument");
- 		return;
- 	} else if (skip()) {
- 		errmsg(EWARN, ".af: need 2 arguments (reg, format), found 1");
- 		return;
- 	}
- #else !REPORTERRS
  	if (skip() || !(i = getrq()) || skip())
  		return;
  #endif REPORTERRS

--- 630,635 -----
  	tchar j;
  
  	lgf++;
  	if (skip() || !(i = getrq()) || skip())
  		return;
  	k = 0;
***************
*** 877,883
  #else !REPORTERRS
  	if (skip() || !(i = getrq()) || skip())
  		return;
- #endif REPORTERRS
  	k = 0;
  	j = getch();
  	if (!isalpha(cbits(j))) {

--- 632,637 -----
  	lgf++;
  	if (skip() || !(i = getrq()) || skip())
  		return;
  	k = 0;
  	j = getch();
  	if (!isalpha(cbits(j))) {
***************
*** 888,899
  	if (!k)
  		k = j;
  	fmt[findr(i)] = k & BMASK;
- #ifdef COMMENT
- 	/* note that (1) findr could return -1 if i == 0, so we check it
- 	 * 	     (2) we allocate a new number register if necessary
- 	 * - req
- 	 */
- #endif COMMENT
  }
  
  setaf()	/* return format of number register */

--- 642,647 -----
  	if (!k)
  		k = j;
  	fmt[findr(i)] = k & BMASK;
  }
  
  setaf()	/* return format of number register */
***************
*** 970,981
  		neg++;
  		n = -n;
  	}
- #ifdef REPORTERRS
- 	if (m == 0) {
- 		errmsg(EWARN, "Internal Error: m == 0 in quant()");
- 		m = 1;	/* guess... */
- 	}
- #endif REPORTERRS
  	/* better as i = ((n + (m/2))/m)*m */
  	i = n / m;
  	if ((n - m * i) > (m / 2))

--- 718,723 -----
  		neg++;
  		n = -n;
  	}
  	/* better as i = ((n + (m/2))/m)*m */
  	i = n / m;
  	if ((n - m * i) > (m / 2))
***************
*** 985,987
  		i = -i;
  	return(i);
  }

--- 727,731 -----
  		i = -i;
  	return(i);
  }
+ 
+ 
diff -rbc titroff/n5.c /distribution/dwb/text/troff.d/n5.c
*** titroff/n5.c	Wed Nov 19 21:30:06 1986
--- /distribution/dwb/text/troff.d/n5.c	Fri Sep  9 18:45:51 1983
***************
*** 1,3
  #include "tdef.h"
  #include <sgtty.h>
  extern

--- 1,4 -----
+ /*      @(#)n5.c	1.1     */
  #include "tdef.h"
  #include <sgtty.h>
  extern
***************
*** 46,56
  	case '3': 
  	case '5':
  		admod = (i - '0') / 2;
- #ifdef REPORTERRS
- 		break;
- 	default:
- 		errmsg(EWARN, ".ad: Unknown adjust mode \"%s\"", tchartos(i));
- #endif REPORTERRS
  	}
  }
  

--- 47,52 -----
  	case '3': 
  	case '5':
  		admod = (i - '0') / 2;
  	}
  }
  
***************
*** 146,154
  	i = atoi();
  	noscale = 0;
  	if (nonumb)
- #ifdef REPORTERRS
- 	{
- 		errmsg(EWARN, ".hy: numeric argument expected assuming 1");
  		return;
  	}
  #else !REPORTERRS

--- 142,147 -----
  	i = atoi();
  	noscale = 0;
  	if (nonumb)
  		return;
  	hyf = max(i, 0);
  }
***************
*** 150,159
  	{
  		errmsg(EWARN, ".hy: numeric argument expected assuming 1");
  		return;
- 	}
- #else !REPORTERRS
- 		return;
- #endif REPORTERRS
  	hyf = max(i, 0);
  }
  

--- 143,148 -----
  	noscale = 0;
  	if (nonumb)
  		return;
  	hyf = max(i, 0);
  }
  
***************
*** 285,298
  
  	skip();
  	if ((i = vnumb(&pl)) == 0)
- #ifdef PAPERSIZEREG
- 	{
- 		extern int paperlength, paperwidth;
- 
- 		pl = paperlength; /* from DESC */
- 		/* this is swapped with paperwidth if the page gets rotated */
- 	}
- #else !PAPERSIZEREG
  		pl = 11 * INCH; /*11in*/
  #endif PAPERSIZEREG
  	else 

--- 274,279 -----
  
  	skip();
  	if ((i = vnumb(&pl)) == 0)
  		pl = 11 * INCH; /*11in*/
  	else 
  		pl = i;
***************
*** 294,300
  	}
  #else !PAPERSIZEREG
  		pl = 11 * INCH; /*11in*/
- #endif PAPERSIZEREG
  	else 
  		pl = i;
  	if (v.nl > pl)

--- 275,280 -----
  	skip();
  	if ((i = vnumb(&pl)) == 0)
  		pl = 11 * INCH; /*11in*/
  	else 
  		pl = i;
  	if (v.nl > pl)
***************
*** 310,318
  	skip();
  	i = vnumb((int *)0);
  	if (nonumb)
- #ifdef REPORTERRS
- 	{
- 		errmsg(EWARN, ".wh: usage .wh nnn xx (can't find number nnn)");
  		return;
  	}
  #else !REPORTERRS

--- 290,295 -----
  	skip();
  	i = vnumb((int *)0);
  	if (nonumb)
  		return;
  	skip();
  	j = getrq();
***************
*** 314,323
  	{
  		errmsg(EWARN, ".wh: usage .wh nnn xx (can't find number nnn)");
  		return;
- 	}
- #else !REPORTERRS
- 		return;
- #endif REPORTERRS
  	skip();
  	j = getrq();
  	if ((k = findn(i)) != NTRAP) {

--- 291,296 -----
  	i = vnumb((int *)0);
  	if (nonumb)
  		return;
  	skip();
  	j = getrq();
  	if ((k = findn(i)) != NTRAP) {
***************
*** 329,337
  			break;
  	if (k == NTRAP) {
  		flusho();
- #ifdef REPORTERRS
- 		errmsg(EWARN, "more than %d traps -- too many", NTRAP - 1);
- #else !REPORTERRS
  		fprintf(stderr, "troff: cannot plant trap.\n");
  #endif REPORTERRS
  		return;

--- 302,307 -----
  			break;
  	if (k == NTRAP) {
  		flusho();
  		fprintf(stderr, "troff: cannot plant trap.\n");
  		return;
  	}
***************
*** 333,339
  		errmsg(EWARN, "more than %d traps -- too many", NTRAP - 1);
  #else !REPORTERRS
  		fprintf(stderr, "troff: cannot plant trap.\n");
- #endif REPORTERRS
  		return;
  	}
  	mlist[k] = j;

--- 303,308 -----
  	if (k == NTRAP) {
  		flusho();
  		fprintf(stderr, "troff: cannot plant trap.\n");
  		return;
  	}
  	mlist[k] = j;
***************
*** 348,356
  	lgf++;
  	skip();
  	if (!(j = getrq()))
- #ifdef REPORTERRS
- 	{
- 		errmsg(EWARN, ".ch: need a macro name and a place -- no name given");
  		return;
  	}
  #else !REPORTERRS

--- 317,322 -----
  	lgf++;
  	skip();
  	if (!(j = getrq()))
  		return;
  	else 
  		for (k = 0; k < NTRAP; k++)
***************
*** 352,361
  	{
  		errmsg(EWARN, ".ch: need a macro name and a place -- no name given");
  		return;
- 	}
- #else !REPORTERRS
- 		return;
- #endif REPORTERRS
  	else 
  		for (k = 0; k < NTRAP; k++)
  			if (mlist[k] == j)

--- 318,323 -----
  	skip();
  	if (!(j = getrq()))
  		return;
  	else 
  		for (k = 0; k < NTRAP; k++)
  			if (mlist[k] == j)
***************
*** 361,369
  			if (mlist[k] == j)
  				break;
  	if (k == NTRAP)
- #ifdef REPORTERRS
- 	{
- 		errmsg(EWARN, ".ch: Can't change unplanted macro \"%s\"", realname(j));
  		return;
  	}
  #else !REPORTERRS

--- 323,328 -----
  			if (mlist[k] == j)
  				break;
  	if (k == NTRAP)
  		return;
  	skip();
  	i = vnumb((int *)0);
***************
*** 365,374
  	{
  		errmsg(EWARN, ".ch: Can't change unplanted macro \"%s\"", realname(j));
  		return;
- 	}
- #else !REPORTERRS
- 		return;
- #endif REPORTERRS
  	skip();
  	i = vnumb((int *)0);
  	if (nonumb)

--- 324,329 -----
  				break;
  	if (k == NTRAP)
  		return;
  	skip();
  	i = vnumb((int *)0);
  	if (nonumb)
***************
*** 401,411
  		npn = i;
  		npnflg++;
  	}
- #ifdef REPORTERRS
- 	else {
- 		errmsg(EWARN, "Call to .pn with non-numeric argument ignored");
- 	}
- #endif REPORTERRS
  }
  
  

--- 356,361 -----
  		npn = i;
  		npnflg++;
  	}
  }
  
  
***************
*** 434,443
  int	x;
  {
  	register i;
- #ifdef TCHARTOS
- 	tchar	tmbuf[NTM];
- 	extern char *tchartos();
- #else !TCHARTOS
  	char	tmbuf[NTM];
  #endif TCHARTOS
  

--- 384,389 -----
  int	x;
  {
  	register i;
  	char	tmbuf[NTM];
  
  	lgf++;
***************
*** 439,445
  	extern char *tchartos();
  #else !TCHARTOS
  	char	tmbuf[NTM];
- #endif TCHARTOS
  
  	lgf++;
  	copyf++;

--- 385,390 -----
  {
  	register i;
  	char	tmbuf[NTM];
  
  	lgf++;
  	copyf++;
***************
*** 452,463
  		tmbuf[i++] = '\n';
  	tmbuf[i] = 0;
  	flusho();
- #ifdef TCHARTOS
- 	for (i = 0; i < NTM -2 && tmbuf[i] && tmbuf[i] != '\n'; i++) {
- 		fprintf(stderr, tchartos(tmbuf[i]));
- 	}
- 	fprintf(stderr, "\n");
- #else !TCHARTOS
  	fprintf(stderr, "%s", tmbuf);
  #endif TCHARTOS
  	copyf--;

--- 397,402 -----
  		tmbuf[i++] = '\n';
  	tmbuf[i] = 0;
  	flusho();
  	fprintf(stderr, "%s", tmbuf);
  	copyf--;
  }
***************
*** 459,465
  	fprintf(stderr, "\n");
  #else !TCHARTOS
  	fprintf(stderr, "%s", tmbuf);
- #endif TCHARTOS
  	copyf--;
  }
  

--- 398,403 -----
  	tmbuf[i] = 0;
  	flusho();
  	fprintf(stderr, "%s", tmbuf);
  	copyf--;
  }
  
***************
*** 539,547
  	if (skip()) {
  e0:
  		if (evi == 0)
- #ifdef REPORTERRS
- 		{
- 			errmsg(EWARN, ".ev at outermost level ignored");
  			return;
  		}
  #else !REPORTERRS

--- 477,482 -----
  	if (skip()) {
  e0:
  		if (evi == 0)
  			return;
  		nxev =  evlist[--evi];
  		goto e1;
***************
*** 543,552
  		{
  			errmsg(EWARN, ".ev at outermost level ignored");
  			return;
- 		}
- #else !REPORTERRS
- 			return;
- #endif REPORTERRS
  		nxev =  evlist[--evi];
  		goto e1;
  	}

--- 478,483 -----
  e0:
  		if (evi == 0)
  			return;
  		nxev =  evlist[--evi];
  		goto e1;
  	}
***************
*** 556,582
  	if (nonumb)
  		goto e0;
  	flushi();
- #ifdef REPORTERRS
- 	if (nxev >= NEV) {
- 		flusho();
- 		errmsg(error? done2 : edone, 040,
- 				".ev %d: largest number allowed is %d",
- 						nxev, NEV - 1);
- 		return;
- 	} else if (nxev < 0) {
- 		flusho();
- 		errmsg(error? done2 : edone, 040,
- 				".ev %d: number must be in range 0-%d",
- 						nxev, NEV - 1);
- 		return;
- 	} else if (evi >= EVLSZ) {
- 		flusho();
- 		errmsg(error? done2 : edone, 040,
- 				".ev %d: Environments nested deeper than %d levels",
- 						nxev, EVLSZ - 1);
- 		return;
- 	}
- #else !REPORTERRS
  	if ((nxev >= NEV) || (nxev < 0) || (evi >= EVLSZ)) {
  		flusho();
  		fprintf(stderr, "troff: cannot do ev.\n");

--- 487,492 -----
  	if (nonumb)
  		goto e0;
  	flushi();
  	if ((nxev >= NEV) || (nxev < 0) || (evi >= EVLSZ)) {
  		flusho();
  		fprintf(stderr, "troff: cannot do ev.\n");
***************
*** 586,592
  			edone(040);
  		return;
  	}
- #endif REPORTERRS
  	evlist[evi++] = ev;
  e1:
  	if (ev == nxev)

--- 496,501 -----
  			edone(040);
  		return;
  	}
  	evlist[evi++] = ev;
  e1:
  	if (ev == nxev)
***************
*** 604,612
  	if (--ifx < 0) {
  		ifx = 0;
  		iflist[0] = 0;
- #ifdef REPORTERRS
- 		errmsg(EWARN, ".el without matching .if ignored");
- #endif REPORTERRS
  	}
  	caseif(2);
  }

--- 513,518 -----
  	if (--ifx < 0) {
  		ifx = 0;
  		iflist[0] = 0;
  	}
  	caseif(2);
  }
***************
*** 615,625
  caseie()
  {
  	if (ifx >= NIF) {
- #ifdef REPORTERRS
- 		ifx = 0;
- 		errmsg(edone, 040, ".ie: if-else nested deeper than %d pairs",
- 								    NIF - 1);
- #else !REPORTERRS
  		fprintf(stderr, "troff: if-else overflow.\n");
  #endif REPORTERRS
  	}

--- 521,526 -----
  caseie()
  {
  	if (ifx >= NIF) {
  		fprintf(stderr, "troff: if-else overflow.\n");
  		ifx = 0;
  		edone(040);
***************
*** 621,627
  								    NIF - 1);
  #else !REPORTERRS
  		fprintf(stderr, "troff: if-else overflow.\n");
! #endif REPORTERRS
  	}
  	caseif(1);
  	ifx++;

--- 522,529 -----
  {
  	if (ifx >= NIF) {
  		fprintf(stderr, "troff: if-else overflow.\n");
! 		ifx = 0;
! 		edone(040);
  	}
  	caseif(1);
  	ifx++;
***************
*** 641,652
  		goto i1;
  	}
  	true = 0;
- #ifdef REPORTERRS
- 	if (skip()) {
- 		errmsg(EWARN, ".i%c without test ignored",
- 				(x == 0) ? 'f' : ((x < 2) ? 'e' : 'l') );
- 	}
- #else !REPORTERRS
  	skip();
  #endif REPORTERRS
  	if ((cbits(i = getch())) == '!') {

--- 543,548 -----
  		goto i1;
  	}
  	true = 0;
  	skip();
  	if ((cbits(i = getch())) == '!') {
  		notflag = 1;
***************
*** 648,654
  	}
  #else !REPORTERRS
  	skip();
- #endif REPORTERRS
  	if ((cbits(i = getch())) == '!') {
  		notflag = 1;
  	} else {

--- 544,549 -----
  	}
  	true = 0;
  	skip();
  	if ((cbits(i = getch())) == '!') {
  		notflag = 1;
  	} else {
***************
*** 655,674
  		notflag = 0;
  		ch = i;
  	}
- #ifdef REPORTERRS
- 	/* atoi will moan if we give it something that's not an expression.
- 	 * I'm not so sure it was a good idea giving atoi error checking!
- 	 * Let's do a real kludge and have a gloval variable to turn off
- 	 * error checking!
- 	 * - req
- 	 */
- 	{
- 		int save_errs = reporterrs;
- 
- 		reporterrs &= (~LERR_BADEXPSTART);
- 		/* don't moan about leading garbage --
- 		 * just assume there isn't an expression there
- 		 */
  		i = atoi();
  		reporterrs = save_errs;
  	}

--- 550,555 -----
  		notflag = 0;
  		ch = i;
  	}
  	i = atoi();
  	if (!nonumb) {
  		if (i > 0)
***************
*** 670,680
  		 * just assume there isn't an expression there
  		 */
  		i = atoi();
- 		reporterrs = save_errs;
- 	}
- #else !REPORTERRS
- 	i = atoi();
- #endif REPORTERRS
  	if (!nonumb) {
  		if (i > 0)
  			true++;

--- 551,556 -----
  		ch = i;
  	}
  	i = atoi();
  	if (!nonumb) {
  		if (i > 0)
  			true++;
***************
*** 702,743
  #endif
  	case ' ':
  		break;
- #ifdef TESTFILES
- 	case 'r':	/* true if file is readable */
- 	{
- 		int c;
- 		char filename[NS];
- 
- 		if (skip()) {
- errmsg(EWARN, ".i%c r: newline unexpected", x == 0 ? 'f' : 'e');
- 			break;
- 		}
- 		for (i = 0; i < NS - 1; i++) {
- 			int oldlgf = lgf;
- 
- 			/* I'm not sure what the 0176 is, but the others use
- 			 * it too...
- 			 * probably EOF.
- 			 * - req
- 			 */
- 			lgf++;
- 			if ((c = cbits(getch())) <= ' ' || c > 0176 ||
- 						c == '\n' || nlflg) {
- 				break;
- 			} else {
- 				filename[i] = c;
- 			}
- 		}
- 		filename[i] = '\0';
- 		if (c == '\n') {
- 			errmsg(EWARN, ".i%c r \"%s\": newline unexpected", x == 0 ? 'f' : 'e', filename);
- 		} else {
- 			ch = c;
- 		}
- 		true = (access(filename, 4) >= 0);
- 	}
- 	break;
- #endif TESTFILES
  	default:
  		true = cmpstr(i);
  	}

--- 578,583 -----
  #endif
  	case ' ':
  		break;
  	default:
  		true = cmpstr(i);
  	}
***************
*** 810,820
  	if (ismot(c))
  		return(0);
  	delim = cbits(c);
- #ifdef REPORTERRS
- 	if (isvmot(delim)) {
- 		errmsg(EWARN, "String delimiter is a vertical motion!");
- 	}
- #endif REPORTERRS
  	if (dip != d)
  		wbfl();
  	if ((offset = begin = alloc()) == (filep)0)

--- 650,655 -----
  	if (ismot(c))
  		return(0);
  	delim = cbits(c);
  	if (dip != d)
  		wbfl();
  	if ((offset = begin = alloc()) == (filep)0)
***************
*** 832,842
  		wbf(i);
  		cnt++;
  	}
- #ifdef REPORTERRS
- 	if (j != delim) {
- 		errmsg(EWARN, "Unexpected newline in conditional test");
- 	}
- #endif REPORTERRS
  	wbt((tchar)0);
  	k = !cnt;
  	if (nlflg)

--- 667,672 -----
  		wbf(i);
  		cnt++;
  	}
  	wbt((tchar)0);
  	k = !cnt;
  	if (nlflg)
***************
*** 853,863
  	pinchar = inchar;	/* XXX */
  	while ((j = cbits(i = getch())) != delim && j != '\n') {
  		if (rbf0(p) != i) {
- #ifdef REPORTERRS
- 			if (eat(delim) != delim) {
- 				errmsg(EWARN, "No closing delim \"%s\" for string test", tchartos(delim));
- 			}
- #else !REPORTERRS
  			eat(delim);
  #endif REPORTERRS
  			k = 0;

--- 683,688 -----
  	pinchar = inchar;	/* XXX */
  	while ((j = cbits(i = getch())) != delim && j != '\n') {
  		if (rbf0(p) != i) {
  			eat(delim);
  			k = 0;
  			break;
***************
*** 859,865
  			}
  #else !REPORTERRS
  			eat(delim);
- #endif REPORTERRS
  			k = 0;
  			break;
  		}

--- 684,689 -----
  	while ((j = cbits(i = getch())) != delim && j != '\n') {
  		if (rbf0(p) != i) {
  			eat(delim);
  			k = 0;
  			break;
  		}
***************
*** 866,876
  		p = incoff(p);
  		k = !(--cnt);
  	}
- #ifdef REPORTERRS
- 	if (j == '\n') {
- 		errmsg(EWARN, "Newline unexpected after string test");
- 	}
- #endif REPORTERRS
  rtn:
  	apts = savapts;
  	apts1 = savapts1;

--- 690,695 -----
  		p = incoff(p);
  		k = !(--cnt);
  	}
  rtn:
  	apts = savapts;
  	apts1 = savapts1;
***************
*** 954,963
  	for (i = 0; ((i < (NTAB - 1)) && !nonumb); i++) {
  		if (skip())
  			break;
- #ifdef ALIGNFIXES
- 		tabtab[i] = tabtab[max(i-1, 0)] & TMASK;
- 		tabtab[i] = max(hnumb(&tabtab[i]), 0) & TMASK;
- #else !ALIGNFIXES
  		tabtab[i] = max(hnumb(&tabtab[max(i-1,0)]), 0) & TMASK;
  #endif ALIGNFIXES
  		if (!nonumb) 

--- 773,778 -----
  	for (i = 0; ((i < (NTAB - 1)) && !nonumb); i++) {
  		if (skip())
  			break;
  		tabtab[i] = max(hnumb(&tabtab[max(i-1,0)]), 0) & TMASK;
  		if (!nonumb) 
  			switch (cbits(ch)) {
***************
*** 959,965
  		tabtab[i] = max(hnumb(&tabtab[i]), 0) & TMASK;
  #else !ALIGNFIXES
  		tabtab[i] = max(hnumb(&tabtab[max(i-1,0)]), 0) & TMASK;
- #endif ALIGNFIXES
  		if (!nonumb) 
  			switch (cbits(ch)) {
  			case 'C':

--- 774,779 -----
  		if (skip())
  			break;
  		tabtab[i] = max(hnumb(&tabtab[max(i-1,0)]), 0) & TMASK;
  		if (!nonumb) 
  			switch (cbits(ch)) {
  			case 'C':
***************
*** 968,976
  			case 'R':
  				tabtab[i] |= RTAB;
  				break;
- #ifdef COMMENT
- 			/* no error checking here.  Probably not a problem */
- #endif COMMENT
  			default: /*includes L*/
  #ifdef REPORTERRS
  				if (cbits(ch) != 'L' && cbits(ch) != ' ' &&

--- 782,787 -----
  			case 'R':
  				tabtab[i] |= RTAB;
  				break;
  			default: /*includes L*/
  				break;
  			}
***************
*** 972,983
  			/* no error checking here.  Probably not a problem */
  #endif COMMENT
  			default: /*includes L*/
- #ifdef REPORTERRS
- 				if (cbits(ch) != 'L' && cbits(ch) != ' ' &&
- 				    cbits(ch) != '\t' && cbits(ch) != '\n') {
- 					errmsg(EWARN, ".ta: tab suffix \"%s\" not L, R or C; using L", tchartos(ch));
- 				}
- #endif REPORTERRS
  				break;
  			}
  		nonumb = ch = 0;

--- 783,788 -----
  				tabtab[i] |= RTAB;
  				break;
  			default: /*includes L*/
  				break;
  			}
  		nonumb = ch = 0;
***************
*** 986,997
  }
  
  
- #ifdef COMMENT
- /* note that for .ne to work in an intuitive way, there must be a .br before
-  * it!!!
-  * - req
-  */
- #endif COMMENT
  casene()
  {
  	register i, j;

--- 791,796 -----
  }
  
  
  casene()
  {
  	register i, j;
***************
*** 1010,1035
  }
  
  
- #ifdef COMMENT
- /* lines like
-  * 'trouble in the outer hebrides' was....
-  * cause so many problems that it'd be nice to be able to spot them.
-  *
-  * A better approach to .tr would be to have a read-only string that
-  * contained the current trtab[].  Then .tr \*(xx would be useful.
-  * There is no way to turn off all translations, except one-at-a-time.
-  * The s & f bits (see tdef.h or BWK's titroff paper) are not stored, so
-  * you can't do useful things like
-  * .tr *\s+2*
-  * to make all stars come out bigger, or
-  * .tr *\f(ma*
-  * to use the * from font "ma" instead.  Really this would be introducing
-  * single-character macros, though.  User defined fonts sound a better way
-  * of doing this to me.
-  *
-  * - req
-  */
- #endif COMMENT
  casetr()
  {
  	register i, j;

--- 809,814 -----
  }
  
  
  casetr()
  {
  	register i, j;
***************
*** 1036,1046
  	tchar k;
  
  	lgf++;
- #ifdef REPORTERRS
- 	if (skip()) {
- 		errmsg(EWARN, ".tr with no arguments ignored");
- 	}
- #else !REPORTERRS
  	skip();
  #endif REPORTERRS
  	while ((i = cbits(k=getch())) != '\n') {

--- 815,820 -----
  	tchar k;
  
  	lgf++;
  	skip();
  	while ((i = cbits(k=getch())) != '\n') {
  		if (ismot(k))
***************
*** 1042,1048
  	}
  #else !REPORTERRS
  	skip();
- #endif REPORTERRS
  	while ((i = cbits(k=getch())) != '\n') {
  		if (ismot(k))
  			return;

--- 816,821 -----
  
  	lgf++;
  	skip();
  	while ((i = cbits(k=getch())) != '\n') {
  		if (ismot(k))
  			return;
***************
*** 1103,1111
  }
  
  
- #ifdef COMMENT
- /* note -- there can only be one active input trap -- req */
- #endif COMMENT
  caseit()
  {
  	register i;

--- 876,881 -----
  }
  
  
  caseit()
  {
  	register i;
***************
*** 1122,1133
  }
  
  
- #ifdef COMMENT
- /* BUG: interaction between .nm (line number mode) and .mc (margin character)
-  * whereby the margin character is indented wrongly on numbered lines!
-  * - req
-  */
- #endif COMMENT
  casemc()
  {
  	register i;

--- 892,897 -----
  }
  
  
  casemc()
  {
  	register i;
***************
*** 1139,1165
  		return;
  	ic = getch();
  	icf = 1;
- #ifdef COMMENT
- 	/* what should we do with ".mc xxx 4"?
- 	 * it's an error, or we could allow a margin-string...
- 	 * Let's be lazy.
- 	 * -- req
- 	 */
- #endif COMMENT
- #ifdef REPORTERRS
- 	i = 0;
- 	if (skip()) {	/* use old ics if nonumb */
- 		return;
- 	}
- 	i = hnumb((int *) 0);
- 	if (nonumb) {
- 		errmsg(EWARN, ".mc: 2nd argument should be numeric");
- 	} else if (i < 0) {
- 		errmsg(EWARN, ".mc: offset N should be positive");
- 	} else {
- 		ics = i;
- 	}
- #else !REPORTERRS
  	skip();
  	i = max(hnumb((int *)0), 0);
  	if (!nonumb)

--- 903,908 -----
  		return;
  	ic = getch();
  	icf = 1;
  	skip();
  	i = max(hnumb((int *)0), 0);
  	if (!nonumb)
***************
*** 1164,1170
  	i = max(hnumb((int *)0), 0);
  	if (!nonumb)
  		ics = i;
- #endif REPORTERRS
  }
  
  

--- 907,912 -----
  	i = max(hnumb((int *)0), 0);
  	if (!nonumb)
  		ics = i;
  }
  
  
***************
*** 1181,1189
  		return;
  	}
  	if ((i = getrq()) == 0)
- #ifdef REPORTERRS
- 	{
- 		errmsg(EWARN, ".mk: 2nd argument must be a macro-name");
  		return;
  	}
  #else !REPORTERRS

--- 923,928 -----
  		return;
  	}
  	if ((i = getrq()) == 0)
  		return;
  	vlist[findr(i)] = j;
  }
***************
*** 1185,1194
  	{
  		errmsg(EWARN, ".mk: 2nd argument must be a macro-name");
  		return;
- 	}
- #else !REPORTERRS
- 		return;
- #endif REPORTERRS
  	vlist[findr(i)] = j;
  }
  

--- 924,929 -----
  	}
  	if ((i = getrq()) == 0)
  		return;
  	vlist[findr(i)] = j;
  }
  
***************
*** 1199,1207
  
  	skip();
  	if ((i = vnumb((int *)0)) < 0)
- #ifdef REPORTERRS
- 	{
- 		errmsg(EWARN, ".sv request for negative (%d) space ignored", i);
  		return;
  	}
  #else !REPORTERRS

--- 934,939 -----
  
  	skip();
  	if ((i = vnumb((int *)0)) < 0)
  		return;
  	if (nonumb)
  		i = 1;
***************
*** 1203,1212
  	{
  		errmsg(EWARN, ".sv request for negative (%d) space ignored", i);
  		return;
- 	}
- #else !REPORTERRS
- 		return;
- #endif REPORTERRS
  	if (nonumb)
  		i = 1;
  	sv += i;

--- 935,940 -----
  	skip();
  	if ((i = vnumb((int *)0)) < 0)
  		return;
  	if (nonumb)
  		i = 1;
  	sv += i;
***************
*** 1228,1246
  }
  
  
- #ifdef COMMENT
- /* .nm +-N M S I -- line number mode: next line numbered N (+0 to continue)
-  * Defaults: M = 1, number-text sepapation S = 1, line-number Indent I = 0
-  * M > 1 prints only linenumbers that are multiples of M.
-  *
-  * Creaping featurism really -- it could probably be done with traps.
-  *
-  * Doing .af nl i
-  * really ought to allow non-arabic line-numbers, I suppose.
-  *
-  * -req
-  */
- #endif COMMENT
  casenm()
  {
  	register i;

--- 956,961 -----
  }
  
  
  casenm()
  {
  	register i;
Only in titroff: n6.c
diff -rbc titroff/n7.c /distribution/dwb/text/troff.d/n7.c
*** titroff/n7.c	Mon Nov  3 14:27:47 1986
--- /distribution/dwb/text/troff.d/n7.c	Fri Sep  9 18:46:01 1983
***************
*** 1,3
  #include "tdef.h"
  extern
  #include "d.h"

--- 1,4 -----
+ /*	@(#)n7.c	1.3	*/
  #include "tdef.h"
  extern
  #include "d.h"
***************
*** 54,62
  	if (dip == d)
  		horiz(po);
  #endif
- #ifdef COMMENT
- 	/* put out line numbers */
- #endif COMMENT
  	if (lnmod)
  		donum();
  	lastl = ne;

--- 55,60 -----
  	if (dip == d)
  		horiz(po);
  #endif
  	if (lnmod)
  		donum();
  	lastl = ne;
***************
*** 126,140
  			nc--;
  		}
  	}
- #ifdef COMMENT
- 	/* Margin Character is ic [sic].
- 	 * BUG: if we have numbered this line, there's a horizontal
- 	 * offset error!
- 	 * Look at donum().
- 	 *
- 	 * req
- 	 */
- #endif COMMENT
  	if (ic) {
  		if ((k = ll - un - lastl + ics) > 0)
  			horiz(k);

--- 124,129 -----
  			nc--;
  		}
  	}
  	if (ic) {
  		if ((k = ll - un - lastl + ics) > 0)
  			horiz(k);
***************
*** 166,176
  	extern pchar();
  
  	nrbits = nmbits;
- #ifdef COMMENT
- 	/* this all fails horribly if digits don't all have the same width!
- 	 * - req
- 	 */
- #endif COMMENT
  	nw = width('1' | nrbits);
  	if (nn) {
  		nn--;

--- 155,160 -----
  	extern pchar();
  
  	nrbits = nmbits;
  	nw = width('1' | nrbits);
  	if (nn) {
  		nn--;
***************
*** 190,200
  	horiz(nw * (ni + i));
  	nform = 0;
  	fnumb(v.ln, pchar);
- #ifdef COMMENT
- 	/* the next line screws up margin characters.
- 	 * -req
- 	 */
- #endif COMMENT
  	un += nw * nms;
  	v.ln++;
  }

--- 174,179 -----
  	horiz(nw * (ni + i));
  	nform = 0;
  	fnumb(v.ln, pchar);
  	un += nw * nms;
  	v.ln++;
  }
***************
*** 204,221
  {
  	tchar i;
  	static int	spcnt;
- #ifdef BLANKSMACRO
- 	static int	nlcnt;	/* no. of blank lines seen... */
- 	/*  The idea is to call a macro set by .bm (default is sp) when
- 	 * there's a line that starts with whitespace.
- 	 * eg: 5 blank lines followed by
- 	 * "   hello"
- 	 * causes callblank(3, 5) because the 1st line with text on it
- 	 * has 3 leading spaces & happens after 5 blank lines.
- 	 *
- 	 * - req
- 	 */
- #endif BLANKSMACRO
  
  	nflush++;
  	if ((dip == d) && (v.nl == -1)) {

--- 183,188 -----
  {
  	tchar i;
  	static int	spcnt;
  
  	nflush++;
  	if ((dip == d) && (v.nl == -1)) {
***************
*** 220,228
  	nflush++;
  	if ((dip == d) && (v.nl == -1)) {
  		newline(1); 
- #ifdef COMMENT
- 		/* the first line of a new file */
- #endif COMMENT
  		return;
  	}
  	setnel();

--- 187,192 -----
  	nflush++;
  	if ((dip == d) && (v.nl == -1)) {
  		newline(1); 
  		return;
  	}
  	setnel();
***************
*** 244,261
  		spcnt++;
  	if (nlflg) {
  t1:
- #ifdef BLANKSMACRO
- 		/* call the .bl macro if lines start with  whitespace */
- 		nlcnt++;
- 		nflush = pendt = ch = 0;
- 		if (spcnt) {
- 			int x = spcnt, y = nlcnt;
- 			spcnt = nlcnt = 0;	/* in case bm macro introduces
- 						* a blank line */
- 			callblank(x, y);
- 		}
- 		spcnt = 0;
- #else !BLANKSMACRO
  		nflush = pendt = ch = spcnt = 0;
  		callsp();
  #endif BLANKSMACRO

--- 208,213 -----
  		spcnt++;
  	if (nlflg) {
  t1:
  		nflush = pendt = ch = spcnt = 0;
  		callsp();
  		return;
***************
*** 258,264
  #else !BLANKSMACRO
  		nflush = pendt = ch = spcnt = 0;
  		callsp();
- #endif BLANKSMACRO
  		return;
  	}
  #ifdef BLANKSMACRO

--- 210,215 -----
  t1:
  		nflush = pendt = ch = spcnt = 0;
  		callsp();
  		return;
  	}
  	ch = i;
***************
*** 261,278
  #endif BLANKSMACRO
  		return;
  	}
- #ifdef BLANKSMACRO
- 	else {
- 		if (nlcnt) {
- 			int x = spcnt, y = nlcnt;
- 
- 			nflush = pendt = ch = 0;
- 			nlcnt = spcnt = 0; /* in case bm macro introduces
- 					    * a blank line */
- 			callblank(x, y);
- 		}
- 	}
- #endif BLANKSMACRO
  	ch = i;
  	if (spcnt) {
  t2:

--- 212,217 -----
  		callsp();
  		return;
  	}
  	ch = i;
  	if (spcnt) {
  t2:
***************
*** 403,411
  	if (linep >= line + lnsize - 1) {
  		if (!over) {
  			flusho();
- #ifdef REPORTERRS
- 			errmsg(EWARN, "Internal error: Line overflow");
- #else !REPORTERRS
  			fprintf(stderr, "troff: Line overflow.\n");
  #endif REPORTERRS
  			over++;

--- 342,347 -----
  	if (linep >= line + lnsize - 1) {
  		if (!over) {
  			flusho();
  			fprintf(stderr, "troff: Line overflow.\n");
  			over++;
  			c = LEFTHAND;
***************
*** 407,413
  			errmsg(EWARN, "Internal error: Line overflow");
  #else !REPORTERRS
  			fprintf(stderr, "troff: Line overflow.\n");
- #endif REPORTERRS
  			over++;
  			c = LEFTHAND;
  			w = -1;

--- 343,348 -----
  		if (!over) {
  			flusho();
  			fprintf(stderr, "troff: Line overflow.\n");
  			over++;
  			c = LEFTHAND;
  			w = -1;
***************
*** 517,525
  	} else if ((i = findt(v.nl - nlss)) <= nlss) {
  		if ((j = findn1(v.nl - nlss + i)) == NTRAP) {
  			flusho();
- #ifdef REPORTERRS
- 			errmsg(done2, -5, "Internal error: Trap botch in __FILE__ at line __LINE__");
- #else !REPORTERRS
  			fprintf(stderr, "troff: Trap botch.\n");
  			done2(-5);
  #endif REPORTERRS

--- 452,457 -----
  	} else if ((i = findt(v.nl - nlss)) <= nlss) {
  		if ((j = findn1(v.nl - nlss + i)) == NTRAP) {
  			flusho();
  			fprintf(stderr, "troff: Trap botch.\n");
  			done2(-5);
  		}
***************
*** 522,528
  #else !REPORTERRS
  			fprintf(stderr, "troff: Trap botch.\n");
  			done2(-5);
- #endif REPORTERRS
  		}
  		trap = control(mlist[j], 0);
  	}

--- 454,459 -----
  			flusho();
  			fprintf(stderr, "troff: Trap botch.\n");
  			done2(-5);
  		}
  		trap = control(mlist[j], 0);
  	}
***************
*** 805,812
  	if (j != ' ') {
  		if (j != '\n')
  			goto g0;
! 		j = cbits(*(wordp - 1));
! 		if ((j == '.') ||  (j == '!') ||  (j == '?'))
  			spflg++;
  	}
  	*wordp = 0;

--- 736,747 -----
  	if (j != ' ') {
  		if (j != '\n')
  			goto g0;
! 		{ tchar *wp = wordp-1;
! 		while (wp >= word) {
! 			j = cbits(*wp--);
! 			if (j=='"' || j=='\'' || j==')' ||j==']')
! 				continue;
! 			if (j == '.' || j == '!' || j == ':' || j == '?')
  				spflg++;
  			break;
  		  }
***************
*** 808,813
  		j = cbits(*(wordp - 1));
  		if ((j == '.') ||  (j == '!') ||  (j == '?'))
  			spflg++;
  	}
  	*wordp = 0;
  rtn:

--- 743,749 -----
  				continue;
  			if (j == '.' || j == '!' || j == ':' || j == '?')
  				spflg++;
+ 			break;
  		  }
  		}
  	}
***************
*** 809,814
  		if ((j == '.') ||  (j == '!') ||  (j == '?'))
  			spflg++;
  	}
  	*wordp = 0;
  rtn:
  	wdstart = 0;

--- 745,752 -----
  				spflg++;
  			break;
  		  }
+ 		}
+ 	}
  	*wordp = 0;
  rtn:
  	wdstart = 0;
***************
*** 828,836
  	if (wordp >= &word[WDSIZE - 1]) {
  		if (!over) {
  			flusho();
- #ifdef REPORTERRS
- 			errmsg(EWARN, "Word overflow (word longer than %d chars)", WDSIZE - 1);
- #else !REPORTERRS
  			fprintf(stderr, "troff: Word overflow.\n");
  #endif REPORTERRS
  			over++;

--- 766,771 -----
  	if (wordp >= &word[WDSIZE - 1]) {
  		if (!over) {
  			flusho();
  			fprintf(stderr, "troff: Word overflow.\n");
  			over++;
  			c = LEFTHAND;
***************
*** 832,838
  			errmsg(EWARN, "Word overflow (word longer than %d chars)", WDSIZE - 1);
  #else !REPORTERRS
  			fprintf(stderr, "troff: Word overflow.\n");
- #endif REPORTERRS
  			over++;
  			c = LEFTHAND;
  			w = -1;

--- 767,772 -----
  		if (!over) {
  			flusho();
  			fprintf(stderr, "troff: Word overflow.\n");
  			over++;
  			c = LEFTHAND;
  			w = -1;
diff -rbc titroff/n8.c /distribution/dwb/text/troff.d/n8.c
*** titroff/n8.c	Tue Nov 11 14:56:59 1986
--- /distribution/dwb/text/troff.d/n8.c	Fri Sep  9 18:46:03 1983
***************
*** 1,3
  #include	<ctype.h>
  #include	"tdef.h"
  #define	HY_BIT	0200	/* stuff in here only works for ascii */

--- 1,4 -----
+ /*      @(#)n8.c	1.1     */
  #include	<ctype.h>
  #include	"tdef.h"
  #define	HY_BIT	0200	/* stuff in here only works for ascii */
***************
*** 122,130
  	}
  	return;
  full:
- #ifdef REPORTERRS
- 	errmsg(EWARN, ".hw: exception word list full (%d bytes)", NHEX - 2);
- #else !REPORTERRS
  	fprintf(stderr, "troff: exception word list full.\n");
  #endif REPORTERRS
  	*nexth = 0;

--- 123,128 -----
  	}
  	return;
  full:
  	fprintf(stderr, "troff: exception word list full.\n");
  	*nexth = 0;
  }
***************
*** 126,132
  	errmsg(EWARN, ".hw: exception word list full (%d bytes)", NHEX - 2);
  #else !REPORTERRS
  	fprintf(stderr, "troff: exception word list full.\n");
- #endif REPORTERRS
  	*nexth = 0;
  }
  

--- 124,129 -----
  	return;
  full:
  	fprintf(stderr, "troff: exception word list full.\n");
  	*nexth = 0;
  }
  
diff -rbc titroff/n9.c /distribution/dwb/text/troff.d/n9.c
*** titroff/n9.c	Tue Nov 11 15:01:18 1986
--- /distribution/dwb/text/troff.d/n9.c	Fri Sep  9 18:46:08 1983
***************
*** 1,3
  #include "tdef.h"
  extern
  #include "d.h"

--- 1,4 -----
+ /*      @(#)n9.c	1.1     */
  #include "tdef.h"
  extern
  #include "d.h"
***************
*** 34,42
  	int	w, cnt, delim, rem, temp;
  
  	if (ismot(c = getch()))
- #ifdef REPORTERRS
- 	{
- 		errmsg(EWARN, "\\l with unsuitable delimiter (vertical motion) ignored");
  		return;
  	}
  #else !REPORTERRS

--- 35,40 -----
  	int	w, cnt, delim, rem, temp;
  
  	if (ismot(c = getch()))
  		return;
  	delim = cbits(c);
  	vflag = 0;
***************
*** 38,47
  	{
  		errmsg(EWARN, "\\l with unsuitable delimiter (vertical motion) ignored");
  		return;
- 	}
- #else !REPORTERRS
- 		return;
- #endif REPORTERRS
  	delim = cbits(c);
  	vflag = 0;
  	dfact = EM;

--- 36,41 -----
  
  	if (ismot(c = getch()))
  		return;
  	delim = cbits(c);
  	vflag = 0;
  	dfact = EM;
***************
*** 48,59
  	length = quant(atoi(), HOR);
  	dfact = 1;
  	if (!length) {
- #ifdef REPORTERRS
- 		if (eat(delim) != delim) {
- 			errmsg(EWARN, "\\l%s: zero length & no trailing delim",
- 						tchartos(delim));
- 		}
- #else !REPORTERRS
  		eat(delim);
  #endif REPORTERRS
  		return;

--- 42,47 -----
  	length = quant(atoi(), HOR);
  	dfact = 1;
  	if (!length) {
  		eat(delim);
  		return;
  	}
***************
*** 55,61
  		}
  #else !REPORTERRS
  		eat(delim);
- #endif REPORTERRS
  		return;
  	}
  s0:

--- 43,48 -----
  	dfact = 1;
  	if (!length) {
  		eat(delim);
  		return;
  	}
  s0:
***************
*** 66,82
  		goto s0;
  	w = width(c);
  	i = cbuf;
- #ifdef ZEROLINES
- 	if (w == 0) {
- 		/* prevent zero-width char from causing a core dump! */
- 		w = quant(EM, HOR);
- #ifdef REPORTERRS
- 		errmsg(EWARN, "\\l: zero-width character used to draw a line\n");
- #else !REPORTERRS
- 		fprintf(stderr,"troff: Warning: zero-width character used to draw a line\n");
- #endif REPORTERRS
- 	}
- #endif ZEROLINES
  	if (length < 0) {
  		*i++ = makem(length);
  		length = -length;

--- 53,58 -----
  		goto s0;
  	w = width(c);
  	i = cbuf;
  	if (length < 0) {
  		*i++ = makem(length);
  		length = -length;
***************
*** 99,114
  	}
  s1:
  	*i++ = 0;
- #ifdef REPORTERRS
- 	c = getch();
- 	if (cbits(c) != delim) {
- 		if (cbits(c) == '\n') {
- 			errmsg(EWARN, "\\l: newline unexpected");
- 		} else {
- 			errmsg(EWARN, "\\l: delimiters different (\"%s\" and \"%s\")", tchartos(delim), tchartos(c));
- 		}
- 	}
- #else !REPORTERRS
  	eat(delim);
  #endif REPORTERRS
  	cp = cbuf;

--- 75,80 -----
  	}
  s1:
  	*i++ = 0;
  	eat(delim);
  	cp = cbuf;
  }
***************
*** 110,116
  	}
  #else !REPORTERRS
  	eat(delim);
- #endif REPORTERRS
  	cp = cbuf;
  }
  

--- 76,81 -----
  s1:
  	*i++ = 0;
  	eat(delim);
  	cp = cbuf;
  }
  
***************
*** 133,141
  	int	delim, w[NOV];
  
  	if (ismot(i = getch()))
- #ifdef REPORTERRS
- 	{
- 		errmsg(EWARN, "\\o: vertical motion unsuitable as delimiter");
  		return;
  	}
  #else !REPORTERRS

--- 98,103 -----
  	int	delim, w[NOV];
  
  	if (ismot(i = getch()))
  		return;
  	delim = cbits(i);
  	for (k = 0; (k < NOV) && ((j = cbits(i = getch())) != delim) &&  (j != '\n'); k++) {
***************
*** 137,146
  	{
  		errmsg(EWARN, "\\o: vertical motion unsuitable as delimiter");
  		return;
- 	}
- #else !REPORTERRS
- 		return;
- #endif REPORTERRS
  	delim = cbits(i);
  #ifdef LONGOVFIX
  	for (k = 0; (k < NOV - 1) && ((j = cbits(i = getch())) != delim) &&  (j != '\n'); k++) {

--- 99,104 -----
  
  	if (ismot(i = getch()))
  		return;
  	delim = cbits(i);
  	for (k = 0; (k < NOV) && ((j = cbits(i = getch())) != delim) &&  (j != '\n'); k++) {
  		o[k] = i;
***************
*** 142,150
  		return;
  #endif REPORTERRS
  	delim = cbits(i);
- #ifdef LONGOVFIX
- 	for (k = 0; (k < NOV - 1) && ((j = cbits(i = getch())) != delim) &&  (j != '\n'); k++) {
- #else !LONGOVFIX
  	for (k = 0; (k < NOV) && ((j = cbits(i = getch())) != delim) &&  (j != '\n'); k++) {
  #endif LONGOVFIX
  		o[k] = i;

--- 100,105 -----
  	if (ismot(i = getch()))
  		return;
  	delim = cbits(i);
  	for (k = 0; (k < NOV) && ((j = cbits(i = getch())) != delim) &&  (j != '\n'); k++) {
  		o[k] = i;
  		w[k] = width(i);
***************
*** 146,152
  	for (k = 0; (k < NOV - 1) && ((j = cbits(i = getch())) != delim) &&  (j != '\n'); k++) {
  #else !LONGOVFIX
  	for (k = 0; (k < NOV) && ((j = cbits(i = getch())) != delim) &&  (j != '\n'); k++) {
- #endif LONGOVFIX
  		o[k] = i;
  		w[k] = width(i);
  	}

--- 101,106 -----
  		return;
  	delim = cbits(i);
  	for (k = 0; (k < NOV) && ((j = cbits(i = getch())) != delim) &&  (j != '\n'); k++) {
  		o[k] = i;
  		w[k] = width(i);
  	}
***************
*** 150,163
  		o[k] = i;
  		w[k] = width(i);
  	}
- #ifdef REPORTERRS
- 	if (k >= NOV - 1) {
- 		errmsg(EWARN, "\\o: overstrike longer than %d characters", NOV);
- 	} else if (j == '\n') {
- 		errmsg(EWARN,
- 			"\\o: no trailing delimiter found to match \"%s\"", tchartos(delim));
- 	}
- #endif REPORTERRS
  	o[k] = w[k] = 0;
  	if (o[0])
  		for (j = 1; j; ) {

--- 104,109 -----
  		o[k] = i;
  		w[k] = width(i);
  	}
  	o[k] = w[k] = 0;
  	if (o[0])
  		for (j = 1; j; ) {
***************
*** 175,184
  			}
  		}
  	else 
- #ifdef REPORTERRS
- 	{
- 		errmsg(EWARN, "Empty overstrike \"\\o%s%s\" ignored",
- 					tchartos(delim), tchartos(delim));
  		return;
  	}
  #else !REPORTERRS

--- 121,126 -----
  			}
  		}
  	else 
  		return;
  	p = cbuf;
  	for (k = 0; o[k]; k++) {
***************
*** 180,189
  		errmsg(EWARN, "Empty overstrike \"\\o%s%s\" ignored",
  					tchartos(delim), tchartos(delim));
  		return;
- 	}
- #else !REPORTERRS
- 		return;
- #endif REPORTERRS
  	p = cbuf;
  	for (k = 0; o[k]; k++) {
  		*p++ = o[k];

--- 122,127 -----
  		}
  	else 
  		return;
  	p = cbuf;
  	for (k = 0; o[k]; k++) {
  		*p++ = o[k];
***************
*** 202,210
  	int	cnt, delim;
  
  	if (ismot(i = getch()))
- #ifdef REPORTERRS
- 	{
- 		errmsg(EWARN, "\\b: vertical motion unsuitable as delimiter");
  		return;
  	}
  #else !REPORTERRS

--- 140,145 -----
  	int	cnt, delim;
  
  	if (ismot(i = getch()))
  		return;
  	delim = cbits(i);
  	j = cbuf + 1;
***************
*** 206,215
  	{
  		errmsg(EWARN, "\\b: vertical motion unsuitable as delimiter");
  		return;
- 	}
- #else !REPORTERRS
- 		return;
- #endif REPORTERRS
  	delim = cbits(i);
  	j = cbuf + 1;
  	cnt = 0;

--- 141,146 -----
  
  	if (ismot(i = getch()))
  		return;
  	delim = cbits(i);
  	j = cbuf + 1;
  	cnt = 0;
***************
*** 224,248
  		*j++ = dwn;
  		cnt++;
  	}
- #ifdef REPORTERRS
- 	if (j > (cbuf + NC - 4)) {
- 		errmsg(EWARN,
- 			"Bracket (\\b) too long (truncated to %d characte",
- 			cbuf + NC - 4);
- 		while (((k = cbits(i = getch())) != delim) && (k != '\n')) {
- 			/* throw away the rest... */
- 			;
- 		}
- 	} 
- 	if (k == '\n') {
- 		errmsg(EWARN, "\\b: No delimiter found to match \"%s\"",
- 						tchartos(delim));
- 	} else if (--cnt < 0) {
- 		errmsg(EWARN, "Empty bracket \"\\b%s%s\" ignored",
- 				tchartos(delim), tchartos(delim));
- 		return;
- 	}
- #else !REPORTERRS
  	if (--cnt < 0)
  		return;
  #endif REPORTERRS

--- 155,160 -----
  		*j++ = dwn;
  		cnt++;
  	}
  	if (--cnt < 0)
  		return;
  	else if (!cnt) {
***************
*** 245,251
  #else !REPORTERRS
  	if (--cnt < 0)
  		return;
- #endif REPORTERRS
  	else if (!cnt) {
  #ifdef ZBRACKFIX
  		ch = *(j - 2) & ~ZBIT;

--- 157,162 -----
  	}
  	if (--cnt < 0)
  		return;
  	else if (!cnt) {
  		ch = *(j - 2);
  		return;
***************
*** 247,269
  		return;
  #endif REPORTERRS
  	else if (!cnt) {
- #ifdef ZBRACKFIX
- 		ch = *(j - 2) & ~ZBIT;
- 		/* turn off the ZBIT (zero width) on single chars, or
- 		 * there'd be a problem with \b'\zx', whereby the entire
- 		 * bracket would have no space left for it.  Or maybe that's
- 		 * how it *should* behave?  A \b with only 1 char seems an
- 		 * odd thing to want anyway!
- 		 *
- 		 * Should we warn the user?  Probably not.  The only time
- 		 * this is likely to happen involves machine-generated
- 		 * troff input.
- 		 *
- 		 * What about \b'' --- should that be an error?!??
- 		 *
- 		 * -- req, after John Buck (trixie!polyof!john), 7/10/86
- 		 */
- #else !ZBRACKFIX
  		ch = *(j - 2);
  #endif ZBRACKFIX
  		return;

--- 158,163 -----
  	if (--cnt < 0)
  		return;
  	else if (!cnt) {
  		ch = *(j - 2);
  		return;
  	}
***************
*** 265,271
  		 */
  #else !ZBRACKFIX
  		ch = *(j - 2);
- #endif ZBRACKFIX
  		return;
  	}
  	*j = 0;

--- 159,164 -----
  		return;
  	else if (!cnt) {
  		ch = *(j - 2);
  		return;
  	}
  	*j = 0;
***************
*** 287,295
  	int	cnt, delim, v;
  
  	if (ismot(c = getch()))
- #ifdef REPORTERRS
- 	{
- 		errmsg(EWARN, "\\L: unsuitable start delimiter");
  		return;
  	}
  #else !REPORTERRS

--- 180,185 -----
  	int	cnt, delim, v;
  
  	if (ismot(c = getch()))
  		return;
  	delim = cbits(c);
  	dfact = lss;
***************
*** 291,300
  	{
  		errmsg(EWARN, "\\L: unsuitable start delimiter");
  		return;
- 	}
- #else !REPORTERRS
- 		return;
- #endif REPORTERRS
  	delim = cbits(c);
  	dfact = lss;
  	vflag++;

--- 181,186 -----
  
  	if (ismot(c = getch()))
  		return;
  	delim = cbits(c);
  	dfact = lss;
  	vflag++;
***************
*** 301,311
  	i = quant(atoi(), VERT);
  	dfact = 1;
  	if (!i) {
- #ifdef REPORTERRS
- 		if (eat(delim) != delim) {
- 			errmsg(EWARN, "Vertical line (\\L): no closing delimiter");
- 		} /* not an error to have a zero-length line */
- #else !REPORTERRS
  		eat(delim);
  #endif REPORTERRS
  		vflag = 0;

--- 187,192 -----
  	i = quant(atoi(), VERT);
  	dfact = 1;
  	if (!i) {
  		eat(delim);
  		vflag = 0;
  		return;
***************
*** 307,313
  		} /* not an error to have a zero-length line */
  #else !REPORTERRS
  		eat(delim);
- #endif REPORTERRS
  		vflag = 0;
  		return;
  	}

--- 188,193 -----
  	dfact = 1;
  	if (!i) {
  		eat(delim);
  		vflag = 0;
  		return;
  	}
***************
*** 314,334
  	if ((cbits(c = getch())) == delim) {
  		c = BOXRULE | chbits;	/*default box rule*/
  	} else 
- #ifdef REPORTERRS
- 	{
- 		int delim2 = cbits(getch());
- 
- 		if (delim2 != delim) {
- 			if (delim2 == '\n') {
- 				errmsg(EWARN, "\\v: unexpected newline");
- 			} else {
- 				errmsg(EWARN,
- 	"\\v: expected closing delim \"%s\", found \"%s\"",
- 			tchartos(delim), tchartos(delim2));
- 			}
- 		}
- 	}
- #else !REPORTERRS
  		getch();
  #endif REPORTERRS
  	c |= ZBIT;

--- 194,199 -----
  	if ((cbits(c = getch())) == delim) {
  		c = BOXRULE | chbits;	/*default box rule*/
  	} else 
  		getch();
  	c |= ZBIT;
  	neg = 0;
***************
*** 330,336
  	}
  #else !REPORTERRS
  		getch();
- #endif REPORTERRS
  	c |= ZBIT;
  	neg = 0;
  	if (i < 0) {

--- 195,200 -----
  		c = BOXRULE | chbits;	/*default box rule*/
  	} else 
  		getch();
  	c |= ZBIT;
  	neg = 0;
  	if (i < 0) {
***************
*** 343,354
  #ifndef NROFF
  	v = EM;
  #endif
- #ifdef REPORTERRS
- 	if (!v) {
- 		errmsg(EWARN, "Internal error: !v (__FILE__:__LINE__)");
- 		v = EM;
- 	}
- #endif REPORTERRS
  	cnt = i / v;
  	rem = makem(i % v) | neg;
  	ver = makem(v) | neg;

--- 207,212 -----
  #ifndef NROFF
  	v = EM;
  #endif
  	cnt = i / v;
  	rem = makem(i % v) | neg;
  	ver = makem(v) | neg;
***************
*** 374,382
  
  setdraw()	/* generate internal cookies for a drawing function */
  {
- #ifdef DXLIM
- 	int i, j, k, dx[DXLIM], dy[DXLIM], delim, type, temp;
- #else !DXLIM
  	int i, j, k, dx[100], dy[100], delim, type, temp;
  #endif DXLIM
  	tchar c;

--- 232,237 -----
  
  setdraw()	/* generate internal cookies for a drawing function */
  {
  	int i, j, k, dx[100], dy[100], delim, type, temp;
  	tchar c;
  	/* input is \D'f x y x y ... c' (or at least it had better be) */
***************
*** 378,384
  	int i, j, k, dx[DXLIM], dy[DXLIM], delim, type, temp;
  #else !DXLIM
  	int i, j, k, dx[100], dy[100], delim, type, temp;
- #endif DXLIM
  	tchar c;
  	/* input is \D'f x y x y ... c' (or at least it had better be) */
  	/* this does drawing function f with character c and the */

--- 233,238 -----
  setdraw()	/* generate internal cookies for a drawing function */
  {
  	int i, j, k, dx[100], dy[100], delim, type, temp;
  	tchar c;
  	/* input is \D'f x y x y ... c' (or at least it had better be) */
  	/* this does drawing function f with character c and the */
***************
*** 389,402
  	/* e x y:	ellipse of diameters x,y, left side here */
  	/* a x y r:	arc to x,y with radius r (ccw) */
  	/* ~ x y ...:	wiggly line */
- #ifdef GREMLIN
- 	/* t n:		line thickness n */
- 	/* s n:		line style mask set to n */
- 	/* g x y ...:	gremlin [!??!?] don't ask me!  - req */
- #endif GREMLIN
- #ifdef ANYBASESTR
- 	/* b drawingstuff ' text ': use DRAWFCN as baseline for text -- req */
- #endif ANYBASESTR
  
  	if (ismot(c = getch()))
  #ifdef REPORTERRS

--- 243,248 -----
  	/* e x y:	ellipse of diameters x,y, left side here */
  	/* a x y r:	arc to x,y with radius r (ccw) */
  	/* ~ x y ...:	wiggly line */
  
  	if (ismot(c = getch()))
  		return;
***************
*** 399,407
  #endif ANYBASESTR
  
  	if (ismot(c = getch()))
- #ifdef REPORTERRS
- 	{
- 		errmsg(EWARN, "\\D: Unsuitable delimiter for drawing function");
  		return;
  	}
  #else !REPORTERRS

--- 245,250 -----
  	/* ~ x y ...:	wiggly line */
  
  	if (ismot(c = getch()))
  		return;
  	delim = cbits(c);
  	type = cbits(getch());
***************
*** 403,412
  	{
  		errmsg(EWARN, "\\D: Unsuitable delimiter for drawing function");
  		return;
- 	}
- #else !REPORTERRS
- 		return;
- #endif REPORTERRS
  	delim = cbits(c);
  	type = cbits(getch());
  #ifdef REPORTERRS

--- 246,251 -----
  
  	if (ismot(c = getch()))
  		return;
  	delim = cbits(c);
  	type = cbits(getch());
  	for (i = 0; i < 50 ; i++) {
***************
*** 409,447
  #endif REPORTERRS
  	delim = cbits(c);
  	type = cbits(getch());
- #ifdef REPORTERRS
- 	switch(type) {
- 
- 	default:
- 		errmsg(EWARN, "\\D%c: unknown drawing function \"%c\"",
- 								type, type);
- 		break;
- 
- 	case DRAWLINE:
- 	case DRAWCIRCLE:
- 	case DRAWELLIPSE:
- 	case DRAWARC:
- 	case DRAWWIG:
- #ifdef GREMLIN
- 	case DRAWGREM:
- 	case DRAWTHICK:
- 	case DRAWLSTYLE:
- #endif GREMLIN
- #ifdef ANYBASESTR
- 	case DRAWBASESTR:
- #endif ANYBASESTR
- 
- 	/* do nothing -- only the default action is interesting!
- 	 * - req
- 	 */
- 	break;
- 
- 	}
- #endif REPORTERRS
- 
- #ifdef DXLIM
- 	for (i = 0; i < DXLIM/2 ; i++) {
- #else !DXLIM
  	for (i = 0; i < 50 ; i++) {
  #endif DXLIM
  #ifdef COMMENT

--- 248,253 -----
  		return;
  	delim = cbits(c);
  	type = cbits(getch());
  	for (i = 0; i < 50 ; i++) {
  		c = getch();
  		if (cbits(c) == delim)
***************
*** 443,452
  	for (i = 0; i < DXLIM/2 ; i++) {
  #else !DXLIM
  	for (i = 0; i < 50 ; i++) {
- #endif DXLIM
- #ifdef COMMENT
- 	/* } */  /* (brace is for bracket matching tool!) */
- #endif COMMENT
  		c = getch();
  		if (cbits(c) == delim)
  			break;

--- 249,254 -----
  	delim = cbits(c);
  	type = cbits(getch());
  	for (i = 0; i < 50 ; i++) {
  		c = getch();
  		if (cbits(c) == delim)
  			break;
***************
*** 472,482
  		else if (dy[i] < -MAXMOT)
  			dy[i] = -MAXMOT;
  	}
- #ifdef REPORTERRS
- 	if (cbits(c) != delim) {
- 		errmsg(EWARN, "\\D: more than %d parameters", i - 1);
- 	}
- #endif REPORTERRS
  	dfact = 1;
  	vflag = 0;
  #ifndef NROFF

--- 274,279 -----
  		else if (dy[i] < -MAXMOT)
  			dy[i] = -MAXMOT;
  	}
  	dfact = 1;
  	vflag = 0;
  #ifndef NROFF
***************
*** 536,544
  	for (j = 0; ; j++) {
  		if ((tabtab[j] & TMASK) == 0) {
  			if (x == savfc)
- #ifdef REPORTERRS
- 				errmsg(EWARN, "zero field width");
- #else !REPORTERRS
  				fprintf(stderr, "troff: zero field width.\n");
  #endif REPORTERRS
  			jj = 0;

--- 333,338 -----
  	for (j = 0; ; j++) {
  		if ((tabtab[j] & TMASK) == 0) {
  			if (x == savfc)
  				fprintf(stderr, "troff: zero field width.\n");
  			jj = 0;
  			goto rtn;
***************
*** 540,546
  				errmsg(EWARN, "zero field width");
  #else !REPORTERRS
  				fprintf(stderr, "troff: zero field width.\n");
- #endif REPORTERRS
  			jj = 0;
  			goto rtn;
  		}

--- 334,339 -----
  		if ((tabtab[j] & TMASK) == 0) {
  			if (x == savfc)
  				fprintf(stderr, "troff: zero field width.\n");
  			jj = 0;
  			goto rtn;
  		}
diff -rbc titroff/ni.c /distribution/dwb/text/troff.d/ni.c
*** titroff/ni.c	Fri Oct 31 19:13:42 1986
--- /distribution/dwb/text/troff.d/ni.c	Tue Oct 25 17:24:10 1983
***************
*** 1,3
  #include "tdef.h"
  
  /* You may want to change these names */

--- 1,4 -----
+ /*      @(#)ni.c	1.2     */
  #include "tdef.h"
  
  /* You may want to change these names */
***************
*** 3,15
  /* You may want to change these names */
  
  #ifndef NROFF
! char	termtab[NS] = FONTFILE;	/* rest added in ptinit() */
! char	fontfile[NS] = FONTFILE;	/* rest added in casefp() */
! #ifdef DESCHASNAME
! char	devname[10]	 = "default";	/* default typesetter */
! #else !DESCHASNAME
! char	devname[10]	 = "va";	/* default typesetter */
! #endif DESCHASNAME
  #endif
  char	obuf[OBUFSZ];	/* characters collected here for actual typesetter output */
  char	*obufp = obuf;

--- 4,12 -----
  /* You may want to change these names */
  
  #ifndef NROFF
! char	termtab[NS] = "/usr/lib/font";	/* rest added in ptinit() */
! char	fontfile[NS] = "/usr/lib/font";	/* rest added in casefp() */
! char	devname[12]	 = "aps";	/* default typesetter */
  #endif
  char	obuf[OBUFSZ];	/* characters collected here for actual typesetter output */
  char	*obufp = obuf;
***************
*** 29,37
  	PAIR('s', 'b'),
  	PAIR('c', '.'),
  	PAIR('$', '$'),
- #ifdef WARNLEVELREG
- 	PAIR('w', 'l'),		/* warning level */
- #endif WARNLEVELREG
  };
  
  

--- 26,31 -----
  	PAIR('s', 'b'),
  	PAIR('c', '.'),
  	PAIR('$', '$'),
  };
  
  
***************
*** 91,105
  casecc(), casec2(), caseem(), caseaf(), casehw(), casemc(), casepm(),
  casecu(), casepi(), caserr(), caseuf(), caseie(), caseel(), casepc(),
  caseht(), casecf(), casesy();
- #ifdef ROTATEPAGE
- extern caserp();	/* rotate page -- req */
- #endif ROTATEPAGE
- #ifdef FONTFAMILIES
- extern caseff();	/* font family -- req */
- #endif FONTFAMILIES
- #ifdef BLANKSMACRO
- extern casebm();	/* blanks macro -- req */
- #endif BLANKSMACRO
  
  #ifdef COMMENT
  /* the comments are because we can't initialise a union in C

--- 85,90 -----
  casecc(), casec2(), caseem(), caseaf(), casehw(), casemc(), casepm(),
  casecu(), casepi(), caserr(), caseuf(), caseie(), caseel(), casepc(),
  caseht(), casecf(), casesy();
  
  struct contab {
  	int	rq;
***************
*** 101,111
  extern casebm();	/* blanks macro -- req */
  #endif BLANKSMACRO
  
- #ifdef COMMENT
- /* the comments are because we can't initialise a union in C
-  * - req
-  */
- #endif COMMENT
  struct contab {
  	int	rq;
  	/*

--- 86,91 -----
  casecu(), casepi(), caserr(), caseuf(), caseie(), caseel(), casepc(),
  caseht(), casecf(), casesy();
  
  struct contab {
  	int	rq;
  	/*
***************
*** 202,217
  	PAIR('h', 't'), caseht,
  	PAIR('c', 'f'), casecf,
  	PAIR('s', 'y'), casesy,
! 	PAIR('!', 0), casesy,	/* synonym for .sy */
! #ifdef ROTATEPAGE
! 	PAIR('r', 'p'), caserp,	/* .rp -- rotate page */
! #endif ROTATEPAGE
! #ifdef FONTFAMILIES
! 	PAIR('f', 'f'), caseff, /*.ff -- font family */
! #endif FONTFAMILIES
! #ifdef BLANKSMACRO
! 	PAIR('b', 'm'), casebm, /* .bl xx -- blanks macro */
! #endif BLANKSMACRO
  };
  
  

--- 182,188 -----
  	PAIR('h', 't'), caseht,
  	PAIR('c', 'f'), casecf,
  	PAIR('s', 'y'), casesy,
! /*	PAIR('!', 0), casesy,	/* synonym for .sy */
  };
  
  
***************
*** 268,274
  int	c2	 = '\'';
  int	ohc	 = OHC;
  int	tdelim	 = IMP;
! int	hyf	 = 1;
  int	hyoff	 = 0;
  int	un1	 = -1;
  int	tabc	 = 0;

--- 239,245 -----
  int	c2	 = '\'';
  int	ohc	 = OHC;
  int	tdelim	 = IMP;
! int	hyf	 = 0;
  int	hyoff	 = 0;
  int	un1	 = -1;
  int	tabc	 = 0;
***************
*** 323,325
  
  char	blockxxx[EVSPARE]	 = {
  	0};

--- 294,298 -----
  
  char	blockxxx[EVSPARE]	 = {
  	0};
+ 
+ 
diff -rbc titroff/nii.c /distribution/dwb/text/troff.d/nii.c
*** titroff/nii.c	Mon Oct 13 15:30:32 1986
--- /distribution/dwb/text/troff.d/nii.c	Fri Sep  9 18:46:14 1983
***************
*** 1,3
  #include "tdef.h"
  #ifdef NROFF
  #include "tw.h"

--- 1,4 -----
+ /*      @(#)nii.c	1.1     */
  #include "tdef.h"
  #ifdef NROFF
  #include "tw.h"
***************
*** 129,147
  int	dotT;
  char	*unlkp;
  int	no_out;
- #ifdef LOCALWARN
- #include "local.h"
- #ifdef WARNLEVELREG
- int	warninglevel = WARN_ONCE;
- #else !WARNLEVELREG
- /* use v.nl instead, with the same values */
- #endif WARNLEVELREG
-        /* warninglevel is:
- 	* 0 -- no warnings
- 	* 1 -- 1 warning the 1st time a non-standard feature is used
- 	* 2 -- warn about every non-standard feature
- 	*
- 	* these are defined in local.h
- 	* REQ
- 	*/
- #endif LOCALWARN

--- 130,132 -----
  int	dotT;
  char	*unlkp;
  int	no_out;
diff -rbc titroff/s.h /distribution/dwb/text/troff.d/s.h
*** titroff/s.h	Sun Feb 21 15:07:45 1982
--- /distribution/dwb/text/troff.d/s.h	Fri Sep  9 18:46:16 1983
***************
*** 1,3
  struct s {
  	int nargs;
  	struct s *pframe;

--- 1,4 -----
+ /*      @(#)s.h	1.1     */
  struct s {
  	int nargs;
  	struct s *pframe;
diff -rbc titroff/suftab.c /distribution/dwb/text/troff.d/suftab.c
*** titroff/suftab.c	Wed Jan 11 10:26:33 1984
--- /distribution/dwb/text/troff.d/suftab.c	Fri Sep  9 18:46:26 1983
***************
*** 1,3
  /*
   * Suffix table
   */

--- 1,4 -----
+ /*      @(#)suftab.c	1.1     */
  /*
   * Suffix table
   */
diff -rbc titroff/t10.c /distribution/dwb/text/troff.d/t10.c
*** titroff/t10.c	Thu Oct 23 18:29:01 1986
--- /distribution/dwb/text/troff.d/t10.c	Fri Sep  9 18:46:35 1983
***************
*** 1,3
  #include "tdef.h"
  extern
  #include "d.h"

--- 1,4 -----
+ /*      @(#)t10.c	1.1     */
  #include "tdef.h"
  extern
  #include "d.h"
***************
*** 13,22
  #include "ext.h"
  int	vpos	 = 0;	/* absolute vertical position on page */
  int	hpos	 = 0;	/* ditto horizontal */
- #ifdef PAPERSIZEREG
- int	paperlength = 0;	/* from DESC */
- int	paperwidth = 0;		/* ditto */
- #endif PAPERSIZEREG
  
  #define	T_IESC	16
  

--- 14,19 -----
  #include "ext.h"
  int	vpos	 = 0;	/* absolute vertical position on page */
  int	hpos	 = 0;	/* ditto horizontal */
  
  #define	T_IESC	16
  
***************
*** 71,101
  	/* read in resolution, size info, font info, etc.
  	/* and set params
  	*/
- #ifdef USEFONTPATH
- 	extern char *fontpath;	/* from t6.c */
- 	extern char *followpath();	/* in local.c */
- 	extern char *strcpy();
- 
- 	if (fontpath && *fontpath) {
- 		p = followpath(fontpath, "DESC.out", 0);
- 		if (!p || !*p) {
- #ifdef REPORTERRS
- 			errmsg(done3, 1,
- 				"Can't find DESC.out in path %s", fontpath);
- #else !REPORTERRS
- 			fprintf(stderr,
- 				"troff: can't find DESC.out in path %s",
- 								fontpath);
- 			done3(1);
- #endif REPORTERRS
- 		} else {
- 			(void) strcpy(termtab, p);
- 			/* fits because both termtab and
- 			 * local.c:followpath().result are NS chars long,
- 			 * and followpath checks
- 			 */
- 		}
- 	} else {
  		strcat(termtab, "/dev");
  		strcat(termtab, devname);
  		strcat(termtab, "/DESC.out");

--- 68,73 -----
  	/* read in resolution, size info, font info, etc.
  	/* and set params
  	*/
  	strcat(termtab, "/dev");
  	strcat(termtab, devname);
  	strcat(termtab, "/DESC.out");	/* makes "..../devXXX/DESC.out" */
***************
*** 98,108
  	} else {
  		strcat(termtab, "/dev");
  		strcat(termtab, devname);
- 		strcat(termtab, "/DESC.out");
- 	}
- #else !USEFONTPATH
- 	strcat(termtab, "/dev");
- 	strcat(termtab, devname);
  	strcat(termtab, "/DESC.out");	/* makes "..../devXXX/DESC.out" */
  #endif USEFONTPATH
  	if ((fin = open(termtab, 0)) < 0) {

--- 70,75 -----
  	*/
  	strcat(termtab, "/dev");
  	strcat(termtab, devname);
  	strcat(termtab, "/DESC.out");	/* makes "..../devXXX/DESC.out" */
  	if ((fin = open(termtab, 0)) < 0) {
  		fprintf(stderr, "troff: can't open tables for %s\n", termtab);
***************
*** 104,110
  	strcat(termtab, "/dev");
  	strcat(termtab, devname);
  	strcat(termtab, "/DESC.out");	/* makes "..../devXXX/DESC.out" */
- #endif USEFONTPATH
  	if ((fin = open(termtab, 0)) < 0) {
  #ifdef REPORTERRS
  		errmsg(done3, 1, "can't open %s (table for device %s)", termtab, devname);

--- 71,76 -----
  	strcat(termtab, "/dev");
  	strcat(termtab, devname);
  	strcat(termtab, "/DESC.out");	/* makes "..../devXXX/DESC.out" */
  	if ((fin = open(termtab, 0)) < 0) {
  		fprintf(stderr, "troff: can't open tables for %s\n", termtab);
  		done3(1);
***************
*** 106,114
  	strcat(termtab, "/DESC.out");	/* makes "..../devXXX/DESC.out" */
  #endif USEFONTPATH
  	if ((fin = open(termtab, 0)) < 0) {
- #ifdef REPORTERRS
- 		errmsg(done3, 1, "can't open %s (table for device %s)", termtab, devname);
- #else !REPORTERRS
  		fprintf(stderr, "troff: can't open tables for %s\n", termtab);
  		done3(1);
  #endif REPORTERRS

--- 72,77 -----
  	strcat(termtab, devname);
  	strcat(termtab, "/DESC.out");	/* makes "..../devXXX/DESC.out" */
  	if ((fin = open(termtab, 0)) < 0) {
  		fprintf(stderr, "troff: can't open tables for %s\n", termtab);
  		done3(1);
  	}
***************
*** 111,117
  #else !REPORTERRS
  		fprintf(stderr, "troff: can't open tables for %s\n", termtab);
  		done3(1);
- #endif REPORTERRS
  	}
  #ifndef DMBTEST
  	if (read(fin, &dev, sizeof(struct dev )) != sizeof (struct dev)) {

--- 74,79 -----
  	if ((fin = open(termtab, 0)) < 0) {
  		fprintf(stderr, "troff: can't open tables for %s\n", termtab);
  		done3(1);
  	}
  	read(fin, &dev, sizeof(struct dev ));
  	Inch = dev.res;
***************
*** 113,128
  		done3(1);
  #endif REPORTERRS
  	}
- #ifndef DMBTEST
- 	if (read(fin, &dev, sizeof(struct dev )) != sizeof (struct dev)) {
- #ifdef REPORTERRS
- 		errmsg(done3, 1, "can't read in device structure (%d bytes)", sizeof (struct dev));
- #else !REPORTERRS
- 		fprintf(stderr, "troff: can't read in device structure\n");
- 		done3(1);
- #endif REPORTERRS
- 	}
- #else DMBTEST
  	read(fin, &dev, sizeof(struct dev ));
  #endif DMBTEST
  	Inch = dev.res;

--- 75,80 -----
  		fprintf(stderr, "troff: can't open tables for %s\n", termtab);
  		done3(1);
  	}
  	read(fin, &dev, sizeof(struct dev ));
  	Inch = dev.res;
  	Hor = dev.hor;
***************
*** 124,130
  	}
  #else DMBTEST
  	read(fin, &dev, sizeof(struct dev ));
- #endif DMBTEST
  	Inch = dev.res;
  	Hor = dev.hor;
  	Vert = dev.vert;

--- 76,81 -----
  		done3(1);
  	}
  	read(fin, &dev, sizeof(struct dev ));
  	Inch = dev.res;
  	Hor = dev.hor;
  	Vert = dev.vert;
***************
*** 130,150
  	Vert = dev.vert;
  	Unitwidth = dev.unitwidth;
  	nfonts = dev.nfonts;
- #ifdef CHECKNFONTS
- 	if (nfonts > NFONT) {
- #ifdef REPORTERRS
- 		errmsg(done3, 2, "too many pre-loaded fonts (%d, max %d); check DESC & makedev.c", nfonts, NFONT);
- 		/* should be done3 rather than edone, as we don't want to
- 		 * continue.  I was wrong when I put the CHECKNFONTS in, by
- 		 * virtue of cribbing from bwk...
- 		 * - req
- 		 */
- #else !REPORTERRS
- 		fprintf(stderr, "troff: too many pre-loaded fonts (%d, max %d); check DESC & makedev.c\n", nfonts, NFONT);
- 		edone(04);  /* is this right ?? */
- #endif REPORTERRS
- 	}
- #endif CHECKNFONTS
  	nsizes = dev.nsizes;
  	nchtab = dev.nchtab;
  #ifdef PAPERSIZEREG

--- 81,86 -----
  	Vert = dev.vert;
  	Unitwidth = dev.unitwidth;
  	nfonts = dev.nfonts;
  	nsizes = dev.nsizes;
  	nchtab = dev.nchtab;
  	filebase = setbrk(dev.filesize + 2*EXTRAFONT);	/* enough room for whole file */
***************
*** 147,159
  #endif CHECKNFONTS
  	nsizes = dev.nsizes;
  	nchtab = dev.nchtab;
- #ifdef PAPERSIZEREG
- 	paperlength = dev.paperlength;
- 	paperwidth = dev.paperwidth;
- #endif PAPERSIZEREG
- #ifdef DESCHASNAME
- 	(void) strncpy(devname, dev.dname, sizeof(dev.dname) - 1);
- #endif DESCHASNAME
  	filebase = setbrk(dev.filesize + 2*EXTRAFONT);	/* enough room for whole file */
  #ifdef REPORTERRS
  	/* Read in pre-loaded fonts and gunk all at once */

--- 83,88 -----
  	nfonts = dev.nfonts;
  	nsizes = dev.nsizes;
  	nchtab = dev.nchtab;
  	filebase = setbrk(dev.filesize + 2*EXTRAFONT);	/* enough room for whole file */
  	read(fin, filebase, dev.filesize);	/* all at once */
  	pstab = (short *) filebase;
***************
*** 155,166
  	(void) strncpy(devname, dev.dname, sizeof(dev.dname) - 1);
  #endif DESCHASNAME
  	filebase = setbrk(dev.filesize + 2*EXTRAFONT);	/* enough room for whole file */
- #ifdef REPORTERRS
- 	/* Read in pre-loaded fonts and gunk all at once */
- 	if (read(fin, filebase, dev.filesize) != dev.filesize) {
- 		errmsg(done3, 3, "Internal error: Failed to read %d bytes from %s at __FILE__:__LINE__", termtab, dev.filesize);
- 	}
- #else !REPORTERRS
  	read(fin, filebase, dev.filesize);	/* all at once */
  #endif REPORTERRS
  	pstab = (short *) filebase;

--- 84,89 -----
  	nsizes = dev.nsizes;
  	nchtab = dev.nchtab;
  	filebase = setbrk(dev.filesize + 2*EXTRAFONT);	/* enough room for whole file */
  	read(fin, filebase, dev.filesize);	/* all at once */
  	pstab = (short *) filebase;
  	chtab = pstab + nsizes + 1;
***************
*** 162,168
  	}
  #else !REPORTERRS
  	read(fin, filebase, dev.filesize);	/* all at once */
- #endif REPORTERRS
  	pstab = (short *) filebase;
  	chtab = pstab + nsizes + 1;
  	chname = (char *) (chtab + dev.nchtab);

--- 85,90 -----
  	nchtab = dev.nchtab;
  	filebase = setbrk(dev.filesize + 2*EXTRAFONT);	/* enough room for whole file */
  	read(fin, filebase, dev.filesize);	/* all at once */
  	pstab = (short *) filebase;
  	chtab = pstab + nsizes + 1;
  	chname = (char *) (chtab + dev.nchtab);
***************
*** 218,230
    */
  }
  
- #ifdef COMMENT
- /* Really, all of this DESC.out stuff isn't done properly at all. 
-  * The link between special names in troff & the post-processors is an
-  * almighty hack.  But at least it works.
-  * -req
-  */
- #endif COMMENT
  specnames()
  {
  	static struct {

--- 140,145 -----
    */
  }
  
  specnames()
  {
  	static struct {
***************
*** 252,263
  	};
  	int	i;
  
- #ifdef COMMENT
- 	/* could moan about not having important characters here, perhaps.
- 	 * but that's better left to makedev (which doesn't do it either)
- 	 *- req
- 	 */
- #endif COMMENT
  	for (i = 0; spnames[i].n; i++)
  		*spnames[i].n = findch(spnames[i].v);
  }

--- 167,172 -----
  	};
  	int	i;
  
  	for (i = 0; spnames[i].n; i++)
  		*spnames[i].n = findch(spnames[i].v);
  }
***************
*** 445,454
  			vpos += dy + dy2;
  			break;
  		case DRAWWIG:	/* wiggly line */
- #ifdef GREMLIN
- 		case DRAWGREM:	/* gremlin - do both in one switch... */
- 			fprintf(ptid, "D%c %d %d", cbits(pi[1]), dx, dy);
- #else !GREMLIN
  			fprintf(ptid, "D%c %d %d", DRAWWIG, dx, dy);
  #endif GREMLIN
  			w = 0;

--- 354,359 -----
  			vpos += dy + dy2;
  			break;
  		case DRAWWIG:	/* wiggly line */
  			fprintf(ptid, "D%c %d %d", DRAWWIG, dx, dy);
  			w = 0;
  			hpos += dx;
***************
*** 450,456
  			fprintf(ptid, "D%c %d %d", cbits(pi[1]), dx, dy);
  #else !GREMLIN
  			fprintf(ptid, "D%c %d %d", DRAWWIG, dx, dy);
- #endif GREMLIN
  			w = 0;
  			hpos += dx;
  			vpos += dy;

--- 355,360 -----
  			break;
  		case DRAWWIG:	/* wiggly line */
  			fprintf(ptid, "D%c %d %d", DRAWWIG, dx, dy);
  			w = 0;
  			hpos += dx;
  			vpos += dy;
***************
*** 454,465
  			w = 0;
  			hpos += dx;
  			vpos += dy;
- #ifdef COMMENT
- 			/* no check for overflow here, but probably
- 			 * OK because setdraw() checks.
- 			 * - req
- 			 */
- #endif COMMENT
  			for (n = 5; cbits(pi[n]) != '.'; n += 2) {
  				dx = absmot(pi[n]);
  				if (isnmot(pi[n]))

--- 358,363 -----
  			w = 0;
  			hpos += dx;
  			vpos += dy;
  			for (n = 5; cbits(pi[n]) != '.'; n += 2) {
  				dx = absmot(pi[n]);
  				if (isnmot(pi[n]))
***************
*** 473,490
  			}
  			fprintf(ptid, "\n");
  			break;
- #ifdef GREMLIN
- 		case DRAWTHICK:		/* line thickness */
- 		case DRAWLSTYLE:	/* line style mask */
- 			fprintf(ptid, "D%c %d\n", dx);
- 			break;
- #endif GREMLIN
- #ifdef REPORTERRS
- 		/* a warning is printed by setdraw, so we don't need one
- 		 * here.
- 		 * - req
- 		 */
- #endif REPORTERRS
  		}
  #ifdef MOVEAFTERDRAW
  		/* tell the post-processor where we are... */

--- 371,376 -----
  			}
  			fprintf(ptid, "\n");
  			break;
  		}
  		for (n = 3; cbits(pi[n]) != '.'; n++)
  			;
***************
*** 486,495
  		 */
  #endif REPORTERRS
  		}
- #ifdef MOVEAFTERDRAW
- 		/* tell the post-processor where we are... */
- 		fprintf(ptid, "H%d\nV%d\n", hpos, vpos);
- #endif MOVEAFTERDRAW
  		for (n = 3; cbits(pi[n]) != '.'; n++)
  			;
  		outsize = n + 1;

--- 372,377 -----
  			fprintf(ptid, "\n");
  			break;
  		}
  		for (n = 3; cbits(pi[n]) != '.'; n++)
  			;
  		outsize = n + 1;
***************
*** 584,592
  		return;
  	flusho();
  	fprintf(ptid, "p%d\n", n);	/* new page */
- #ifdef ROTATEPAGE
- 	ptpangle();	/* rotated page angle, local .c --- req */
- #endif ROTATEPAGE
  	ptps();
  	ptfont();
  }

--- 466,471 -----
  		return;
  	flusho();
  	fprintf(ptid, "p%d\n", n);	/* new page */
  	ptps();
  	ptfont();
  }
diff -rbc titroff/t6.c /distribution/dwb/text/troff.d/t6.c
*** titroff/t6.c	Wed Nov 19 21:31:41 1986
--- /distribution/dwb/text/troff.d/t6.c	Fri Sep  9 18:46:43 1983
***************
*** 1,3
  #include "tdef.h"
  extern
  #include "d.h"

--- 1,4 -----
+ /*      @(#)t6.c	1.2     */
  #include "tdef.h"
  extern
  #include "d.h"
***************
*** 23,33
  int	bdtab[NFONT+1];
  int	sbold = 0;
  
- #ifdef COMMENT
- /* width() gets the width of drawing functions wrong.
-  * - req
-  */
- #endif COMMENT
  width(j)
  tchar j;
  {

--- 24,29 -----
  int	bdtab[NFONT+1];
  int	sbold = 0;
  
  width(j)
  tchar j;
  {
***************
*** 47,62
  		k = -widthp;
  		goto rtn;
  	}
- #ifdef WIDTHOFDRAWFIX
- 	if (i == DRAW) {
- 		/* work out the width of the drawing function...
- 		 * - req
- 		 */
- 		 /* unfortunately, we can't do this, as we don't have
- 		  * enough information...
- 		  */
- 	}
- #endif WIDTHOFDRAWFIX
  	if (i == PRESC)
  		i = eschar;
  	else if (i == ohc || iscontrol(i))

--- 43,48 -----
  		k = -widthp;
  		goto rtn;
  	}
  	if (i == PRESC)
  		i = eschar;
  	else if (i == ohc || iscontrol(i))
***************
*** 190,198
  	extern int	nchtab;
  
  	s = temp;
- #ifdef COMMENT
- 	/* should use getrq() here, but that returns a tchar */
- #endif COMMENT
  	if ((*s++ = getach()) == 0 || (*s++ = getach()) == 0)
  #ifdef REPORTERRS
  	{

--- 176,181 -----
  	extern int	nchtab;
  
  	s = temp;
  	if ((*s++ = getach()) == 0 || (*s++ = getach()) == 0)
  		return(0);
  	*s = '\0';
***************
*** 194,203
  	/* should use getrq() here, but that returns a tchar */
  #endif COMMENT
  	if ((*s++ = getach()) == 0 || (*s++ = getach()) == 0)
- #ifdef REPORTERRS
- 	{
- 		errmsg(EWARN, "\\(xx -- need 2 characters after (, only got %d",
- 					s - temp);
  		return(0);
  	}
  #else !REPORTERRS

--- 177,182 -----
  
  	s = temp;
  	if ((*s++ = getach()) == 0 || (*s++ = getach()) == 0)
  		return(0);
  	*s = '\0';
  	for (j = 0; j < nchtab; j++)
***************
*** 199,208
  		errmsg(EWARN, "\\(xx -- need 2 characters after (, only got %d",
  					s - temp);
  		return(0);
- 	}
- #else !REPORTERRS
- 		return(0);
- #endif REPORTERRS
  	*s = '\0';
  	for (j = 0; j < nchtab; j++)
  		if (strcmp(&chname[chtab[j]], temp) == 0)

--- 178,183 -----
  	s = temp;
  	if ((*s++ = getach()) == 0 || (*s++ = getach()) == 0)
  		return(0);
  	*s = '\0';
  	for (j = 0; j < nchtab; j++)
  		if (strcmp(&chname[chtab[j]], temp) == 0)
***************
*** 207,215
  	for (j = 0; j < nchtab; j++)
  		if (strcmp(&chname[chtab[j]], temp) == 0)
  			return(j + 128 | chbits);
- #ifdef REPORTERRS
- 	errmsg(EWARN, "Special character \\(%s doesn't exist", s);
- #endif REPORTERRS
  	return(0);
  }
  

--- 182,187 -----
  	for (j = 0; j < nchtab; j++)
  		if (strcmp(&chname[chtab[j]], temp) == 0)
  			return(j + 128 | chbits);
  	return(0);
  }
  
***************
*** 226,235
  {
  	register k;
  
- #ifdef RIBSFIX
- 	/* if S has been unmounted (overwritten), smnt set to zero... */
- 	if ((k = i - '0') >= 0 && k <= nfonts && (smnt && k != smnt))
- #else !RIBSFIX
  	if ((k = i - '0') >= 0 && k <= nfonts && k < smnt)
  #endif RIBSFIX
  		return(k);

--- 198,203 -----
  {
  	register k;
  
  	if ((k = i - '0') >= 0 && k <= nfonts && k < smnt)
  		return(k);
  	for (k = 0; fontlab[k] != i; k++)
***************
*** 231,237
  	if ((k = i - '0') >= 0 && k <= nfonts && (smnt && k != smnt))
  #else !RIBSFIX
  	if ((k = i - '0') >= 0 && k <= nfonts && k < smnt)
- #endif RIBSFIX
  		return(k);
  	for (k = 0; fontlab[k] != i; k++)
  		if (k > nfonts)

--- 199,204 -----
  	register k;
  
  	if ((k = i - '0') >= 0 && k <= nfonts && k < smnt)
  		return(k);
  	for (k = 0; fontlab[k] != i; k++)
  		if (k > nfonts)
***************
*** 251,265
  		i = inumb(&apts);	/* this is a disaster for fractional point sizes */
  		noscale = 0;
  		if (nonumb)
- #ifdef REPORTERRS
- 		{
- 			tchar nextc = getch();
- 
- 			if (cbits(nextc) == '\n') {
- 				errmsg(".ps: newline unexpected");
- 			} else {
- 				errmsg(EWARN, ".ps: bad expression from \"%s\" ignored", tchartos(nextc));
- 			}
  			return;
  		}
  #else !REPORTERRS

--- 218,223 -----
  		i = inumb(&apts);	/* this is a disaster for fractional point sizes */
  		noscale = 0;
  		if (nonumb)
  			return;
  	}
  	casps1(i);
***************
*** 262,271
  			}
  			return;
  		}
- #else !REPORTERRS
- 			return;
- #endif REPORTERRS
- 	}
  	casps1(i);
  }
  

--- 220,225 -----
  		if (nonumb)
  			return;
  	}
  	casps1(i);
  }
  
***************
*** 283,294
  }
  
  
- #ifdef COMMENT
- /* Should we moan about unfound sizes?  Plethora of moans from eqn, I expect!
-  * As the effect is already documented, let's not.
-  * - req
-  */
- #endif COMMENT
  findps(i)
  register int	i;
  {

--- 237,242 -----
  }
  
  
  findps(i)
  register int	i;
  {
***************
*** 294,305
  {
  	register j, k;
  
! 	for (j = 0; i > (k = pstab[j]); j++)
! 		if (!k) {
! 			k = pstab[--j];
! 			break;
! 		}
! 	return(k);
  }
  
  

--- 242,254 -----
  {
  	register j, k;
  
! 	for (j=k=0 ; pstab[j]!=0 ; j++)
! 		if ( abs(pstab[j]-i) < abs(pstab[k]-i) )
! 			k = j ;
! 
! 	if ( pstab[k] != i )
! 		fprintf(stderr,"troff: asked for size %d, got %d\n",i,pstab[k]) ;
! 	return(pstab[k]);
  }
  
  
***************
*** 320,332
  }
  
  
- #ifdef COMMENT
- /* should really check here more carefully.  It would be nice to warn the
-  * user that \s106 is a ten-point "6", or that \s47 is a four-point 7.
-  * I will if I get a few more minutes tonight.
-  * - req
-  */
- #endif COMMENT
  setps()
  {
  	register i, j;

--- 269,274 -----
  }
  
  
  setps()
  {
  	register i, j;
***************
*** 349,366
  			i = 10 * i + j;
  			ch = 0;
  		}
- #ifdef REPORTERRS
- 		/* warn if the next input char is a digit... */
- 		if (i >= 3 || (j >= 0 && j <= 9)) { /* where's isdigit() !? */
- 			j = cbits(ch = getch()) - '0';
- 		}
- 		if ((reporterrs & LERR_PSNUMWARN) && j >= 0 && j <= 9) {
- 			/* next char is a digit.  Probably an error! */
- 			/* we know it's a digit, so no tchartos() needed */
- 			errmsg(EWARN, "\\s%d%c is a %d-point %c",
- 			i, j + '0', i, j + '0');
- 		}
- #endif REPORTERRS
  		casps1(i);
  	}
  #ifdef REPORTERRS

--- 291,296 -----
  			i = 10 * i + j;
  			ch = 0;
  		}
  		casps1(i);
  	}
  }
***************
*** 363,376
  #endif REPORTERRS
  		casps1(i);
  	}
- #ifdef REPORTERRS
- 	else
- 	{
- 		/* error -- ignored */
- 		i += '0';
- 		errmsg(EWARN, "\\s%s ignored%s", tchartos(i), (cbits(i) == 'P') ? " (use \\s0 for previous size)" : " ");
- 	}
- #endif REPORTERRS
  }
  
  

--- 293,298 -----
  		}
  		casps1(i);
  	}
  }
  
  
***************
*** 379,396
  	int n;
  	tchar c;
  
- #ifdef REPORTERRS
- 	tchar delim1, delim2;
- 
- 	if (cbits((delim1 = getch())) == '\n') {
- 		errmsg(EWARN, "\\H: newline unexpected");
- 		return;
- 	} else if (ismot(delim1)) {
- 		errmsg(EWARN, "\\H: Unsuitable delimiter \"%s\"",
- 							tchartos(delim1));
- 		return;
- 	}
- #else !REPORTERRS
  	getch();
  #endif REPORTERRS
  	n = inumb(&apts);

--- 301,306 -----
  	int n;
  	tchar c;
  
  	getch();
  	n = inumb(&apts);
  	getch();
***************
*** 392,398
  	}
  #else !REPORTERRS
  	getch();
- #endif REPORTERRS
  	n = inumb(&apts);
  #ifdef REPORTERRS
  	if (cbits(delim2 = getch()) != cbits(delim1)) {

--- 302,307 -----
  	tchar c;
  
  	getch();
  	n = inumb(&apts);
  	getch();
  	if (n == 0 || nonumb)
***************
*** 394,408
  	getch();
  #endif REPORTERRS
  	n = inumb(&apts);
- #ifdef REPORTERRS
- 	if (cbits(delim2 = getch()) != cbits(delim1)) {
- 		if (cbits(delim2) == '\n') {
- 			errmsg(EWARN, "\\H: expected trailing delim \"%s\", found newline", tchartos(delim1));
- 		} else {
- 			errmsg(EWARN, "\\H: expected close delim \"%s\", found \"%s\"", tchartos(delim1), tchartos(delim2));
- 		}
- 	}
- #else !REPORTERRS
  	getch();
  #endif REPORTERRS
  	if (n == 0 || nonumb)

--- 303,308 -----
  
  	getch();
  	n = inumb(&apts);
  	getch();
  	if (n == 0 || nonumb)
  		n = apts;	/* does this work? */
***************
*** 404,410
  	}
  #else !REPORTERRS
  	getch();
- #endif REPORTERRS
  	if (n == 0 || nonumb)
  		n = apts;	/* does this work? */
  	c = CHARHT;

--- 304,309 -----
  	getch();
  	n = inumb(&apts);
  	getch();
  	if (n == 0 || nonumb)
  		n = apts;	/* does this work? */
  	c = CHARHT;
***************
*** 418,431
  	int n;
  	tchar c;
  
- #ifdef REPORTERRS
- 	tchar delim1, delim2;
- 
- 	if (cbits(delim1 = getch()) == '\n') {
- 		errmsg(EWARN, "\\S: newline unexpected");
- 		return;
- 	}
- #else !REPORTERRS
  	getch();
  #endif REPORTERRS
  	n = 0;

--- 317,322 -----
  	int n;
  	tchar c;
  
  	getch();
  	n = 0;
  	n = inumb(&n);
***************
*** 427,433
  	}
  #else !REPORTERRS
  	getch();
- #endif REPORTERRS
  	n = 0;
  	n = inumb(&n);
  #ifdef REPORTERRS

--- 318,323 -----
  	tchar c;
  
  	getch();
  	n = 0;
  	n = inumb(&n);
  	getch();
***************
*** 430,444
  #endif REPORTERRS
  	n = 0;
  	n = inumb(&n);
- #ifdef REPORTERRS
- 	if (cbits(delim2 = getch()) != cbits(delim1)) {
- 		if (cbits(delim2) == '\n') {
- 			errmsg(EWARN, "\\S: expected trailing delim \"%s\", found newline", tchartos(delim1));
- 		} else {
- 			errmsg(EWARN, "\\S: expected close delim \"%s\", found \"%s\"", tchartos(delim1), tchartos(delim2));
- 		}
- 	}
- #else !REPORTERRS
  	getch();
  #endif REPORTERRS
  	if (nonumb)

--- 320,325 -----
  	getch();
  	n = 0;
  	n = inumb(&n);
  	getch();
  	if (nonumb)
  		n = 0;
***************
*** 440,446
  	}
  #else !REPORTERRS
  	getch();
- #endif REPORTERRS
  	if (nonumb)
  		n = 0;
  	c = SLANT;

--- 321,326 -----
  	n = 0;
  	n = inumb(&n);
  	getch();
  	if (nonumb)
  		n = 0;
  	c = SLANT;
***************
*** 470,501
  		j = font1;
  		goto s0;
  	}
- #ifdef RIBSFIX
- 	/* R I B & S are no longer names of specific fonts;
- 	 * they're synonyms for given font positions.  This was always how most
- 	 * people thought of them in any case, so it's easier to change it than
- 	 * to tell them the (old) truth...
- 	 * REQ
- 	 */
- 	switch (i) {
- 		case 'R':	/* Relative Roman */
- 			i = '1';
- 			break;
- 		case 'I':	/* Relative Italic */
- 			i = '2';
- 			break;
- 		case 'B':	/* Relative Bold */
- 			i = '3';
- 			break;
- 		case 'X':	/* Bold Italic (ugh, 2-char names...) */
- 			i = '4';
- 			break;
- 		case 'S':	/* Special (meaningless) */
- 			if (smnt)
- 				return;	/* can't change to Special font */
- 		/* default: fall through... */
- 	}
- #else !RIBSFIX
  	if (i == 'S' || i == '0')
  		return;
  #endif RIBSFIX

--- 350,355 -----
  		j = font1;
  		goto s0;
  	}
  	if (i == 'S' || i == '0')
  		return;
  	if ((j = findft(i)) == -1)
***************
*** 498,504
  #else !RIBSFIX
  	if (i == 'S' || i == '0')
  		return;
- #endif RIBSFIX
  	if ((j = findft(i)) == -1)
  		if ((j = setfp(0, i, 0)) == -1)	/* try to put it in position 0 */
  			return;

--- 352,357 -----
  	}
  	if (i == 'S' || i == '0')
  		return;
  	if ((j = findft(i)) == -1)
  		if ((j = setfp(0, i, 0)) == -1)	/* try to put it in position 0 */
  			return;
***************
*** 519,527
  
  	base = v.st = v.sb = wid = v.ct = 0;
  	if (ismot(i = getch()))
- #ifdef REPORTERRS
- 	{
- 		errmsg(EWARN, "\\w: unsuitable delimiter \"%s\"", tchartos(i));
  		return;
  	}
  #else !REPORTERRS

--- 372,377 -----
  
  	base = v.st = v.sb = wid = v.ct = 0;
  	if (ismot(i = getch()))
  		return;
  	delim = cbits(i);
  	savhp = v.hp;
***************
*** 523,532
  	{
  		errmsg(EWARN, "\\w: unsuitable delimiter \"%s\"", tchartos(i));
  		return;
- 	}
- #else !REPORTERRS
- 		return;
- #endif REPORTERRS
  	delim = cbits(i);
  	savhp = v.hp;
  	savpinchar = pinchar;	/* XXX */

--- 373,378 -----
  	base = v.st = v.sb = wid = v.ct = 0;
  	if (ismot(i = getch()))
  		return;
  	delim = cbits(i);
  	savhp = v.hp;
  	savpinchar = pinchar;	/* XXX */
***************
*** 559,569
  		if ((k = base + em) > v.st)
  			v.st = k;
  	}
- #ifdef REPORTERRS
- 	if (cbits(i) != delim) {
- 		errmsg(EWARN, "\\w: no trailing delimiter found to match \"%s\"", tchartos(i));
- 	}
- #endif REPORTERRS
  	nform = 0;
  	setn1(wid);
  	v.hp = savhp;

--- 405,410 -----
  		if ((k = base + em) > v.st)
  			v.st = k;
  	}
  	nform = 0;
  	setn1(wid);
  	v.hp = savhp;
***************
*** 602,616
  	register short j, n;
  	tchar i;
  
- #ifdef REPORTERRS
- 	tchar delim1, delim2;
- 
- 	if ((delim1 = cbits(getch())) == '\n') {
- 		errmsg(EWARN, "\\h: newline unexpected");
- 		return;
- 	} else if (ismot(delim1)) {
- 		errmsg(EWARN, "\\h: \"%s\" unsuitable delim", tchartos(delim1));
- 	}
  	j = HOR;
  #else !REPORTERRS
  	j = HOR;

--- 443,448 -----
  	register short j, n;
  	tchar i;
  
  	j = HOR;
  	getch(); /*eat delim*/
  	if (n = atoi()) {
***************
*** 612,619
  		errmsg(EWARN, "\\h: \"%s\" unsuitable delim", tchartos(delim1));
  	}
  	j = HOR;
- #else !REPORTERRS
- 	j = HOR;
  	getch(); /*eat delim*/
  #endif REPORTERRS
  	if (n = atoi()) {

--- 444,449 -----
  	tchar i;
  
  	j = HOR;
  	getch(); /*eat delim*/
  	if (n = atoi()) {
  		if (vflag)
***************
*** 615,621
  #else !REPORTERRS
  	j = HOR;
  	getch(); /*eat delim*/
- #endif REPORTERRS
  	if (n = atoi()) {
  		if (vflag)
  			j = VERT;

--- 445,450 -----
  
  	j = HOR;
  	getch(); /*eat delim*/
  	if (n = atoi()) {
  		if (vflag)
  			j = VERT;
***************
*** 622,636
  		i = makem(quant(n, j));
  	} else
  		i = 0;
- #ifdef REPORTERRS
- 	if ((delim2 = cbits(getch())) != delim1) {
- 		if (delim2 == '\n') {
- 			errmsg(EWARN, "\\h: expected trailing delim \"%s\", found newline", tchartos(delim1));
- 		} else {
- 			errmsg(EWARN, "\\h: expected close delim \"%s\", found \"%s\"", tchartos(delim1), tchartos(delim2));
- 		}
- 	}
- #else !REPORTERRS
  	getch();
  #endif REPORTERRS
  	vflag = 0;

--- 451,456 -----
  		i = makem(quant(n, j));
  	} else
  		i = 0;
  	getch();
  	vflag = 0;
  	dfact = 1;
***************
*** 632,638
  	}
  #else !REPORTERRS
  	getch();
- #endif REPORTERRS
  	vflag = 0;
  	dfact = 1;
  	return(i);

--- 452,457 -----
  	} else
  		i = 0;
  	getch();
  	vflag = 0;
  	dfact = 1;
  	return(i);
***************
*** 725,733
  
  	skip();
  	if ((i = cbits(getch()) - '0') <= 0 || i > nfonts)
- #ifdef REPORTERRS
- 		errmsg(EWARN, "fp %d: font position must be in range 1..%d", i, nfonts);
- #else !REPORTERRS
  		fprintf(stderr, "troff: fp: bad font position %d\n", i);
  #endif REPORTERRS
  	else if (skip() || !(j = getrq()))

--- 544,549 -----
  
  	skip();
  	if ((i = cbits(getch()) - '0') <= 0 || i > nfonts)
  		fprintf(stderr, "troff: fp: bad font position %d\n", i);
  	else if (skip() || !(j = getrq()))
  		fprintf(stderr, "troff: fp: no font name\n"); 
***************
*** 729,735
  		errmsg(EWARN, "fp %d: font position must be in range 1..%d", i, nfonts);
  #else !REPORTERRS
  		fprintf(stderr, "troff: fp: bad font position %d\n", i);
- #endif REPORTERRS
  	else if (skip() || !(j = getrq()))
  #ifdef REPORTERRS
  		errmsg(EWARN, ".fp %d without font name ignored", i); 

--- 545,550 -----
  	skip();
  	if ((i = cbits(getch()) - '0') <= 0 || i > nfonts)
  		fprintf(stderr, "troff: fp: bad font position %d\n", i);
  	else if (skip() || !(j = getrq()))
  		fprintf(stderr, "troff: fp: no font name\n"); 
  	else {
***************
*** 731,739
  		fprintf(stderr, "troff: fp: bad font position %d\n", i);
  #endif REPORTERRS
  	else if (skip() || !(j = getrq()))
- #ifdef REPORTERRS
- 		errmsg(EWARN, ".fp %d without font name ignored", i); 
- #else !REPORTERRS
  		fprintf(stderr, "troff: fp: no font name\n"); 
  #endif REPORTERRS
  	else {

--- 546,551 -----
  	if ((i = cbits(getch()) - '0') <= 0 || i > nfonts)
  		fprintf(stderr, "troff: fp: bad font position %d\n", i);
  	else if (skip() || !(j = getrq()))
  		fprintf(stderr, "troff: fp: no font name\n"); 
  	else {
  		skip();
***************
*** 735,741
  		errmsg(EWARN, ".fp %d without font name ignored", i); 
  #else !REPORTERRS
  		fprintf(stderr, "troff: fp: no font name\n"); 
- #endif REPORTERRS
  	else {
  		skip();
  		setfp(i, j, 0);

--- 547,552 -----
  		fprintf(stderr, "troff: fp: bad font position %d\n", i);
  	else if (skip() || !(j = getrq()))
  		fprintf(stderr, "troff: fp: no font name\n"); 
  	else {
  		skip();
  		setfp(i, j, 0);
***************
*** 741,750
  		setfp(i, j, 0);
  	}
  }
- #ifdef USEFONTPATH
- char *fontpath = 0;
- extern char *followpath();
- #endif USEFONTPATH
  
  setfp(pos, f, d)	/* mount font f at position pos[0...nfonts] */
  int pos, f;

--- 552,557 -----
  		setfp(i, j, 0);
  	}
  }
  
  setfp(pos, f, d)	/* mount font f at position pos[0...nfonts] */
  int pos, f;
***************
*** 752,764
  {
  	register i, j, k;
  	int n;
- #ifdef COMMENT
- 	/* the 10 in shortname[10] is to match up with the 10 in dev.h.
- 	 * but it doesn't really matter, as the field is effectively
- 	 * unused.
- 	 * - req
- 	 */
- #endif COMMENT
  	char	longname[NS], shortname[10], *p;
  	extern int	nchtab;
  

--- 559,564 -----
  {
  	register i, j, k;
  	int n;
  	char	longname[NS], shortname[10], *p;
  	extern int	nchtab;
  
***************
*** 765,772
  	shortname[0] = f & BMASK;
  	shortname[1] = f >> BYTE;
  	shortname[2] = '\0';
- #ifdef USEFONTPATH
- 	if (!fontpath || !*fontpath) {
  		if (d == 0)	/* normal case */
  			sprintf(longname, "%s/dev%s/%s.out", fontfile, devname, shortname);
  		else		/* 3rd argument is a directory for the font */

--- 565,570 -----
  	shortname[0] = f & BMASK;
  	shortname[1] = f >> BYTE;
  	shortname[2] = '\0';
  	if (d == 0)	/* normal case */
  		sprintf(longname, "%s/dev%s/%s.out", fontfile, devname, shortname);
  	else		/* 3rd argument is a directory for the font */
***************
*** 772,821
  		else		/* 3rd argument is a directory for the font */
  			sprintf(longname, "%s/%s.out", fontfile, shortname);
  		if ((k = open(longname, 0)) < 0) {
- 			if ((k = open(longname, 0)) < 0) {
- #ifdef REPORTERRS
- 				errmsg(EWARN, "No file \"%s\" for font %s",
- 							longname,shortname);
- #else !REPORTERRS
- 				fprintf(stderr, "troff: Can't open %s\n",
- 								longname);
- #endif REPORTERRS
- 				return(-1);
- 			}
- 		}
- 	} else {
- 		/* march along fontpath looking for ':', which delimits
- 		 * entries; each entry is in turn prepended to %s.out.
- 		 * The default fontfile is made in n1.c:main()
- 		 * and is /usr/lib/troff/descs/devXXX, where XXX is from -T
- 		 * - req
- 		 */
- 		char *p;
- 
- 		sprintf(longname, "%s.out", shortname);
- 		/* the trailing zero means we need a readable file */
- 		if ((p = followpath(fontpath, longname, 0)) == (char *) 0 ||
- 							(k = open(p, 0)) < 0) {
- #ifdef REPORTERRS
- 			errmsg(EWARN,
- 				"Can't find \"%s\" for font %s in path \"%s\"",
- 					       longname, shortname, fontfile);
- #else !REPORTERRS
- 			fprintf(stderr, "troff: can't find font file %s.out in path \"%s\"", shortname, fontfile);
- #endif REPORTERRS
- 			return(-1);
- 		}
- 	}
- 	/* now have k as an open file */
- #else !USEFONTPATH
- 	if (d == 0)	/* normal case */
- 		sprintf(longname, "%s/dev%s/%s.out", fontfile, devname, shortname);
- 	else		/* 3rd argument is a directory for the font */
- 		sprintf(longname, "%s/%s.out", fontfile, shortname);
- 	if ((k = open(longname, 0)) < 0) {
- #ifdef REPORTERRS
- 		errmsg(EWARN, "No file \"%s\" for font %s", longname,shortname);
- #else !REPORTERRS
  		fprintf(stderr, "troff: Can't open %s\n", longname);
  #endif REPORTERRS
  		return(-1);

--- 570,575 -----
  	else		/* 3rd argument is a directory for the font */
  		sprintf(longname, "%s/%s.out", fontfile, shortname);
  	if ((k = open(longname, 0)) < 0) {
  		fprintf(stderr, "troff: Can't open %s\n", longname);
  		return(-1);
  	}
***************
*** 817,823
  		errmsg(EWARN, "No file \"%s\" for font %s", longname,shortname);
  #else !REPORTERRS
  		fprintf(stderr, "troff: Can't open %s\n", longname);
- #endif REPORTERRS
  		return(-1);
  	}
  #endif USEFONTPATH

--- 571,576 -----
  		sprintf(longname, "%s/%s.out", fontfile, shortname);
  	if ((k = open(longname, 0)) < 0) {
  		fprintf(stderr, "troff: Can't open %s\n", longname);
  		return(-1);
  	}
  	n = fontbase[pos]->nwfont & BMASK;
***************
*** 820,826
  #endif REPORTERRS
  		return(-1);
  	}
- #endif USEFONTPATH
  	n = fontbase[pos]->nwfont & BMASK;
  	read(k, fontbase[pos], 3*n + nchtab + 128 - 32 + sizeof(struct font));
  	kerntab[pos] = (char *) fontab[pos] + (fontbase[pos]->nwfont & BMASK);

--- 573,578 -----
  		fprintf(stderr, "troff: Can't open %s\n", longname);
  		return(-1);
  	}
  	n = fontbase[pos]->nwfont & BMASK;
  	read(k, fontbase[pos], 3*n + nchtab + 128 - 32 + sizeof(struct font));
  	kerntab[pos] = (char *) fontab[pos] + (fontbase[pos]->nwfont & BMASK);
***************
*** 827,835
  	/* have to reset the fitab pointer because the width may be different */
  	fitab[pos] = (char *) fontab[pos] + 3 * (fontbase[pos]->nwfont & BMASK);
  	if ((fontbase[pos]->nwfont & BMASK) > n) {
- #ifdef REPORTERRS
- 		errmsg(EWARN, "Font %s is %d bytes too big for position %d\n", shortname, fontbase[pos]->nwfont - n, pos);
- #else !REPORTERRS
  		fprintf(stderr, "troff: Font %s too big for position %d\n", shortname, pos);
  #endif REPORTERRS
  		return(-1);

--- 579,584 -----
  	/* have to reset the fitab pointer because the width may be different */
  	fitab[pos] = (char *) fontab[pos] + 3 * (fontbase[pos]->nwfont & BMASK);
  	if ((fontbase[pos]->nwfont & BMASK) > n) {
  		fprintf(stderr, "troff: Font %s too big for position %d\n", shortname, pos);
  		return(-1);
  	}
***************
*** 831,837
  		errmsg(EWARN, "Font %s is %d bytes too big for position %d\n", shortname, fontbase[pos]->nwfont - n, pos);
  #else !REPORTERRS
  		fprintf(stderr, "troff: Font %s too big for position %d\n", shortname, pos);
- #endif REPORTERRS
  		return(-1);
  	}
  	fontbase[pos]->nwfont = n;	/* so can load a larger one again later */

--- 580,585 -----
  	fitab[pos] = (char *) fontab[pos] + 3 * (fontbase[pos]->nwfont & BMASK);
  	if ((fontbase[pos]->nwfont & BMASK) > n) {
  		fprintf(stderr, "troff: Font %s too big for position %d\n", shortname, pos);
  		return(-1);
  	}
  	fontbase[pos]->nwfont = n;	/* so can load a larger one again later */
***************
*** 864,888
  	register i, j;
  
  	noscale++;
- 	i = j;
- #ifdef REPORTERRS
- 	{
- 		int name;
- 
- 		if (skip()) {
- 			errmsg(EWARN, "call to .cs with no arguments ignored");
- 			goto rtn;
- 		}
- 		if (!(i = getrq())) {
- 			errmsg(EWARN, "call to .cs with no arguments ignored");
- 			goto rtn;
- 		}
- 		if ((i = findft(name = i)) < 0) {
- 			errmsg(EWARN, ".cs: font %s is not mounted -- ignored",
- 						realname(name));
- 			goto rtn;
- 		}
- 	}
  	skip();
  #else !REPORTERRS
  	skip();

--- 612,617 -----
  	register i, j;
  
  	noscale++;
  	skip();
  	if (!(i = getrq()) || (i = findft(i)) < 0)
  		goto rtn;
***************
*** 884,891
  		}
  	}
  	skip();
- #else !REPORTERRS
- 	skip();
  	if (!(i = getrq()) || (i = findft(i)) < 0)
  		goto rtn;
  	skip();

--- 613,618 -----
  
  	noscale++;
  	skip();
  	if (!(i = getrq()) || (i = findft(i)) < 0)
  		goto rtn;
  	skip();
***************
*** 889,895
  	if (!(i = getrq()) || (i = findft(i)) < 0)
  		goto rtn;
  	skip();
- #endif REPORTERRS
  	cstab[i] = atoi();
  #ifdef REPORTERRS
  	if (!skip())

--- 616,621 -----
  	if (!(i = getrq()) || (i = findft(i)) < 0)
  		goto rtn;
  	skip();
  	cstab[i] = atoi();
  	skip();
  	j = atoi();
***************
*** 891,898
  	skip();
  #endif REPORTERRS
  	cstab[i] = atoi();
! #ifdef REPORTERRS
! 	if (!skip())
  		j = atoi();
  #endif REPORTERRS
  	if (nonumb)

--- 617,623 -----
  		goto rtn;
  	skip();
  	cstab[i] = atoi();
! 	skip();
  	j = atoi();
  	if (nonumb)
  		ccstab[i] = 0;
***************
*** 894,900
  #ifdef REPORTERRS
  	if (!skip())
  		j = atoi();
- #endif REPORTERRS
  	if (nonumb)
  		ccstab[i] = 0;
  	else

--- 619,624 -----
  	cstab[i] = atoi();
  	skip();
  	j = atoi();
  	if (nonumb)
  		ccstab[i] = 0;
  	else
***************
*** 910,937
  
  	k = 0;
  bd0:
- #ifdef REPORTERRS
- 	if (skip()) {
- 		errmsg(EWARN, "Call to .bd with no arguments ignored");
- 		if (k)
- 			goto bd1;
- 		else 
- 			return;
- 	} else if (!(i = getrq())) {
- 		errmsg(EWARN, ".cs: without any arguments ignored");
- 		if (k)
- 			goto bd1;
- 		else 
- 			return;
- 	} else if ((j = findft(i)) < 0) {
- 		errmsg(EWARN, "Call to .cs for unknown font %s ignored",
- 						realname(j));
- 		if (k)
- 			goto bd1;
- 		else 
- 			return;
- 	}
- #else !REPORTERRS
  	if (skip() || !(i = getrq()) || (j = findft(i)) == -1) {
  		if (k)
  			goto bd1;

--- 634,639 -----
  
  	k = 0;
  bd0:
  	if (skip() || !(i = getrq()) || (j = findft(i)) == -1) {
  		if (k)
  			goto bd1;
***************
*** 938,944
  		else 
  			return;
  	}
- #endif REPORTERRS
  	if (j == smnt) {
  		k = smnt;
  		goto bd0;

--- 640,645 -----
  		else 
  			return;
  	}
  	if (j == smnt) {
  		k = smnt;
  		goto bd0;
***************
*** 980,995
  	register i;
  
  	noscale++;
- #ifdef REPORTERRS
- 	/* ignored if no args. */
- 	/* That way we can distinguish between a syntax error in an expression
- 	 * and a call to .ss without args, and only moan at the former (although
- 	 * atoi() may moan too, of course!
- 	 * - req
- 	 */
- 	if (skip())
- 		return;
- #endif REPORTERRS
  	skip();
  	if (i = atoi()) {
  		spacesz = i & 0177;

--- 681,686 -----
  	register i;
  
  	noscale++;
  	skip();
  	if (i = atoi()) {
  		spacesz = i & 0177;
***************
*** 995,1005
  		spacesz = i & 0177;
  		sps = width(' ' | chbits);
  	}
- #ifdef REPORTERRS
- 	else if (nonumb) {
- 		errmsg(EWARN, ".ss with non-numeric argument ignored");
- 	}
- #endif REPORTERRS
  	noscale = 0;
  }
  

--- 686,691 -----
  		spacesz = i & 0177;
  		sps = width(' ' | chbits);
  	}
  	noscale = 0;
  }
  
diff -rbc titroff/ta.c /distribution/dwb/text/troff.d/ta.c
*** titroff/ta.c	Wed Jan 11 10:26:33 1984
--- /distribution/dwb/text/troff.d/ta.c	Fri Sep  9 18:46:54 1983
***************
*** 1,3
  /*
   *	drive hp2621 terminal 
   *	just to see stuff quickly. like troff -a

--- 1,4 -----
+ /*      @(#)ta.c	1.1     */
  /*
   *	drive hp2621 terminal 
   *	just to see stuff quickly. like troff -a
Only in titroff: tags
diff -rbc titroff/tc.c /distribution/dwb/text/troff.d/tc.c
*** titroff/tc.c	Wed Jan 11 10:26:33 1984
--- /distribution/dwb/text/troff.d/tc.c	Fri Sep  9 18:47:11 1983
***************
*** 1,3
  /*
   *	drive 4014 scope
   */

--- 1,4 -----
+ /*	@(#)tc.c	1.2	*/
  /*
   *	drive 4014 scope
   */
***************
*** 99,106
  		case 'T':
  			if (strcmp(&argv[1][2], "cat") == 0) {	/* use the old one */
  				if (fork() == 0) {
! 					execv("/usr/bin/oldtc", argv);
! 					fprintf(stderr, "tc: can't find oldtc\n");
  				}
  				wait();
  				exit(1);

--- 100,107 -----
  		case 'T':
  			if (strcmp(&argv[1][2], "cat") == 0) {	/* use the old one */
  				if (fork() == 0) {
! 					execv("/usr/bin/otc", argv);
! 					fprintf(stderr, "tc: can't find otc\n");
  				}
  				wait((int *)0);
  				exit(1);
***************
*** 102,108
  					execv("/usr/bin/oldtc", argv);
  					fprintf(stderr, "tc: can't find oldtc\n");
  				}
! 				wait();
  				exit(1);
  			}
  			break;

--- 103,109 -----
  					execv("/usr/bin/otc", argv);
  					fprintf(stderr, "tc: can't find otc\n");
  				}
! 				wait((int *)0);
  				exit(1);
  			}
  			break;
***************
*** 120,125
  			if (dbg == 0) dbg = 1;
  			break;
  		case 'c':
  			keepon = 1;
  			break;
  		}

--- 121,127 -----
  			if (dbg == 0) dbg = 1;
  			break;
  		case 'c':
+ 		case 't':
  			keepon = 1;
  			break;
  		}
***************
*** 580,586
  		fputs("-n	go back n pages\n", stderr);
  		fputs("n	print page n (previously printed)\n", stderr);
  		fputs("o...	set the -o output list to ...\n", stderr);
! 		fputs("en	n=0 -> don't erase; n=1 -> erase\n", stderr);
  		fputs("an	sets aspect ratio to n\n", stderr);
  		break;
  	default:

--- 582,588 -----
  		fputs("-n	go back n pages\n", stderr);
  		fputs("n	print page n (previously printed)\n", stderr);
  		fputs("o...	set the -o output list to ...\n", stderr);
! 		fputs("e	invert state of erasing\n", stderr);
  		fputs("an	sets aspect ratio to n\n", stderr);
  		break;
  	default:
diff -rbc titroff/tdef.h /distribution/dwb/text/troff.d/tdef.h
*** titroff/tdef.h	Tue Nov 11 15:16:31 1986
--- /distribution/dwb/text/troff.d/tdef.h	Tue Oct 25 17:24:11 1983
***************
*** 1,7
! #ifdef BSD42
! #include <pagsiz.h>
! #define 	BUFSIZ	BSIZE
! #endif BSD42
  #include <signal.h>
  
  #define	MAXPTR	(char *)-1	/* max value of any pointer variable */

--- 1,4 -----
! /*      @(#)tdef.h	1.2     */
  #include <signal.h>
  
  #define	MAXPTR	(char *)-1	/* max value of any pointer variable */
***************
*** 77,93
  #define	DRAWELLIPSE	'e'
  #define	DRAWARC		'a'	/* arbitrary arc */
  #define	DRAWWIG		'~'	/* wiggly line with spline */
- #ifdef GREMLIN
- /* Gremlin enhancements go here.  But I don't know what they are yet.
-  * Line thickness
-  * Stipple
-  * ``Gremlin''
-  * - req
-  */
- #define DRAWGREM	'g'	/* gremlin [sic] */
- #define DRAWTHICK	't'	/* line thickness */
- #define DRAWLSTYLE	's'	/* line style */
- #endif GREMLIN
  
  #define	LEFT	020	/* \{ */
  #define	RIGHT	021	/* \} */

--- 74,79 -----
  #define	DRAWELLIPSE	'e'
  #define	DRAWARC		'a'	/* arbitrary arc */
  #define	DRAWWIG		'~'	/* wiggly line with spline */
  
  #define	LEFT	020	/* \{ */
  #define	RIGHT	021	/* \} */
***************
*** 92,100
  #define	LEFT	020	/* \{ */
  #define	RIGHT	021	/* \} */
  #define	FILLER	022	/* \& and similar purposes */
- #ifdef ANYBASELINE
- #define BASESTR 023	/* \B -- text on arbitrary baseline  - req */
- #endif ANYBASELINE
  #define	OHC	024	/* optional hyphenation character \% */
  #define	CONT	025	/* \c character */
  #define	PRESC	026	/* printable escape */

--- 78,83 -----
  #define	LEFT	020	/* \{ */
  #define	RIGHT	021	/* \} */
  #define	FILLER	022	/* \& and similar purposes */
  #define	OHC	024	/* optional hyphenation character \% */
  #define	CONT	025	/* \c character */
  #define	PRESC	026	/* printable escape */
***************
*** 132,140
  
  /* array sizes, and similar limits: */
  
- #ifdef MOREPREFONTS
- #define	NFONT	40	/* maximum number of fonts (including specials) */
- #else !MOREPREFONTS
  #define	NFONT	10	/* maximum number of fonts (including specials) */
  #endif MOREPREFONTS
  #define	EXTRAFONT	500	/* extra space for swapping a font */

--- 115,120 -----
  
  /* array sizes, and similar limits: */
  
  #define	NFONT	10	/* maximum number of fonts (including specials) */
  #define	EXTRAFONT	500	/* extra space for swapping a font */
  #define	NN	300	/* number registers */
***************
*** 136,142
  #define	NFONT	40	/* maximum number of fonts (including specials) */
  #else !MOREPREFONTS
  #define	NFONT	10	/* maximum number of fonts (including specials) */
- #endif MOREPREFONTS
  #define	EXTRAFONT	500	/* extra space for swapping a font */
  #ifdef BSD42
  #ifdef VMUNIX

--- 116,121 -----
  /* array sizes, and similar limits: */
  
  #define	NFONT	10	/* maximum number of fonts (including specials) */
  #define	EXTRAFONT	500	/* extra space for swapping a font */
  #define	NN	300	/* number registers */
  #define	NNAMES	15	 /* predefined reg names */
***************
*** 138,147
  #define	NFONT	10	/* maximum number of fonts (including specials) */
  #endif MOREPREFONTS
  #define	EXTRAFONT	500	/* extra space for swapping a font */
- #ifdef BSD42
- #ifdef VMUNIX
- #define	NN	528	/* number registers */
- #else !VMUNIX
  #define	NN	300	/* number registers */
  #endif VMUNIX
  #else !BSD42

--- 117,122 -----
  
  #define	NFONT	10	/* maximum number of fonts (including specials) */
  #define	EXTRAFONT	500	/* extra space for swapping a font */
  #define	NN	300	/* number registers */
  #define	NNAMES	15	 /* predefined reg names */
  #define	NIF	15	/* if-else nesting */
***************
*** 143,152
  #define	NN	528	/* number registers */
  #else !VMUNIX
  #define	NN	300	/* number registers */
- #endif VMUNIX
- #else !BSD42
- #define	NN	300	/* number registers */
- #endif BSD42
  #define	NNAMES	15	 /* predefined reg names */
  #define	NIF	15	/* if-else nesting */
  #define	NS	64	/* name buffer */

--- 118,123 -----
  #define	NFONT	10	/* maximum number of fonts (including specials) */
  #define	EXTRAFONT	500	/* extra space for swapping a font */
  #define	NN	300	/* number registers */
  #define	NNAMES	15	 /* predefined reg names */
  #define	NIF	15	/* if-else nesting */
  #define	NS	128	/* name buffer */
***************
*** 149,155
  #endif BSD42
  #define	NNAMES	15	 /* predefined reg names */
  #define	NIF	15	/* if-else nesting */
! #define	NS	64	/* name buffer */
  #define	NTM	256	/* tm buffer */
  #ifdef LOTSOFENVS
  #define	NEV	7	/* environments */

--- 120,126 -----
  #define	NN	300	/* number registers */
  #define	NNAMES	15	 /* predefined reg names */
  #define	NIF	15	/* if-else nesting */
! #define	NS	128	/* name buffer */
  #define	NTM	256	/* tm buffer */
  #define	NEV	3	/* environments */
  #define	EVLSZ	10	/* size of ev stack */
***************
*** 151,164
  #define	NIF	15	/* if-else nesting */
  #define	NS	64	/* name buffer */
  #define	NTM	256	/* tm buffer */
- #ifdef LOTSOFENVS
- #define	NEV	7	/* environments */
- /* the macro packges use .ev 0, 1, 2
-  * so this leaves 3, 4, 5, 6
-  * for the user.  I'm going to make -ms use .ev 3, though, for keeps.
-  * - req
-  */
- #else !LOTSOFENVS
  #define	NEV	3	/* environments */
  #endif LOTSOFENVS
  #define	EVLSZ	10	/* size of ev stack */

--- 122,127 -----
  #define	NIF	15	/* if-else nesting */
  #define	NS	128	/* name buffer */
  #define	NTM	256	/* tm buffer */
  #define	NEV	3	/* environments */
  #define	EVLSZ	10	/* size of ev stack */
  #define	DSIZE	512	/* disk sector size in chars */
***************
*** 160,166
   */
  #else !LOTSOFENVS
  #define	NEV	3	/* environments */
- #endif LOTSOFENVS
  #define	EVLSZ	10	/* size of ev stack */
  #define	DSIZE	512	/* disk sector size in chars */
  

--- 123,128 -----
  #define	NS	128	/* name buffer */
  #define	NTM	256	/* tm buffer */
  #define	NEV	3	/* environments */
  #define	EVLSZ	10	/* size of ev stack */
  #define	DSIZE	512	/* disk sector size in chars */
  
***************
*** 172,179
     no harm is done as long as it's big enough.
  */
  
- #ifdef WARWICK
- /* if it's wrong, let's fix it ! */
  #define	EVUSED	\
  		(59 * sizeof(int)	/* integers in env block */	\
  		+ 9 * sizeof(*tchar)	/* tchars in env block */	\

--- 134,139 -----
     no harm is done as long as it's big enough.
  */
  
  #define	EVUSED	\
  		(59 * sizeof(int)	/* integers in env block */	\
  		+ 9 * sizeof(tchar)	/* tchars in env block */	\
***************
*** 176,188
  /* if it's wrong, let's fix it ! */
  #define	EVUSED	\
  		(59 * sizeof(int)	/* integers in env block */	\
- 		+ 9 * sizeof(*tchar)	/* tchars in env block */	\
- 		+ NHYP * sizeof(*tchar)	/* hytab */	\
- 		+ NTAB * sizeof(int)	/* tabtab */	\
- 		+ (LNSIZE+WDSIZE) * sizeof(*tchar))	/* line+word */
- #else WARWICK
- #define	EVUSED	\
- 		(59 * sizeof(int)	/* integers in env block */	\
  		+ 9 * sizeof(tchar)	/* tchars in env block */	\
  		+ NHYP * sizeof(tchar)	/* hytab */	\
  		+ NTAB * sizeof(int)	/* tabtab */	\

--- 136,141 -----
  
  #define	EVUSED	\
  		(59 * sizeof(int)	/* integers in env block */	\
  		+ 9 * sizeof(tchar)	/* tchars in env block */	\
  		+ NHYP * sizeof(tchar)	/* hytab */	\
  		+ NTAB * sizeof(int)	/* tabtab */	\
***************
*** 187,193
  		+ NHYP * sizeof(tchar)	/* hytab */	\
  		+ NTAB * sizeof(int)	/* tabtab */	\
  		+ (LNSIZE+WDSIZE) * sizeof(tchar))	/* line+word */
- #endif WARWICK
  
  #define	EVSPARE	DSIZE - EVUSED % DSIZE	/* number of leftover chars */
  #define	EVS	(EVUSED + EVSPARE)	/* should be a multiple of DSIZE */

--- 140,145 -----
  		+ NHYP * sizeof(tchar)	/* hytab */	\
  		+ NTAB * sizeof(int)	/* tabtab */	\
  		+ (LNSIZE+WDSIZE) * sizeof(tchar))	/* line+word */
  
  #define	EVSPARE	DSIZE - EVUSED % DSIZE	/* number of leftover chars */
  #define	EVS	(EVUSED + EVSPARE)	/* should be a multiple of DSIZE */
***************
*** 191,199
  
  #define	EVSPARE	DSIZE - EVUSED % DSIZE	/* number of leftover chars */
  #define	EVS	(EVUSED + EVSPARE)	/* should be a multiple of DSIZE */
- #ifdef WARWICK
- #define NM	800
- #else WARWICK
  #define	NM	350	/* requests + macros */
  #endif WARWICK
  #define	DELTA	1024	/* delta core bytes */

--- 143,148 -----
  
  #define	EVSPARE	DSIZE - EVUSED % DSIZE	/* number of leftover chars */
  #define	EVS	(EVUSED + EVSPARE)	/* should be a multiple of DSIZE */
  #define	NM	350	/* requests + macros */
  #define	DELTA	1024	/* delta core bytes */
  #define	NHYP	10	/* max hyphens per word */
***************
*** 195,201
  #define NM	800
  #else WARWICK
  #define	NM	350	/* requests + macros */
- #endif WARWICK
  #define	DELTA	1024	/* delta core bytes */
  #define	NHYP	10	/* max hyphens per word */
  #ifndef NHEX /* to allow setting this from the Makefile -- req */

--- 144,149 -----
  #define	EVSPARE	DSIZE - EVUSED % DSIZE	/* number of leftover chars */
  #define	EVS	(EVUSED + EVSPARE)	/* should be a multiple of DSIZE */
  #define	NM	350	/* requests + macros */
  #define	DELTA	1024	/* delta core bytes */
  #define	NHYP	10	/* max hyphens per word */
  #define	NHEX	128	/* byte size of exception word list */
***************
*** 198,204
  #endif WARWICK
  #define	DELTA	1024	/* delta core bytes */
  #define	NHYP	10	/* max hyphens per word */
- #ifndef NHEX /* to allow setting this from the Makefile -- req */
  #define	NHEX	128	/* byte size of exception word list */
  #endif !NHEX
  #define	NTAB	35	/* tab stops */

--- 146,151 -----
  #define	NM	350	/* requests + macros */
  #define	DELTA	1024	/* delta core bytes */
  #define	NHYP	10	/* max hyphens per word */
  #define	NHEX	128	/* byte size of exception word list */
  #define	NTAB	35	/* tab stops */
  #define	NSO	5	/* "so" depth */
***************
*** 200,206
  #define	NHYP	10	/* max hyphens per word */
  #ifndef NHEX /* to allow setting this from the Makefile -- req */
  #define	NHEX	128	/* byte size of exception word list */
- #endif !NHEX
  #define	NTAB	35	/* tab stops */
  #define	NSO	5	/* "so" depth */
  #ifdef WARWICK

--- 147,152 -----
  #define	DELTA	1024	/* delta core bytes */
  #define	NHYP	10	/* max hyphens per word */
  #define	NHEX	128	/* byte size of exception word list */
  #define	NTAB	35	/* tab stops */
  #define	NSO	5	/* "so" depth */
  #define	WDSIZE	270	/* word buffer size */
***************
*** 203,212
  #endif !NHEX
  #define	NTAB	35	/* tab stops */
  #define	NSO	5	/* "so" depth */
- #ifdef WARWICK
- #define	WDSIZE	960	/* word buffer size */
- #define	LNSIZE	2960	/* line buffer size */
- #else WARWICK
  #define	WDSIZE	270	/* word buffer size */
  #define	LNSIZE	680	/* line buffer size */
  #endif WARWICK

--- 149,154 -----
  #define	NHEX	128	/* byte size of exception word list */
  #define	NTAB	35	/* tab stops */
  #define	NSO	5	/* "so" depth */
  #define	WDSIZE	270	/* word buffer size */
  #define	LNSIZE	680	/* line buffer size */
  #define	NDI	5	/* number of diversions */
***************
*** 209,215
  #else WARWICK
  #define	WDSIZE	270	/* word buffer size */
  #define	LNSIZE	680	/* line buffer size */
- #endif WARWICK
  #define	NDI	5	/* number of diversions */
  #define	NTRTAB	350	/* number of items in trtab[] */
  #define	NTRAP	20	/* number of traps */

--- 151,156 -----
  #define	NSO	5	/* "so" depth */
  #define	WDSIZE	270	/* word buffer size */
  #define	LNSIZE	680	/* line buffer size */
  #define	NDI	5	/* number of diversions */
  #define	NTRTAB	350	/* number of items in trtab[] */
  #define	NTRAP	20	/* number of traps */
***************
*** 214,222
  #define	NTRTAB	350	/* number of items in trtab[] */
  #define	NTRAP	20	/* number of traps */
  #define	NPN	20	/* numbers in "-o" */
- #ifdef WARWICK
- #define	FBUFSZ	1024	/* field buf size words */
- #else WARWICK
  #define	FBUFSZ	256	/* field buf size words */
  #endif WARWICK
  #ifdef BUFSIZ

--- 155,160 -----
  #define	NTRTAB	350	/* number of items in trtab[] */
  #define	NTRAP	20	/* number of traps */
  #define	NPN	20	/* numbers in "-o" */
  #define	FBUFSZ	256	/* field buf size words */
  #define	OBUFSZ	512	/* bytes */
  #define	IBUFSZ	512	/* bytes */
***************
*** 218,228
  #define	FBUFSZ	1024	/* field buf size words */
  #else WARWICK
  #define	FBUFSZ	256	/* field buf size words */
- #endif WARWICK
- #ifdef BUFSIZ
- #define	OBUFSZ	BUFSIZ	/* bytes */
- #define	IBUFSZ	BUFSIZ	/* bytes */
- #else !BUFSIZ
  #define	OBUFSZ	512	/* bytes */
  #define	IBUFSZ	512	/* bytes */
  #endif BUFSIZ

--- 156,161 -----
  #define	NTRAP	20	/* number of traps */
  #define	NPN	20	/* numbers in "-o" */
  #define	FBUFSZ	256	/* field buf size words */
  #define	OBUFSZ	512	/* bytes */
  #define	IBUFSZ	512	/* bytes */
  #define	NC	256	/* cbuf size words */
***************
*** 225,231
  #else !BUFSIZ
  #define	OBUFSZ	512	/* bytes */
  #define	IBUFSZ	512	/* bytes */
- #endif BUFSIZ
  #define	NC	256	/* cbuf size words */
  #define	NOV	10	/* number of overstrike chars */
  #define	NPP	10	/* pads per field */

--- 158,163 -----
  #define	FBUFSZ	256	/* field buf size words */
  #define	OBUFSZ	512	/* bytes */
  #define	IBUFSZ	512	/* bytes */
  #define	NC	256	/* cbuf size words */
  #define	NOV	10	/* number of overstrike chars */
  #define	NPP	10	/* pads per field */
***************
*** 251,257
  #define	VMOT	(01L<<16)	/* vert motion bit */
  #define	NMOT	(01L<<17)	/* negative motion indicator*/
  #define	MAXMOT	32767	/* bad way to write this!!! */
! #define	ismot(n)	((unsigned short)(n) & MOT)	/* (short) is a cheap mask */
  #define	isvmot(n)	((n) & VMOT)	/* must have tested MOT previously */
  #define	isnmot(n)	((n) & NMOT)	/* ditto */
  #define	absmot(n)	((unsigned short)(n) & ~MOT)	/* (short) is cheap mask */

--- 183,189 -----
  #define	VMOT	(01L<<16)	/* vert motion bit */
  #define	NMOT	(01L<<17)	/* negative motion indicator*/
  #define	MAXMOT	32767	/* bad way to write this!!! */
! #define	ismot(n)	(unsigned)((n) & MOT)	/* (short) is a cheap mask */
  #define	isvmot(n)	((n) & VMOT)	/* must have tested MOT previously */
  #define	isnmot(n)	((n) & NMOT)	/* ditto */
  #define	absmot(n)	(unsigned)(0177777 & (n) & ~MOT)	/* (short) is cheap mask */
***************
*** 254,260
  #define	ismot(n)	((unsigned short)(n) & MOT)	/* (short) is a cheap mask */
  #define	isvmot(n)	((n) & VMOT)	/* must have tested MOT previously */
  #define	isnmot(n)	((n) & NMOT)	/* ditto */
! #define	absmot(n)	((unsigned short)(n) & ~MOT)	/* (short) is cheap mask */
  
  #define	ZBIT	(01L << 31)	/* zero width char */
  #define	iszbit(n)	((n) & ZBIT)

--- 186,192 -----
  #define	ismot(n)	(unsigned)((n) & MOT)	/* (short) is a cheap mask */
  #define	isvmot(n)	((n) & VMOT)	/* must have tested MOT previously */
  #define	isnmot(n)	((n) & NMOT)	/* ditto */
! #define	absmot(n)	(unsigned)(0177777 & (n) & ~MOT)	/* (short) is cheap mask */
  
  #define	ZBIT	(01L << 31)	/* zero width char */
  #define	iszbit(n)	((n) & ZBIT)
***************
*** 264,273
  #define	SFMASK		(SMASK|FMASK)	/* size and font in a tchar */
  #define	CMASK		~MOT		/* clears MOT */
  #define	CMASKL		077777L
! #define	sbits(n)	((unsigned short)((n) >> 24) & 0177)
! #define	fbits(n)	((unsigned short)((n) >> 16) & 0377)
! #define	sfbits(n)	((unsigned short)(((n) & SFMASK) >> 16))
! #define	cbits(n)	(unsigned short)(n)	/* isolate bottom 16 bits  */
  #define	setsbits(n,s)	n = (n & ~SMASK) | (tchar)(s) << 24
  #define	setfbits(n,f)	n = (n & ~FMASK) | (tchar)(f) << 16
  #define	setsfbits(n,sf)	n = (n & ~SFMASK) | (tchar)(sf) << 16

--- 196,205 -----
  #define	SFMASK		(SMASK|FMASK)	/* size and font in a tchar */
  #define	CMASK		~MOT		/* clears MOT */
  #define	CMASKL		077777L
! #define	sbits(n)	(((n) >> 24) & 0177)
! #define	fbits(n)	(((n) >> 16) & 0377)
! #define	sfbits(n)	(unsigned)(0177777 & (((n) & SFMASK) >> 16))
! #define	cbits(n)	(unsigned)(0177777 & (n))	/* isolate bottom 16 bits  */
  #define	setsbits(n,s)	n = (n & ~SMASK) | (tchar)(s) << 24
  #define	setfbits(n,f)	n = (n & ~FMASK) | (tchar)(f) << 16
  #define	setsfbits(n,sf)	n = (n & ~SFMASK) | (tchar)(sf) << 16
***************
*** 284,292
  
  #define	PAIR(A,B)	(A|(B<<BYTE))
  
- #ifdef ALIGNFIXES
- typedef long filep;
- #else !ALIGNFIXES
  typedef unsigned filep;
  #endif ALIGNFIXES
  #define	BLK	128	/* alloc block tchars */

--- 216,221 -----
  
  #define	PAIR(A,B)	(A|(B<<BYTE))
  
  typedef unsigned filep;
  #define	BLK	128	/* alloc block tchars */
  #define	NBLIST	1024	/* allocation list */
***************
*** 288,294
  typedef long filep;
  #else !ALIGNFIXES
  typedef unsigned filep;
- #endif ALIGNFIXES
  #define	BLK	128	/* alloc block tchars */
  #define	NBLIST	1024	/* allocation list */
  /* previous values were BLK 256 NBLIST 512 */

--- 217,222 -----
  #define	PAIR(A,B)	(A|(B<<BYTE))
  
  typedef unsigned filep;
  #define	BLK	128	/* alloc block tchars */
  #define	NBLIST	1024	/* allocation list */
  /* previous values were BLK 256 NBLIST 512 */
***************
*** 308,323
  extern	tchar	setz();
  extern	tchar	setch(), absch();
  extern	tchar	setht(), setslant();
- #ifdef REPORTERRS
- extern
- #ifdef LINTSTUFF
- void
- #endif LINTSTUFF
- done(), done1(), done2(), done3(), edone();
- /* cleanup functions now passed as a parameter to errmsg() */
- /* I don't quite understand why there are so many! */
- /* - req	*/
- #endif REPORTERRS
  
  #define	atoi(i)		((int) atoi0(i))
  extern	long	atoi0();

--- 236,241 -----
  extern	tchar	setz();
  extern	tchar	setch(), absch();
  extern	tchar	setht(), setslant();
  
  #define	atoi(i)		((int) atoi0(i))
  extern	long	atoi0();
***************
*** 348,351
  extern int	c_lefthand;
  
  extern int	stderr;	/* this is NOT the stdio value! */
- #include "local.h"

--- 266,268 -----
  extern int	c_lefthand;
  
  extern int	stderr;	/* this is NOT the stdio value! */
Only in titroff: troff.doc
Only in /distribution/dwb/text/troff.d: troff.mk
Only in /distribution/dwb/text/troff.d: troff.sh
Only in titroff: tw.h
diff -rbc titroff/v.h /distribution/dwb/text/troff.d/v.h
*** titroff/v.h	Mon Oct 13 22:37:52 1986
--- /distribution/dwb/text/troff.d/v.h	Fri Sep  9 18:47:33 1983
***************
*** 1,3
  struct v {int pn,nl,yr,hp,ct,dn,mo,dy,dw,ln,dl,st,sb,cd,pid;
  #ifdef WARNLEVELREG
  	int wl;	/* warning level -- req */

--- 1,3 -----
+ /*      @(#)v.h	1.1     */
  struct v {int pn,nl,yr,hp,ct,dn,mo,dy,dw,ln,dl,st,sb,cd,pid;
  	int vxx[NN-NNAMES];} v ;
***************
*** 1,8
  struct v {int pn,nl,yr,hp,ct,dn,mo,dy,dw,ln,dl,st,sb,cd,pid;
- #ifdef WARNLEVELREG
- 	int wl;	/* warning level -- req */
- #endif WARNLEVELREG
- #ifdef EVREG
- 	int ev;	/* number of current env --- starts as 0 */
- #endif EVREG
  	int vxx[NN-NNAMES];} v ;

--- 1,3 -----
  /*      @(#)v.h	1.1     */
  struct v {int pn,nl,yr,hp,ct,dn,mo,dy,dw,ln,dl,st,sb,cd,pid;
  	int vxx[NN-NNAMES];} v ;
Only in titroff: x.c
