1)
descrip.mms is for VMS; Observe.MSC  is for Microsoft  C on the IBMPC;
Astring.h is  for  use  on  the  Atari  ST where   it should  be named
'strings.h', since this header is apparently not provided with MWC.

2)
You may need to change things in main.c, especially the time functions
and default location.

3)
The following awk scripts may be useful.  They are for use in editing
the .sif files produced when "observe" is used for a range of dates.
Use dataconv to produce a 'lineread' or 'binfull' file from the
resulting editted .sif file.

If you don't have and can't get awk, you can edit the program to
produce the output you usually want.

velim removes the labels from vector commands,
e.g. 
awk -f velim.awk jan.sif > jan.sif2
dataconv -i jan.sif2 sif -o jan.binfull binfull

To eliminate all the symbols from the file, use 
awk '($4 ~ /V./) {print $0}' FS=";" OFS=";" jan.sif > jan.sif2
dataconv -i jan.sif2 sif -o jan.binfull binfull

range.awk removes all but the first and last labels for each planet,
and all but every Nth symbol.  M must equal the number of days in the
range of dates.
e.g.
awk -f range.awk N=7 M=31 jan.sif > jan.sif2
dataconv -i jan.sif2 sif -o jan.binfull binfull


altaz.awk selects fields from the .altaz file.  Fields are printed in
the order azi alt, for obect NAME at time TIME, where TIME is
"sunset", "evetwil", morntwil", or "sunrise".
e.g.
awk -f altaz.awk TIME="evetwil" NAME="Austin" aus.altaz > aus.data

timetable.awk selects fields from an .eph file for object NAME.  The
fields may be specified as TIME ("rise", "trans", "set" ) or FIELD
number, e.g.

awk -f timetable.awk NAME="Austin"  TIME="set" aus.eph > aus.set_times
awk -f timetable.awk NAME="Austin"  FIELD=9 aus.eph > aus.mag


 Copyright (c) 1990 by Craig Counterman. All rights reserved.

 This software may be redistributed freely, not sold.
 This copyright notice and disclaimer of warranty must remain
    unchanged. 

 No representation is made about the suitability of this
 software for any purpose.  It is provided "as is" without express or
 implied warranty, to the extent permitted by applicable law.

 DISCLAIMER OF WARRANTY
 ----------------------
 The author  disclaims all warranties  with regard to  this software to
 the   extent  permitted  by applicable   law,  including all   implied
 warranties  of merchantability  and  fitness. In  no event shall   the
 author be liable for any special, indirect or consequential damages or
 any  damages whatsoever resulting from  loss of use, data or  profits,
 whether in an action of contract, negligence or other tortious action,
 arising  out of  or in connection with the  use or performance of this
 software.

#! /bin/sh
# This is a shell archive.  Remove anything before this line, then unpack
# it by saving it into a file and typing "sh file".  To overwrite existing
# files, type "sh file -c".  You can also feed this as standard input via
# unshar, or by typing "sh <file", e.g..  If this archive is complete, you
# will see the following message at the end:
#		"End of shell archive."
# Contents:  altaz.awk range.awk timetable.awk velim.awk
PATH=/bin:/usr/bin:/usr/ucb ; export PATH
if test -f 'altaz.awk' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'altaz.awk'\"
else
echo shar: Extracting \"'altaz.awk'\" \(214 characters\)
sed "s/^X//" >'altaz.awk' <<'END_OF_FILE'
XNR == 1 {if (TIME == "sunset")
X		var = 2
X	else if (TIME == "evetwil")
X		var = 4;
X	else if (TIME == "morntwil")
X		var = 6;
X	else if (TIME == "sunrise")
X		var = 8;
X	else
X		var = 4
X}
X$1 == NAME {print $(var+1), $var}
END_OF_FILE
if test 214 -ne `wc -c <'altaz.awk'`; then
    echo shar: \"'altaz.awk'\" unpacked with wrong size!
fi
# end of 'altaz.awk'
fi
if test -f 'range.awk' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'range.awk'\"
else
echo shar: Extracting \"'range.awk'\" \(414 characters\)
sed "s/^X//" >'range.awk' <<'END_OF_FILE'
XBEGIN {FS = OFS = ";";
X	i = 0}
X# eliminate labels from vectors
X$4 ~ /V./ {$8 = ""}
X# eliminate labels except from first and last
X# NPS = n planet symbol, number of planet lines for this planet 
X{NPS = 1+(NR-1)/2 - M*i}
X#{print NPS, (NPS % N)}
X(($4 ~ /P./) && ((NPS != 1) && (NPS != M))) {$8 = ""}
X
X(($4 ~ /V./) || (($4 ~ /P./) && ((NPS == 1) || (NPS == M) || ((NPS % N) == 1)))) {print $0}
X
X(NPS == M) {i = i + 1}
END_OF_FILE
if test 414 -ne `wc -c <'range.awk'`; then
    echo shar: \"'range.awk'\" unpacked with wrong size!
fi
# end of 'range.awk'
fi
if test -f 'timetable.awk' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'timetable.awk'\"
else
echo shar: Extracting \"'timetable.awk'\" \(324 characters\)
sed "s/^X//" >'timetable.awk' <<'END_OF_FILE'
Xfunction hrtodec(t) {
X	split(t, tsplit, ":"); return tsplit[1] + (tsplit[2]/60.0)
X}
XBEGIN {i = 0}
XNR == 1  {if (TIME == "rise")
X		field = 6
X	else if (TIME == "trans")
X		field = 7
X	else if (TIME == "set")
X		field = 8
X	else if (FIELD != "")
X		field = FIELD
X	else
X		field = 7
X}
X$1 == NAME {i = i + 1; print i, hrtodec($field)}
END_OF_FILE
if test 324 -ne `wc -c <'timetable.awk'`; then
    echo shar: \"'timetable.awk'\" unpacked with wrong size!
fi
# end of 'timetable.awk'
fi
if test -f 'velim.awk' -a "${1}" != "-c" ; then 
  echo shar: Will not clobber existing file \"'velim.awk'\"
else
echo shar: Extracting \"'velim.awk'\" \(54 characters\)
sed "s/^X//" >'velim.awk' <<'END_OF_FILE'
XBEGIN {FS = OFS = ";"}
X$4 ~ /V./ {$8 = ""}
X{print $0}
END_OF_FILE
if test 54 -ne `wc -c <'velim.awk'`; then
    echo shar: \"'velim.awk'\" unpacked with wrong size!
fi
# end of 'velim.awk'
fi
echo shar: End of shell archive.
exit 0
