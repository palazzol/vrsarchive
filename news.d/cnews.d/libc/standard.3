.TH STANDARD 3 local
.DA 9 Feb 1982
.SH NAME
standard, safe \- standardize conditions in preparation for exec
.SH SYNOPSIS
.B standard()
.PP
.B safe()
.SH DESCRIPTION
.I Standard
alters a process's environment to make it relatively safe to do
.IR execvp ,
.IR system ,
.IR popen ,
etc.
It closes all descriptors except
the standard ones and supplies a standard set of environment variables
that ensure a standard interpretation of shell commands and a
standard search path for programs.
.PP
.I Safe
is similar, but is intended for use in shell escapes and suchlike.
It leaves the environment variables untouched but turns off
setuid and setgid permissions.
.PP
Use of either one permits a setuid/setgid program to
run other programs without inadvertently bestowing special powers
on nonstandard programs.
Care must still be exercised as to what the standard descriptors
refer to,
and it is still possible for
programs executed after use of
.I standard
(as opposed to
.IR safe )
to give away special powers through
.I their
carelessness.
.SH SEE ALSO
environ(3), closeall(3)
.SH HISTORY
Local products.
.SH BUGS
.I Standard
must necessarily supply standard values for some environment variables,
but it is not clear whether it should pass other variables
through or eliminate them.
The current implementation eliminates them, which is safer but sometimes
inconvenient.
.PP
One can construct elaborate scenarios in which a setuid
program employing
.I safe
could be duped into
executing a user-supplied program in a current directory
the user ordinarily could not have reached.
.PP
Possibly
one or both should standardize the
.I umask
setting.
