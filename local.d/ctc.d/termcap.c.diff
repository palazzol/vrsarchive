*** termcap.c	Sun Apr 14 23:16:07 1985
--- /usr/src/usr.lib/libtermlib/termcap.c	Mon Jun 27 14:57:11 1983
***************
*** 1,3
  #define	BUFSIZ		1024
  #define MAXHOP		32	/* max number of tc= indirections */
  #define	E_TERMCAP	"/etc/termcap"

--- 1,7 -----
+ #ifndef lint
+ static char sccsid[] = "@(#)termcap.c	4.1 (Berkeley) 6/27/83";
+ #endif
+ 
  #define	BUFSIZ		1024
  #define MAXHOP		32	/* max number of tc= indirections */
  #define	E_TERMCAP	"/etc/termcap"
***************
*** 4,12
  
  #include <ctype.h>
  /*
- 
- 	This copy of termcap modified for use in ctc.
- 
   * termcap - routines for dealing with the terminal capability data base
   *
   * BUG:		Should use a "last" pointer in tbuf, so that searching

--- 8,13 -----
  
  #include <ctype.h>
  /*
   * termcap - routines for dealing with the terminal capability data base
   *
   * BUG:		Should use a "last" pointer in tbuf, so that searching
***************
*** 32,38
   * from the termcap file.  Parse is very rudimentary;
   * we just notice escaped newlines.
   */
! tgetent(bp, name, useenv)
  	char *bp, *name;
  	char *useenv;
  {

--- 33,39 -----
   * from the termcap file.  Parse is very rudimentary;
   * we just notice escaped newlines.
   */
! tgetent(bp, name)
  	char *bp, *name;
  {
  	register char *cp;
***************
*** 34,40
   */
  tgetent(bp, name, useenv)
  	char *bp, *name;
- 	char *useenv;
  {
  	register char *cp;
  	register int c;

--- 35,40 -----
   */
  tgetent(bp, name)
  	char *bp, *name;
  {
  	register char *cp;
  	register int c;
***************
*** 54,61
  	 * use so we don't have to read the file. In this case it
  	 * has to already have the newlines crunched out.
  	 */
! 	if ((cp && *cp) || *useenv) {
! 	     if (*useenv == 0) {
  		if (*cp!='/') {
  			cp2 = getenv("TERM");
  			if (cp2==(char *) 0 || strcmp(name,cp2)==0) {

--- 54,60 -----
  	 * use so we don't have to read the file. In this case it
  	 * has to already have the newlines crunched out.
  	 */
! 	if (cp && *cp) {
  		if (*cp!='/') {
  			cp2 = getenv("TERM");
  			if (cp2==(char *) 0 || strcmp(name,cp2)==0) {
***************
*** 60,66
  			cp2 = getenv("TERM");
  			if (cp2==(char *) 0 || strcmp(name,cp2)==0) {
  				strcpy(bp,cp);
! 				return(tnchktc(useenv));
  			} else {
  				tf = open(E_TERMCAP, 0);
  			}

--- 59,65 -----
  			cp2 = getenv("TERM");
  			if (cp2==(char *) 0 || strcmp(name,cp2)==0) {
  				strcpy(bp,cp);
! 				return(tnchktc());
  			} else {
  				tf = open(E_TERMCAP, 0);
  			}
***************
*** 66,74
  			}
  		} else
  			tf = open(cp, 0);
- 	    } else
- 		tf = open (useenv, 0);
- 
  	}
  	if (tf==0)
  		tf = open(E_TERMCAP, 0);

--- 65,70 -----
  			}
  		} else
  			tf = open(cp, 0);
  	}
  	if (tf==0)
  		tf = open(E_TERMCAP, 0);
***************
*** 109,115
  		 */
  		if (tnamatch(name)) {
  			close(tf);
! 			return(tnchktc(useenv));
  		}
  	}
  }

--- 105,111 -----
  		 */
  		if (tnamatch(name)) {
  			close(tf);
! 			return(tnchktc());
  		}
  	}
  }
***************
*** 121,128
   * entries to say "like an HP2621 but doesn't turn on the labels".
   * Note that this works because of the left to right scan.
   */
! tnchktc(useenv)
! 	char *useenv;
  {
  	register char *p, *q;
  	char tcname[16];	/* name of similar terminal */

--- 117,123 -----
   * entries to say "like an HP2621 but doesn't turn on the labels".
   * Note that this works because of the left to right scan.
   */
! tnchktc()
  {
  	register char *p, *q;
  	char tcname[16];	/* name of similar terminal */
***************
*** 149,155
  		write(2, "Infinite tc= loop\n", 18);
  		return (0);
  	}
! 	if (tgetent(tcbuf, tcname, useenv) != 1)
  		return(0);
  	for (q=tcbuf; *q != ':'; q++)
  		;

--- 144,150 -----
  		write(2, "Infinite tc= loop\n", 18);
  		return (0);
  	}
! 	if (tgetent(tcbuf, tcname) != 1)
  		return(0);
  	for (q=tcbuf; *q != ':'; q++)
  		;
