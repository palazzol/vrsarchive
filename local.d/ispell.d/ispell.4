.TH ISPELL 4
.SH NAME
ispell \- format of ispell dictionaries
.SH DESCRIPTION
Dictionaries for
.IR ispell (1)
come in two formats:
raw, and unhashed.
The hashed dictionary is generated by
.I buildhash
(see
.IR ispell "(1))"
from the raw dictionary, and is not described here.
.PP
A raw
.I ispell
dictionary (either the main dictionary or your own personal
dictionary) contains a list of words, one per line.
Each word may optionally be followed by a slash ("/") and one or more
flags, which modify the root word as explained below.
Case is significant in the root word, but ignored in the flags.
The dictionary does not need to be sorted.
.PP
The case of the root word controls the case of words accepted by
.IR ispell ,
as follows:
.IP (1)
If the root word appears only in lower case (e.g., "bob"),
it will be accepted in lower case, capitalized, or all capitals.
.IP (2)
If the root word appears capitalized (e.g., "Robert"), it will be not
be accepted in
all-lower case, but will be accepted capitalized or all in capitals.
.IP (3)
If the root word appears all in capitals (e.g., "UNIX"),
it will only be accepted all in capitals.
.IP (4)
If the root word appears with a "funny" capitalization (e.g., "ITCorp"),
a word will be accepted only if it follows that capitalization, or if
it appears all in capitals.
.IP (5)
More than one capitalization of a root word may appear in the dictionary.
Flags from different capitalizations are combined by OR-ing them together.
.PP
Redundant capitalizations (e.g., "bob" and "Bob") will be combined
by
.I buildhash
and by
.I ispell
(for personal dictionaries),
and can be removed from a raw dictionary by
.IR munchlist .
.PP
For example, the dictionary:
.PP
.RS
.nf
bob
Robert
UNIX
ITcorp
ITCorp
.fi
.RE
.PP
will accept "bob," "Bob," "BOB," "Robert," "ROBERT," "UNIX," "ITcorp,"
"ITCorp," and "ITCORP," and will reject all others.
Some of the unacceptable forms are "bOb," "robert," "Unix," and "ItCorp."
.PP
As mentioned above, root words in any dictionary may be extended by flags.
Each flag is a single alphabetic character, which represents a suffix
that may be added to the root to form a new word.
For example, the "D" flag can be added to "bathe" to make "bathed".
Since flags are represented as a single bit in the hashed dictionary, this
results in significant space savings.
The
.I munchlist
script will reduce an existing raw dictionary by adding flags when possible.
.PP
When a word is extended with a suffix, the suffix will be accepted only
if it appears in the same case
as the final letter of the word.
Thus, for example, the entry "UNIX/M" in the main dictionary ("M" means
add an apostrophe and an "s" to make a possessive) would accept "UNIX'S"
but would reject "UNIX's".
If "UNIX's" is legal, it must appear as a separate dictionary entry,
and it will not be combined by
.IR munchlist .
.PP
In the following discussion of the flags,
let # and @ be "variables" that can stand for any letter.
Upper case letters are constants.
"..." stands for any string of zero or more
letters, but note that no word may exist in the dictionary which is not at
least 2 letters long, so, for example, "fly" may not be produced by placing
the "Y" flag on "f".
Also, no flag is effective unless the word that it
creates is at least 4 letters long, so, for example, "wed" may not be
produced by placing the "D" flag on "we".
.PP
The meaning of the flags is as follows:
.IP "V"
.in +5m
.ti -5m
\&...e --> ...ive  as in create --> creative
.br
.ti -5m
if # .ne. e, ...# --> ...#ive  as in prevent --> preventive
.in -5m
.IP "N"
.in +5m
.ti -5m
\&...e --> ...ion  as in create --> creation
.br
.ti -5m
\&...y --> ...ication  as in multiply --> multiplication
.br
.ti -5m
if # .ne. e or y, ...# --> ...#en  as in fall --> fallen
.in -5m
.IP "X"
.in +5m
.ti -5m
\&...e --> ...ions  as in create --> creations
.br
.ti -5m
\&...y --> ...ications  as in multiply --> multiplications
.br
.ti -5m
if # .ne. e or y, ...# --> ...#ens  as in weak --> weakens
.in -5m
.IP "H"
.in +5m
.ti -5m
\&...y --> ...ieth  as in twenty --> twentieth
.br
.ti -5m
if # .ne. y, ...# --> ...#th  as in hundred --> hundredth
.in -5m
.IP "Y"
.in +5m
.ti -5m
\&... --> ...ly  as in quick --> quickly
.in -5m
.IP "G"
.in +5m
.ti -5m
\&...e --> ...ing  as in file --> filing
.br
.ti -5m
if # .ne. e, ...# --> ...#ing  as in cross --> crossing
.in -5m
.IP "J"
.in +5m
.ti -5m
\&...e --> ...ings  as in file --> filings
.br
.ti -5m
if # .ne. e, ...# --> ...#ings  as in cross --> crossings
.in -5m
.IP "D"
.in +5m
.ti -5m
\&...e --> ...ed  as in create --> created
.br
.ti -5m
.br
.ti -5m
if @ .ne. a, e, i, o, or u,
\&...@y --> ...@ied  as in imply --> implied
.br
.ti -5m
if # .ne. e or y, or (# = y and @ = a, e, i, o, or u)
\&...@# --> ...@#ed  as in cross --> crossed
or convey --> conveyed
.in -5m
.IP "T"
.in +5m
.ti -5m
\&...e --> ...est  as in late --> latest
.br
.ti -5m
if @ .ne. a, e, i, o, or u,
\&...@y --> ...@iest  as in dirty --> dirtiest
.br
.ti -5m
if # .ne. e or y, or (# = y and @ = a, e, i, o, or u)
\&...@# --> ...@#est  as in small --> smallest
or gray --> grayest
.in -5m
.IP "R"
.in +5m
.ti -5m
\&...e --> ...er  as in skate --> skater
.br
.ti -5m
if @ .ne. a, e, i, o, or u,
\&...@y --> ...@ier  as in multiply --> multiplier
.br
.ti -5m
if # .ne. e or y, or (# = y and @ = a, e, i, o, or u)
\&...@# --> ...@#er  as in build --> builder
or convey --> conveyer
.in -5m
.IP "Z"
.in +5m
.ti -5m
\&...e --> ...ers  as in skate --> skaters
.br
.ti -5m
if @ .ne. a, e, i, o, or u,
\&...@y --> ...@iers  as in multiply --> multipliers
.br
.ti -5m
if # .ne. e or y, or (# = y and @ = a, e, i, o, or u)
\&...@# --> ...@#ers  as in build --> builders
or slay --> slayers
.in -5m
.IP "S"
.in +5m
.ti -5m
if @ .ne. a, e, i, o, or u,
\&...@y --> ...@ies  as in imply --> implies
.br
.ti -5m
if # .eq. s, x, z, or h,
\&...# --> ...#es  as in fix --> fixes
.br
.ti -5m
if # .ne. s, x, z, h, or y, or (# = y and @ = a, e, i, o, or u)
\&...@# --> ...@#s  as in bat --> bats
or convey --> conveys
.in -5m
.IP "P"
.in +5m
.ti -5m
if @ .ne. a, e, i, o, or u,
\&...@y --> ...@iness  as in cloudy --> cloudiness
.br
.ti -5m
if # .ne. y, or @ = a, e, i, o, or u,
\&...@# --> ...@#ness  as in late --> lateness
or gray --> grayness
.in -5m
.IP "M"
.in +5m
.ti -5m
\&... --> ...'s  as in dog --> dog's
.in -5m
.PP
To summarize more briefly:
.PP
.RS
.nf
V \- ive
N \- ion, tion, en
X \- ions, ications, ens
H \- th, ieth
Y \- ly
G \- ing
J \- ings
D \- ed
T \- est
R \- er
Z \- ers
S \- s, es, ies
P \- ness, iness
M \- 's
.fi
.RE
.SH "SEE ALSO"
ispell(1)
