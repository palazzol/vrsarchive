/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /home/Vince/cvs/games.d/valspeak.d/jive.c-,v 1.2 2002-11-22 05:04:08 Vincent Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)

typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 208
#define YY_END_OF_BUFFER 209
static yyconst short int yy_accept[776] =
    {   0,
        0,    0,  209,  206,  207,  206,   55,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  206,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  204,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   94,    0,    0,    0,
        0,    0,   28,  167,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   29,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   30,    0,    0,    0,    0,    0,
        0,    0,    0,   31,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   71,    0,    0,    0,    0,   32,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   93,    0,
       33,    0,  201,    0,    0,    0,    0,    0,    0,   34,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  178,
        0,    0,    0,    0,    0,   96,    0,    0,    0,    0,
        0,    0,    0,  113,    0,    0,    0,    0,    0,    0,

        0,    0,  177,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   26,    0,    0,    0,    0,
        0,    0,  150,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  205,    0,   87,    0,    0,    0,    0,
        0,  160,    0,  193,    0,    0,    0,  192,    0,    0,
        0,    0,   56,    0,    0,    0,    0,    0,  115,    0,
        0,    0,    0,    0,  106,  110,  111,    0,    0,    0,
        0,    0,    0,    0,   83,    0,    0,    0,    0,    0,
       95,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

      129,    0,    0,    0,    0,  127,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  173,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   86,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  130,    0,    0,    0,  112,    0,
       37,   52,    0,    0,  196,    0,    0,    0,    0,    0,
      170,    0,    0,    0,  161,    0,    0,   97,    0,    0,
       27,    0,    0,   41,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   35,    6,  191,    0,   81,    0,

        0,    0,    0,    0,    0,    0,    0,  109,    0,  198,
      163,    0,    0,    0,    0,    0,    0,  122,    0,  172,
        0,  202,    0,    0,    1,    0,   15,    0,   82,    0,
       23,  123,    0,    0,  180,   51,  162,   67,    0,    0,
        0,   14,    0,    0,    0,   77,    0,  114,    0,  179,
        0,    0,    0,    0,    0,   68,   64,  105,    0,    0,
        0,  128,    0,    0,    0,  154,    0,    0,    0,    0,
        0,    0,    2,    0,    0,    0,    0,   36,    0,   12,
      181,   98,    0,    5,  108,    0,  190,    0,  171,    0,
      164,    0,    0,    0,    0,    0,    0,   80,  137,  136,

      147,    0,  148,  143,    0,    0,    0,    0,    0,    0,
       57,    0,   59,  100,   47,    0,   25,   21,  118,    0,
        0,    0,   69,   91,   48,    0,    0,  126,  174,    0,
      145,    0,    0,  142,    0,  149,    0,    0,    0,    0,
      141,    0,    0,    0,    0,    0,    0,    0,    4,    0,
        0,  203,    0,    0,    0,    0,    0,    0,   13,   58,
        0,   88,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  131,    0,    0,  107,    0,    0,   16,    0,  166,
      182,  124,    0,  200,    0,    0,    0,    0,    0,    0,
        0,    0,  169,    0,  194,    0,    0,    0,    0,    7,

        0,    0,    0,  197,    0,   62,   39,   22,  117,   92,
        0,   85,  139,  138,    0,    0,    0,    0,   60,   54,
      159,  119,   61,    0,    0,   66,    0,    0,    0,  151,
        0,  144,  140,  146,  103,   18,    0,   42,    0,    0,
       84,  183,    0,  156,    0,    0,   20,  158,    0,   17,
        0,  185,   40,    0,    0,    0,    0,   43,    0,   72,
        0,    0,    0,    0,    0,  165,   65,   89,    0,  155,
        0,    0,    0,  186,    0,    0,    0,   19,    0,    0,
        0,    0,    0,  102,    0,    0,    0,    0,   63,   90,
       79,    0,   10,    8,  104,  168,   44,   78,    0,    0,

      132,    0,    0,   50,   49,   75,   11,  116,    0,    9,
        0,  125,  153,    0,    0,    3,    0,  195,    0,    0,
      188,    0,    0,    0,   99,   46,    0,  134,    0,    0,
       70,  184,    0,  199,  152,    0,    0,    0,  157,    0,
      189,    0,    0,   45,  101,    0,   53,    0,   73,    0,
       24,    0,    0,   38,    0,   76,    0,  176,    0,    0,
        0,    0,    0,  135,    0,    0,    0,    0,  175,    0,
       74,    0,    0,  133,    0
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    2,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    3,    4,    1,    1,    1,    1,    1,    5,    1,
        1,    1,    1,    1,    6,    7,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    8,    1,    1,
        1,    1,    1,    1,    9,   10,    1,   11,    1,    1,
        1,   12,   13,   14,    1,   15,   16,   17,    1,   18,
        1,   19,   20,   21,   22,   23,   24,   25,   26,    1,
        1,    1,    1,    1,    1,    1,   27,   28,   29,   30,

       31,   32,   33,   34,   35,   36,   37,   38,   39,   40,
       41,   42,   43,   44,   45,   46,   47,   48,   49,   50,
       51,   52,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[53] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1
    } ;

static yyconst short int yy_base[776] =
    {   0,
        0,    0,  848,  849,  849,   50,  849,  806,  815,  818,
      809,   62,  802,  815,  810,   26,   27,  806,  822,  829,
      806,  795,  106,  146,   62,   97,   68,   99,   85,   96,
      122,  114,  107,  131,  157,  162,  164,  151,   48,  172,
      206,  197,  167,   51,  207,  827,  178,   54,  251,  793,
      830,   45,  805,   83,  173,  185,   46,   98,  787,  799,
       70,  157,  794,  198,  100,  796,  129,  796,  209,  186,
      795,  794,   95,  795,  775,  849,  795,  791,  793,  225,
      775,  768,  790,  143,  776,  771,  849,  801,  788,  774,
      764,  764,  849,  849,  765,  130,  777,  770,  768,  191,

      167,  772,  177,  199,  753,  764,  756,  217,  212,  771,
      232,  765,  753,  849,  795,   74,  222,  220,  762,  752,
      223,  227,  768,  755,  849,  253,  790,  765,  743,  745,
      172,  246,  752,  849,  755,  242,  260,  742,  747,  756,
      740,  756,  751,  849,  739,  232,  261,  271,  849,  750,
      745,  738,  750,  265,  732,  731,  728,  270,  849,  732,
      849,  275,  849,  271,  275,  287,  236,  733,  736,  849,
      723,  312,  287,  292,  742,  741,  740,  289,  738,  849,
      736,  725,  719,  715,  726,  757,  720,  727,  292,  730,
      284,  717,  709,  725,  712,  706,  281,  704,  747,  718,

      292,  708,  849,  714,  713,  742,  291,  717,  702,  739,
      697,  705,  736,  694,  693,  849,  730,  708,  699,  694,
      697,  693,  849,  690,  698,  684,  692,  693,  694,  697,
      693,  691,  696,  849,  682,  324,  685,  683,  677,  670,
      331,  849,  688,  849,  677,  667,  685,  849,  674,  665,
      682,  671,  849,  300,  673,  677,  675,  660,  849,  658,
      697,  661,  652,  665,  849,  849,  849,  667,  652,  301,
      652,  664,  656,  663,  689,  660,  646,  658,  658,  656,
      849,  639,  645,  646,  652,  636,  643,  650,  630,  629,
      646,  649,  648,  639,  642,  645,  640,  635,  638,  637,

      849,  616,  626,  634,  622,  201,  628,  616,  630,  612,
      614,  619,  624,  621,  614,  624,  615,  621,  605,  623,
      618,  614,  616,  609,  605,  613,  593,  596,  849,  610,
      602,  593,  592,  591,  605,  597,  313,  588,  336,  604,
      588,  585,  584,  626,  591,  624,  306,  588,  587,  583,
      620,  595,  586,  591,  849,  616,  587,  614,  849,  577,
      849,  849,  612,  569,  849,  610,  609,  342,  567,  577,
      849,  575,  578,  576,  849,  571,  565,  601,  552,  571,
      849,  554,  570,  849,  572,  563,  594,  554,  544,  565,
      566,  548,  553,  539,  849,  849,  849,  545,  849,  557,

      554,  545,  554,  544,  578,  537,  550,  849,  533,  849,
      849,  542,  547,  574,  529,  544,  543,  849,  532,  849,
      526,  849,  540,  539,  849,  523,  849,  540,  849,  527,
      849,  849,  520,  521,  849,  343,  849,  849,  520,  522,
      527,  849,  558,  529,  556,  849,  518,  849,  505,  849,
      527,  516,  515,  502,  523,  849,  849,  849,  346,  507,
      512,  849,  508,  519,  512,  849,  516,  510,  513,  499,
      501,  500,  849,  502,  493,  535,  497,  849,  505,  490,
      849,  849,  490,  849,  345,  489,  849,  501,  849,  500,
      849,  527,  489,  488,  496,  482,  492,  849,  849,  849,

      849,  521,  849,  849,  520,  477,  470,  473,  488,  481,
      514,  513,  512,  849,  511,  482,  849,  849,  849,  509,
      470,  479,  849,  849,  849,  469,  475,  849,  849,  462,
      849,  466,  478,  849,  470,  849,  476,  462,  455,  470,
      849,  468,  495,  463,  450,  448,  453,  447,  849,  446,
      446,  849,  450,  448,  442,  484,  483,  450,  849,  849,
      481,  849,  456,  452,  440,  440,  433,  473,  446,  430,
      448,  849,  444,  432,  849,  437,  444,  849,  431,  849,
      849,  849,  439,  849,  437,  427,  435,  433,  437,  433,
      459,  434,  849,  422,  849,  425,  417,  424,  453,  849,

      410,  408,  450,  849,  408,  849,  417,  849,  849,  849,
      419,  849,  849,  849,  403,  407,  402,  398,  849,  442,
      849,  849,  849,  400,  410,  849,  411,  414,  400,  849,
      399,  849,  849,  849,  849,  849,  392,  849,  393,  390,
      849,  849,  404,  849,  386,  402,  849,  849,  386,  849,
      393,  849,  849,  391,  388,  382,  397,  849,  386,  849,
      393,  384,  383,  391,  418,  849,  849,  849,  388,  849,
      388,  379,  378,  849,  381,  383,  383,  849,  367,  371,
      365,  370,  382,  849,  405,  360,  375,  374,  849,  849,
      849,  362,  849,  849,  849,  849,  849,  849,  372,  358,

      849,  363,  369,  849,  849,  849,  849,  849,  368,  849,
      368,  849,  849,  357,  361,  849,  355,  849,  391,  366,
      849,  351,  388,  341,  385,  342,  382,  849,  343,  338,
      849,  849,  341,  849,  849,  333,  338,  342,  849,  334,
      849,  342,  341,  849,  367,  331,  849,  321,  849,  331,
      849,  335,  326,  849,  328,  849,  317,  358,  329,  314,
      312,  321,  326,  849,  323,  307,  306,  307,  849,  200,
      849,  111,   40,  849,  849
    } ;

static yyconst short int yy_def[776] =
    {   0,
      775,    1,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,

      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,

      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,

      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,

      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,

      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,

      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,

      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  775,  775,  775,    0
    } ;

static yyconst short int yy_nxt[902] =
    {   0,
        4,    5,    6,    7,    4,    8,    4,    4,    4,    9,
       10,   11,   12,   13,   14,   15,    4,    4,   16,   17,
       18,   19,   20,   21,    4,   22,   23,   24,   25,   26,
       27,   28,   29,   30,   31,   32,   33,   34,   35,   36,
       37,   38,   39,   40,   41,   42,   43,   44,   45,   46,
       47,   48,   49,   85,  149,   94,   83,  161,   94,   50,
      170,   94,   51,   52,   77,   53,   84,   54,  774,   94,
      113,  181,  191,   86,  114,   94,   55,   56,   57,  182,
       58,   59,   60,   61,   62,   52,  192,   63,   64,   65,
       66,   67,   94,   68,   69,   70,  197,   71,   72,  107,

      216,   78,  106,   94,   94,  114,   94,   79,   92,  184,
      198,  115,   93,   94,   94,  266,  185,  116,  267,  120,
      125,   94,  122,  108,  193,  121,  123,  109,  125,   94,
      204,  110,  239,  117,  205,  217,  124,  111,   94,  118,
      112,  131,  119,   95,   96,  773,  132,  194,  129,   97,
       98,   99,   93,   94,   80,  207,  240,   81,   94,  180,
      130,  126,  185,  134,   94,  133,  127,  128,  134,   94,
      229,   94,  100,  161,   94,  186,  101,  145,  149,   94,
      102,  146,  230,  135,  170,   94,  103,  136,  139,  104,
      141,  147,  105,  246,  148,  247,  140,  137,  150,  157,

      142,  199,   83,  138,   94,  143,  162,  144,  163,  287,
      187,  288,   84,   94,   94,  189,  188,  249,  171,  212,
      244,  250,  190,  158,  201,  179,  213,  462,  202,  251,
      159,  160,   85,  164,  151,  245,  152,  165,  257,  252,
      166,  167,  209,  772,  153,  463,  154,  168,  203,  210,
      169,  155,  156,   49,  211,  223,  256,  258,  224,  268,
      270,  277,  260,  274,  219,  269,  271,  335,  275,  225,
      276,  261,  305,  336,  278,  306,  289,  172,  173,  174,
      262,  175,  221,   60,  176,  281,  290,  293,  282,  295,
       65,  294,  177,  296,   68,  178,   70,  310,  307,  297,

      308,  311,  309,  318,  326,  312,  323,  324,  319,  327,
      328,  313,  331,  333,  186,  329,  330,  340,  341,  332,
      352,  334,  209,  355,  190,  362,  363,  356,  398,  353,
      414,  367,  192,  404,  211,  347,  372,  348,  427,  493,
      496,  415,  502,  494,  519,  567,  428,  602,  582,  187,
      771,  770,  769,  768,  767,  766,  503,  765,  764,  763,
      762,  761,  760,  759,  758,  757,  756,  399,  755,  745,
      405,  754,  753,  752,  751,  497,  583,  750,  749,  498,
      748,  747,  568,  746,  745,  744,  520,  725,  743,  603,
      742,  741,  740,  739,  738,  737,  736,  735,  734,  733,

      732,  731,  730,  729,  728,  727,  726,  725,  724,  723,
      722,  721,  720,  719,  718,  717,  716,  715,  714,  713,
      712,  711,  710,  709,  708,  707,  706,  705,  704,  703,
      702,  701,  700,  699,  698,  697,  696,  695,  694,  693,
      692,  691,  690,  689,  620,  688,  687,  686,  685,  684,
      683,  682,  681,  680,  679,  678,  677,  676,  675,  674,
      673,  672,  671,  670,  669,  668,  667,  666,  665,  664,
      663,  662,  661,  660,  659,  658,  657,  656,  655,  654,
      653,  652,  651,  650,  649,  648,  647,  646,  645,  644,
      643,  642,  641,  640,  639,  638,  637,  636,  635,  634,

      633,  632,  631,  630,  629,  628,  627,  626,  625,  624,
      623,  622,  621,  515,  513,  620,  511,  619,  618,  617,
      616,  615,  614,  613,  612,  611,  610,  609,  608,  607,
      606,  605,  604,  601,  600,  599,  598,  597,  596,  595,
      594,  593,  592,  591,  590,  589,  588,  587,  586,  585,
      584,  581,  580,  579,  578,  577,  576,  575,  574,  573,
      572,  571,  570,  569,  566,  565,  564,  563,  562,  561,
      560,  559,  558,  557,  556,  555,  554,  553,  552,  551,
      550,  549,  548,  547,  546,  545,  544,  543,  542,  541,
      540,  539,  538,  537,  536,  535,  534,  533,  532,  531,

      530,  529,  528,  378,  527,  526,  525,  524,  523,  522,
      521,  518,  517,  516,  515,  514,  513,  512,  511,  510,
      509,  508,  507,  506,  505,  504,  501,  500,  499,  372,
      363,  356,  352,  495,  492,  491,  490,  489,  488,  487,
      486,  485,  484,  483,  482,  481,  480,  479,  478,  477,
      476,  475,  474,  473,  472,  471,  470,  469,  468,  467,
      466,  465,  464,  461,  460,  459,  458,  457,  456,  455,
      454,  453,  452,  451,  450,  449,  448,  447,  446,  445,
      444,  443,  442,  441,  440,  439,  438,  437,  436,  435,
      434,  433,  432,  431,  430,  429,  426,  425,  424,  423,

      422,  421,  420,  419,  418,  417,  416,  413,  412,  411,
      410,  409,  408,  407,  406,  403,  402,  401,  400,  397,
      396,  395,  394,  393,  392,  391,  390,  389,  388,  387,
      386,  385,  384,  383,  382,  381,  380,  379,  378,  377,
      376,  375,  374,  373,  371,  370,  369,  368,  366,  365,
      364,  361,  360,  359,  358,  357,  354,  351,  350,  186,
      349,  348,  347,  346,  345,  344,  343,  342,  193,  339,
      338,  337,  325,  322,  321,  320,  317,  316,  315,  314,
      304,  303,  302,  301,  300,  299,  298,  292,  291,  286,
      285,  284,  283,  280,  279,  273,  272,  265,  264,  263,

      259,  255,  254,  253,  248,  243,  242,  241,  238,  237,
      236,  235,  234,  233,  232,  231,  228,  227,  226,  222,
      221,  220,  219,  218,  215,  214,  208,  206,  200,  196,
      195,  183,  180,  179,   94,   91,   90,   89,   88,   87,
       82,   81,   80,   76,   75,   74,   73,  775,    3,  775,
      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,

      775
    } ;

static yyconst short int yy_chk[902] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    6,   17,   39,   39,   16,   44,   44,    6,
       48,   48,    6,    6,   12,    6,   16,    6,  773,   25,
       27,   52,   57,   17,   27,   27,    6,    6,    6,   52,
        6,    6,    6,    6,    6,    6,   57,    6,    6,    6,
        6,    6,   29,    6,    6,    6,   61,    6,    6,   26,

       73,   12,   25,   30,   26,   28,   28,   12,   23,   54,
       61,   27,   23,   23,   33,  116,   54,   27,  116,   29,
       32,   32,   30,   26,   58,   29,   30,   26,   31,   31,
       65,   26,   96,   28,   65,   73,   30,   26,   34,   28,
       26,   33,   28,   23,   23,  772,   33,   58,   32,   23,
       23,   23,   24,   24,   32,   67,   96,   34,   38,   62,
       32,   31,   67,   35,   35,   34,   31,   31,   36,   36,
       84,   37,   24,   43,   43,   55,   24,   38,   40,   40,
       24,   38,   84,   35,   47,   47,   24,   35,   36,   24,
       37,   38,   24,  101,   38,  101,   36,   35,   40,   42,

       37,   62,   40,   35,   42,   37,   43,   37,   43,  131,
       55,  131,   40,   41,   45,   56,   55,  103,   47,   70,
      100,  103,   56,   42,   64,   56,   70,  306,   64,  104,
       42,   42,   41,   45,   41,  100,   41,   45,  109,  104,
       45,   45,   69,  770,   41,  306,   41,   45,   64,   69,
       45,   41,   41,   49,   69,   80,  108,  109,   80,  117,
      118,  122,  111,  121,  108,  117,  118,  167,  121,   80,
      121,  111,  146,  167,  122,  146,  132,   49,   49,   49,
      111,   49,  126,   49,   49,  126,  132,  136,  126,  137,
       49,  136,   49,  137,   49,   49,   49,  148,  147,  137,

      147,  148,  147,  154,  162,  148,  158,  158,  154,  162,
      164,  148,  165,  166,  172,  164,  164,  173,  174,  165,
      189,  166,  178,  191,  173,  197,  197,  191,  236,  189,
      254,  201,  174,  241,  178,  201,  207,  207,  270,  337,
      339,  254,  347,  337,  368,  436,  270,  485,  459,  172,
      768,  767,  766,  765,  763,  762,  347,  761,  760,  759,
      758,  757,  755,  753,  752,  750,  748,  236,  746,  745,
      241,  743,  742,  740,  738,  339,  459,  737,  736,  339,
      733,  730,  436,  729,  727,  726,  368,  725,  724,  485,
      723,  722,  720,  719,  717,  715,  714,  711,  709,  703,

      702,  700,  699,  692,  688,  687,  686,  685,  683,  682,
      681,  680,  679,  677,  676,  675,  673,  672,  671,  669,
      665,  664,  663,  662,  661,  659,  657,  656,  655,  654,
      651,  649,  646,  645,  643,  640,  639,  637,  631,  629,
      628,  627,  625,  624,  620,  618,  617,  616,  615,  611,
      607,  605,  603,  602,  601,  599,  598,  597,  596,  594,
      592,  591,  590,  589,  588,  587,  586,  585,  583,  579,
      577,  576,  574,  573,  571,  570,  569,  568,  567,  566,
      565,  564,  563,  561,  558,  557,  556,  555,  554,  553,
      551,  550,  548,  547,  546,  545,  544,  543,  542,  540,

      539,  538,  537,  535,  533,  532,  530,  527,  526,  522,
      521,  520,  516,  515,  513,  512,  511,  510,  509,  508,
      507,  506,  505,  502,  497,  496,  495,  494,  493,  492,
      490,  488,  486,  483,  480,  479,  477,  476,  475,  474,
      472,  471,  470,  469,  468,  467,  465,  464,  463,  461,
      460,  455,  454,  453,  452,  451,  449,  447,  445,  444,
      443,  441,  440,  439,  434,  433,  430,  428,  426,  424,
      423,  421,  419,  417,  416,  415,  414,  413,  412,  409,
      407,  406,  405,  404,  403,  402,  401,  400,  398,  394,
      393,  392,  391,  390,  389,  388,  387,  386,  385,  383,

      382,  380,  379,  378,  377,  376,  374,  373,  372,  370,
      369,  367,  366,  364,  363,  360,  358,  357,  356,  354,
      353,  352,  351,  350,  349,  348,  346,  345,  344,  343,
      342,  341,  340,  338,  336,  335,  334,  333,  332,  331,
      330,  328,  327,  326,  325,  324,  323,  322,  321,  320,
      319,  318,  317,  316,  315,  314,  313,  312,  311,  310,
      309,  308,  307,  305,  304,  303,  302,  300,  299,  298,
      297,  296,  295,  294,  293,  292,  291,  290,  289,  288,
      287,  286,  285,  284,  283,  282,  280,  279,  278,  277,
      276,  275,  274,  273,  272,  271,  269,  268,  264,  263,

      262,  261,  260,  258,  257,  256,  255,  252,  251,  250,
      249,  247,  246,  245,  243,  240,  239,  238,  237,  235,
      233,  232,  231,  230,  229,  228,  227,  226,  225,  224,
      222,  221,  220,  219,  218,  217,  215,  214,  213,  212,
      211,  210,  209,  208,  206,  205,  204,  202,  200,  199,
      198,  196,  195,  194,  193,  192,  190,  188,  187,  186,
      185,  184,  183,  182,  181,  179,  177,  176,  175,  171,
      169,  168,  160,  157,  156,  155,  153,  152,  151,  150,
      145,  143,  142,  141,  140,  139,  138,  135,  133,  130,
      129,  128,  127,  124,  123,  120,  119,  115,  113,  112,

      110,  107,  106,  105,  102,   99,   98,   97,   95,   92,
       91,   90,   89,   88,   86,   85,   83,   82,   81,   79,
       78,   77,   75,   74,   72,   71,   68,   66,   63,   60,
       59,   53,   51,   50,   46,   22,   21,   20,   19,   18,
       15,   14,   13,   11,   10,    9,    8,    3,  775,  775,
      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,
      775,  775,  775,  775,  775,  775,  775,  775,  775,  775,

      775
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "jive.l"
#define INITIAL 0
#line 11 "jive.l"
	char buf[128];


/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 15 "jive.l"


	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 776 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 849 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 16 "jive.l"
printf(" stash");
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 17 "jive.l"
printf(" t'row");
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 18 "jive.l"
printf(" honky code");
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 19 "jive.l"
printf(" Isaac");
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 20 "jive.l"
printf(" slow mo-fo");
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 21 "jive.l"
printf(" that slow mo-fo");
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 22 "jive.l"
printf(" snatch'd");
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 23 "jive.l"
printf(" wet-back");
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 24 "jive.l"
printf(" wet-back");
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 25 "jive.l"
printf(" greaser");
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 26 "jive.l"
printf(" greaser");
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 27 "jive.l"
printf(" snatch");
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 28 "jive.l"
printf(" duzn't");
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 29 "jive.l"
printf(" JIBE");
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 30 "jive.l"
printf(" honkyfool");
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 31 "jive.l"
printf(" doodad");
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 32 "jive.l"
printf("e da damn ");
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 33 "jive.l"
printf("a da damn ");
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 34 "jive.l"
printf("t da damn ");
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 35 "jive.l"
printf("d da damn ");
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 36 "jive.l"
printf(" dude ");
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 37 "jive.l"
printf("mama");
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 38 "jive.l"
printf("goat");
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 39 "jive.l"
printf("sump'n");
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 40 "jive.l"
printf(" honky jibe ");
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 41 "jive.l"
printf(" -on rebound- ");
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 42 "jive.l"
printf(" -check y'out latah-");
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 43 "jive.l"
{ sprintf(buf, "%s  Sheeeiit.",yytext); printf(buf); }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 44 "jive.l"
{ sprintf(buf, "%s  What it is, Mama!",yytext); printf(buf); }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 45 "jive.l"
{ sprintf(buf, "%s  Ya' know?",yytext); printf(buf); }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 46 "jive.l"
{ sprintf(buf, "%s  'S coo', bro.",yytext); printf(buf); }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 47 "jive.l"
{ sprintf(buf, "%s  Ah be baaad...",yytext); printf(buf); }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 48 "jive.l"
{ sprintf(buf, "%s  Man!",yytext); printf(buf); }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 49 "jive.l"
{ sprintf(buf, "%s  Slap mah fro!",yytext); printf(buf); }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 50 "jive.l"
printf("Sho' nuff");
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 51 "jive.l"
printf("sho' nuff");
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 52 "jive.l"
printf(" git");
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 53 "jive.l"
printf("gots'ta");
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 54 "jive.l"
printf("gots'ta ");
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 55 "jive.l"
printf("gots'ta");
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 56 "jive.l"
printf("I's gots'ta be");
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 57 "jive.l"
printf("aint");
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 58 "jive.l"
printf("aint");
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 59 "jive.l"
printf("aint");
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 60 "jive.l"
printf(" is yo'");
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 61 "jive.l"
printf(" you is");
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 62 "jive.l"
printf(" fedora ");
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 63 "jive.l"
printf(" kicker");
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 64 "jive.l"
printf("aint");
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 65 "jive.l"
printf("gots'ta");
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 66 "jive.l"
printf("gots'");
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 67 "jive.l"
printf(" gots'ta");
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 68 "jive.l"
printf("mosey on down");
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 69 "jive.l"
printf(" mosey on down ");
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 70 "jive.l"
printf(".  Right On!  ");
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 71 "jive.l"
printf("steal");
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 72 "jive.l"
printf(" wheels ");
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 73 "jive.l"
printf("roll");
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 74 "jive.l"
printf(" feed da bud ");
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 75 "jive.l"
printf(" brother ");
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 76 "jive.l"
printf(" brother");
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 77 "jive.l"
printf("honky");
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 78 "jive.l"
printf(" gentleman ");
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 79 "jive.l"
printf("supa' fine");
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 80 "jive.l"
printf("sucka'");
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 81 "jive.l"
printf(" wahtahmellun");
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 82 "jive.l"
printf("plantation");
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 83 "jive.l"
printf("dojigger");
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 84 "jive.l"
printf(" alley");
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 85 "jive.l"
printf("clunker");
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 86 "jive.l"
printf("o'");
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 87 "jive.l"
printf("wasted");
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 88 "jive.l"
printf("super-dude");
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 89 "jive.l"
printf("super honcho");
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 90 "jive.l"
printf("hosed");
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 91 "jive.l"
printf("guv'ment");
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 92 "jive.l"
printf("knowed");
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 93 "jive.l"
printf("a'cuz");
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 94 "jive.l"
printf("A'cuz");
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 95 "jive.l"
printf("yo'");
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 96 "jive.l"
printf("Yo'");
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 97 "jive.l"
printf("foe");
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 98 "jive.l"
printf("gots");
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 99 "jive.l"
printf("ain't");
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 100 "jive.l"
printf("yung");
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 101 "jive.l"
printf("ya'");
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 102 "jive.l"
printf("You's");
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 103 "jive.l"
printf("fust");
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 104 "jive.l"
printf("honky pigs");
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 105 "jive.l"
printf(" chittlin'");
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 106 "jive.l"
printf(" eyeball");
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 107 "jive.l"
printf("scribble");
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 108 "jive.l"
printf("d");
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 109 "jive.l"
printf("D");
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 110 "jive.l"
printf("in'");
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 111 "jive.l"
printf(" some ");
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 112 "jive.l"
printf(" t'");
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 113 "jive.l"
printf("shun");
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 114 "jive.l"
printf(" mos' ");
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 115 "jive.l"
printf(" fum");
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 116 "jive.l"
printf(" cuz' ");
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 117 "jive.l"
printf("youse");
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 118 "jive.l"
printf("Youse");
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 119 "jive.l"
printf("coo'");
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 120 "jive.l"
printf("coo'");
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 121 "jive.l"
printf("a' ");
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 122 "jive.l"
printf("knode");
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 123 "jive.l"
printf("wants'");
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 124 "jive.l"
printf("whup'");
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 125 "jive.l"
printf("'sp");
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 126 "jive.l"
printf("'s");
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 127 "jive.l"
printf(" 's");
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 128 "jive.l"
printf(" 'es");
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 129 "jive.l"
printf("likes");
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 130 "jive.l"
printf("dun did");
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 131 "jive.l"
printf("kind'a");
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 132 "jive.l"
printf("honky chicks");
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 133 "jive.l"
printf(" dudes ");
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 134 "jive.l"
printf(" dudes ");
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 135 "jive.l"
printf(" dude ");
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 136 "jive.l"
printf("honky chick");
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 137 "jive.l"
printf("wasted");
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 138 "jive.l"
printf("baaaad");
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 139 "jive.l"
printf("jimmey ");
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 140 "jive.l"
printf("jimmey'd ");
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 141 "jive.l"
printf(" real");
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 142 "jive.l"
printf("puh'");
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 143 "jive.l"
printf("puh'");
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 144 "jive.l"
printf("o'");
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 145 "jive.l"
printf(" kin");
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 146 "jive.l"
printf("plum ");
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 147 "jive.l"
printf("Mo-town");
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 148 "jive.l"
printf("da' cave");
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 149 "jive.l"
printf(" recon'");
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 150 "jive.l"
printf("Nap-town");
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 151 "jive.l"
printf(" Buckwheat");
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 152 "jive.l"
printf(" Liva' Lips ");
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 153 "jive.l"
printf(" dat fine soul ");
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 154 "jive.l"
printf(" Amos ");
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 155 "jive.l"
printf("Leroy");
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 156 "jive.l"
printf("dat fine femahnaine ladee");
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 157 "jive.l"
printf("Raz'tus ");
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 158 "jive.l"
printf(" Fuh'rina");
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 159 "jive.l"
printf("Kingfish");
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 160 "jive.l"
printf("Issac");
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 161 "jive.l"
printf("Rolo");
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 162 "jive.l"
printf(" Bo-Jangles ");
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 163 "jive.l"
printf(" Snow Flake");
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 164 "jive.l"
printf("Remus");
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 165 "jive.l"
printf("Massa' ");
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 166 "jive.l"
printf("Massa' ");
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 167 "jive.l"
printf("liva' lips");
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 168 "jive.l"
printf("wiz'");
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 169 "jive.l"
printf("wiz'");
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 170 "jive.l"
printf("dat commie rag");
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 171 "jive.l"
printf("bugger'd");
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 172 "jive.l"
printf("funky ");
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 173 "jive.l"
printf("boogy ");
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 174 "jive.l"
printf(" crib");
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 175 "jive.l"
printf("ax'");
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 176 "jive.l"
printf(" so's ");
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 177 "jive.l"
printf("'haid");
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 178 "jive.l"
printf("main man");
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 179 "jive.l"
printf("mama");
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 180 "jive.l"
printf("sucka's");
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 181 "jive.l"
printf("bre'd");
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 182 "jive.l"
{	*(yytext+1) = ',';
				sprintf(buf, "%s dig dis:",yytext);
				printf(buf);
			}
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 186 "jive.l"
printf("begina'");
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 187 "jive.l"
printf("transista'");
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 188 "jive.l"
printf(" uh ");
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 189 "jive.l"
printf("whut");
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 190 "jive.l"
printf("duz");
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 191 "jive.l"
printf("wuz");
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 192 "jive.l"
printf(" wuz");
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 193 "jive.l"
printf("dig it");
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 194 "jive.l"
printf("dig it");
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 195 "jive.l"
printf(" mah'");
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 196 "jive.l"
printf(" ah' ");
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 197 "jive.l"
printf("meta-fuckin'");
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 198 "jive.l"
printf("fro");
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 199 "jive.l"
printf("rap");
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 200 "jive.l"
printf("beat");
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 201 "jive.l"
printf("hoop");
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 202 "jive.l"
printf("ball");
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 203 "jive.l"
printf("homey");
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 204 "jive.l"
printf("farm");
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 205 "jive.l"
printf("Man");
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 206 "jive.l"
printf("wanna");
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 207 "jive.l"
printf("be hankerin' aftah");
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 208 "jive.l"
printf("sheeit");
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 209 "jive.l"
printf("Sheeit");
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 210 "jive.l"
printf("big-ass");
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 211 "jive.l"
printf("bad-ass");
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 212 "jive.l"
printf("little-ass");
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 213 "jive.l"
printf("radical");
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 214 "jive.l"
printf(" be ");
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 215 "jive.l"
printf("booze");
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 216 "jive.l"
printf("scribblin'");
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 217 "jive.l"
printf("issue of GQ");
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 218 "jive.l"
printf("sheet");
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 219 "jive.l"
printf("down");
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 220 "jive.l"
printf("waaay down");
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 221 "jive.l"
printf("boogie");
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 222 "jive.l"
printf("'Sup, dude");
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 223 "jive.l"
printf("pink Cadillac");
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 224 "jive.l"
printf(yytext);
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 225 "jive.l"
printf("\n");
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 227 "jive.l"
ECHO;
	YY_BREAK
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 776 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 776 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 775);

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;


	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 227 "jive.l"


main()
{
	yylex();
}
